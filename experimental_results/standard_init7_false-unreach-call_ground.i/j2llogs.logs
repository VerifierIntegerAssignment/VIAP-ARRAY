
***********************
2017-05-14 03:05:07
***********************

Command--Translate 

Parameters--
 File Name--standard_init7_false-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i2(_n1 + 1)=i2(_n1) + 1,i2(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i4(_n2 + 1)=i4(_n2) + 1,i4(0)=i
 Closed Form Solution
_n2 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i6(_n3 + 1)=i6(_n3) + 1,i6(0)=i
 Closed Form Solution
_n3 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i8(_n4 + 1)=i8(_n4) + 1,i8(0)=i
 Closed Form Solution
_n4 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i10(_n5 + 1)=i10(_n5) + 1,i10(0)=i
 Closed Form Solution
_n5 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i12(_n6 + 1)=i12(_n6) + 1,i12(0)=i
 Closed Form Solution
_n6 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i14(_n7 + 1)=i14(_n7) + 1,i14(0)=i
 Closed Form Solution
_n7 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x16(_n8 + 1)=x16(_n8) + 1,x16(0)=x
 Closed Form Solution
_n8 + x

***********************
2017-05-14 03:05:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array2(a, 0, 1) == 42']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array2(a, 0, 1) == 42

System try to prove 
d1array2(a, 0, 1) == 42

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _n1 + 1) == 42)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(Not(d1array2(a, 0, 1) == 42))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a, _n1, 1 + _n1) ==
                               42))),
                 Or(Not(0 >= 0),
                    d1array2(a, 0, 1 + 0) == 42))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array2(a,
                                        0,
                                        1 + 0) ==
                                        d1array2(a, 0, 1)),
                                        (d1array2(a,
                                        0,
                                        1 + 0) ==
                                        42) ==
                                        (d1array2(a, 0, 1) ==
                                        42)),
                                        Or(Not(0 >= 0),
                                        d1array2(a,
                                        0,
                                        1 + 0) ==
                                        42) ==
                                        Or(False,
                                        d1array2(a, 0, 1) ==
                                        42)),
                            rewrite(Or(False,
                                       d1array2(a, 0, 1) ==
                                       42) ==
                                    (d1array2(a, 0, 1) == 42)),
                            Or(Not(0 >= 0),
                               d1array2(a, 0, 1 + 0) == 42) ==
                            (d1array2(a, 0, 1) == 42)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                       42))),
                         Or(Not(0 >= 0),
                            d1array2(a, 0, 1 + 0) == 42)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                       42))),
                         d1array2(a, 0, 1) == 42)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a, _n1, 1 + _n1) ==
                                  42))),
                    d1array2(a, 0, 1) == 42) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a, _n1, 1 + _n1) ==
                                  42))),
                    d1array2(a, 0, 1) == 42)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))),
            Or(Not(0 >= 0), d1array2(a, 0, 1 + 0) == 42)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))),
            d1array2(a, 0, 1) == 42)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
      d1array2(a, 0, 1) == 42)), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a, _n1, _n1 + 1) ==
                                  42))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       42)),
                            Implies(Var(0) >= 0,
                                    d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    42) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               42)),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                      42))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a, _n1, 1 + _n1) ==
                                 42)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42),
                      Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a, _n1, 1 + _n1) == 42))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42)),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42)))),
   ForAll(_n1,
          Or(Not(_n1 >= 0), d1array2(a, _n1, 1 + _n1) == 42))), asserted(Not(d1array2(a, 0, 1) == 42)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:11
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array2(a, _k1, _k1 + 1)==42),(d1array2(a, _k1 + 1, _k1 + 2)==42))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(a, _k1, _k1 + 1)==42),(d1array2(a, _k1 + 1, _k1 + 2)==42))

System try to prove 
Implies((d1array2(a, _k1, _k1 + 1)==42),(d1array2(a, _k1 + 1, _k1 + 2)==42))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _n1 + 1) == 42)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array2(a, _k1, _k1 + 1)==42),(d1array2(a, _k1 + 1, _k1 + 2)==42))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a, _n1, 1 + _n1) ==
                               42))),
                 Or(Not(1 + _k1 >= 0),
                    d1array2(a, 1 + _k1, 1 + 1 + _k1) == 42))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array2(a,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        1 + _k1,
                                        2 + _k1)),
                                        (d1array2(a,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        42) ==
                                        (d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                        42)),
                                   Or(Not(1 + _k1 >= 0),
                                      d1array2(a,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                      42) ==
                                   Or(Not(_k1 >= -1),
                                      d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                      42)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                       42))),
                         Or(Not(1 + _k1 >= 0),
                            d1array2(a,
                                     1 + _k1,
                                     1 + 1 + _k1) ==
                            42)) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                       42))),
                         Or(Not(_k1 >= -1),
                            d1array2(a, 1 + _k1, 2 + _k1) ==
                            42))),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a, _n1, 1 + _n1) ==
                                  42))),
                    Or(Not(_k1 >= -1),
                       d1array2(a, 1 + _k1, 2 + _k1) == 42)) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a, _n1, 1 + _n1) ==
                                  42))),
                    Not(_k1 >= -1),
                    d1array2(a, 1 + _k1, 2 + _k1) == 42)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))),
            Or(Not(1 + _k1 >= 0),
               d1array2(a, 1 + _k1, 1 + 1 + _k1) == 42)) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))),
            Not(_k1 >= -1),
            d1array2(a, 1 + _k1, 2 + _k1) == 42)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
      Not(_k1 >= -1),
      d1array2(a, 1 + _k1, 2 + _k1) == 42)), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a, _n1, _n1 + 1) ==
                                  42))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       42)),
                            Implies(Var(0) >= 0,
                                    d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    42) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               42)),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                      42))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a, _n1, 1 + _n1) ==
                                 42)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42),
                      Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a, _n1, 1 + _n1) == 42))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42)),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42)))),
   ForAll(_n1,
          Or(Not(_n1 >= 0), d1array2(a, _n1, 1 + _n1) == 42))), not-or-elim(mp(asserted(Not(Implies(d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                    42,
                                    d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                    42))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a,
                                        _k1,
                                        1 + _k1)),
                                        (d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                        42)),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a,
                                        1 + _k1,
                                        2 + _k1)),
                                        (d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        42) ==
                                        (d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                        42)),
                                        Implies(d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                        42,
                                        d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        42) ==
                                        Implies(d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                        42,
                                        d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                        42)),
                                  rewrite(Implies(d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                        42,
                                        d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                        42) ==
                                        Or(Not(d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                        42),
                                        d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                        42)),
                                  Implies(d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                        42,
                                        d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        42) ==
                                  Or(Not(d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                        42),
                                     d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                     42)),
                            Not(Implies(d1array2(a,
                                        _k1,
                                        _k1 + 1) ==
                                        42,
                                        d1array2(a,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        42)) ==
                            Not(Or(Not(d1array2(a,
                                        _k1,
                                        1 + _k1) ==
                                       42),
                                   d1array2(a,
                                        1 + _k1,
                                        2 + _k1) ==
                                   42))),
               Not(Or(Not(d1array2(a, _k1, 1 + _k1) == 42),
                      d1array2(a, 1 + _k1, 2 + _k1) == 42))),
            Not(d1array2(a, 1 + _k1, 2 + _k1) == 42)), unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:11
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(a, _k1, _k1 + 1)==42),(d1array2(a, _k1 + 1, _k1 + 2)==42))

System try to prove 
Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _n1 + 1) == 42)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(Not(Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a, _n1, _n1 + 1) == 42)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a, _n1, 1 + _n1) ==
                               42))),
                 Or(Not(_n1!2 >= 0),
                    d1array2(a, _n1!2, 1 + _n1!2) == 42))),
   rewrite(Or(Not(ForAll(_n1,
                         Or(Not(_n1 >= 0),
                            d1array2(a, _n1, 1 + _n1) == 42))),
              Or(Not(_n1!2 >= 0),
                 d1array2(a, _n1!2, 1 + _n1!2) == 42)) ==
           Or(Not(ForAll(_n1,
                         Or(Not(_n1 >= 0),
                            d1array2(a, _n1, 1 + _n1) == 42))),
              Not(_n1!2 >= 0),
              d1array2(a, _n1!2, 1 + _n1!2) == 42)),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
      Not(_n1!2 >= 0),
      d1array2(a, _n1!2, 1 + _n1!2) == 42)), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a, _n1, _n1 + 1) ==
                                  42))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       42)),
                            Implies(Var(0) >= 0,
                                    d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    42) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               42)),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                      42))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a, _n1, 1 + _n1) ==
                                 42)))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a, _n1, 1 + _n1) == 42))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42),
                      Or(Not(Var(0) >= 0),
                         d1array2(a, Var(0), 1 + Var(0)) ==
                         42))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a, _n1, 1 + _n1) == 42)))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a, _n1, 1 + _n1) == 42))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a, Var(0), 1 + Var(0)) == 42)),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a, _n1, 1 + _n1) == 42)))),
   ForAll(_n1,
          Or(Not(_n1 >= 0), d1array2(a, _n1, 1 + _n1) == 42))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42)),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                        42)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(_L1 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L1 > 0),
                                        Var(0) < _L1 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L1 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L1 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0),
                                        Not(_L1 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        Var(0) < _L1 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0),
                                        Not(_L1 <=
                                        -1 + Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42)),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        42) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        42)),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a,
                                        _n1,
                                        _n1 + 1) ==
                                        42))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array2(a,
                                        _n1,
                                        1 + _n1) ==
                                        42)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L1 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L1 <= ... + ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(_L1 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        Var(0) < _L1 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        Not(_L1 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        Not(_L1 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0),
                                        Not(_L1 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42))

***********************
2017-05-14 03:05:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array4(a, 0, 1) == 43']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array4(a, 0, 1) == 43

System try to prove 
d1array4(a, 0, 1) == 43

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _n2 + 1) == 43)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(d1array4(a, 0, 1) == 43))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n2,
                            Or(Not(_n2 >= 0),
                               d1array4(a, _n2, 1 + _n2) ==
                               43))),
                 Or(Not(0 >= 0),
                    d1array4(a, 0, 1 + 0) == 43))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array4(a,
                                        0,
                                        1 + 0) ==
                                        d1array4(a, 0, 1)),
                                        (d1array4(a,
                                        0,
                                        1 + 0) ==
                                        43) ==
                                        (d1array4(a, 0, 1) ==
                                        43)),
                                        Or(Not(0 >= 0),
                                        d1array4(a,
                                        0,
                                        1 + 0) ==
                                        43) ==
                                        Or(False,
                                        d1array4(a, 0, 1) ==
                                        43)),
                            rewrite(Or(False,
                                       d1array4(a, 0, 1) ==
                                       43) ==
                                    (d1array4(a, 0, 1) == 43)),
                            Or(Not(0 >= 0),
                               d1array4(a, 0, 1 + 0) == 43) ==
                            (d1array4(a, 0, 1) == 43)),
                      Or(Not(ForAll(_n2,
                                    Or(Not(_n2 >= 0),
                                       d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                       43))),
                         Or(Not(0 >= 0),
                            d1array4(a, 0, 1 + 0) == 43)) ==
                      Or(Not(ForAll(_n2,
                                    Or(Not(_n2 >= 0),
                                       d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                       43))),
                         d1array4(a, 0, 1) == 43)),
         rewrite(Or(Not(ForAll(_n2,
                               Or(Not(_n2 >= 0),
                                  d1array4(a, _n2, 1 + _n2) ==
                                  43))),
                    d1array4(a, 0, 1) == 43) ==
                 Or(Not(ForAll(_n2,
                               Or(Not(_n2 >= 0),
                                  d1array4(a, _n2, 1 + _n2) ==
                                  43))),
                    d1array4(a, 0, 1) == 43)),
         Or(Not(ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))),
            Or(Not(0 >= 0), d1array4(a, 0, 1 + 0) == 43)) ==
         Or(Not(ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))),
            d1array4(a, 0, 1) == 43)),
   Or(Not(ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
      d1array4(a, 0, 1) == 43)), mp(mp~(mp(asserted(ForAll(_n2,
                          Implies(_n2 >= 0,
                                  d1array4(a, _n2, _n2 + 1) ==
                                  43))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       43)),
                            Implies(Var(0) >= 0,
                                    d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    43) ==
                            Or(Not(Var(0) >= 0),
                               d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               43)),
                      (ForAll(_n2,
                              Implies(_n2 >= 0,
                                      d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                      43))) ==
                      (ForAll(_n2,
                              Or(Not(_n2 >= 0),
                                 d1array4(a, _n2, 1 + _n2) ==
                                 43)))),
          ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43),
                      Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43))),
               ~(ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)),
                 ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)))),
       ForAll(_n2,
              Or(Not(_n2 >= 0),
                 d1array4(a, _n2, 1 + _n2) == 43))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43) ==
                    Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43)),
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))) ==
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43)))),
   ForAll(_n2,
          Or(Not(_n2 >= 0), d1array4(a, _n2, 1 + _n2) == 43))), asserted(Not(d1array4(a, 0, 1) == 43)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:14
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array4(a, _k2, _k2 + 1)==43),(d1array4(a, _k2 + 1, _k2 + 2)==43))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(a, _k2, _k2 + 1)==43),(d1array4(a, _k2 + 1, _k2 + 2)==43))

System try to prove 
Implies((d1array4(a, _k2, _k2 + 1)==43),(d1array4(a, _k2 + 1, _k2 + 2)==43))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _n2 + 1) == 43)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(Implies((d1array4(a, _k2, _k2 + 1)==43),(d1array4(a, _k2 + 1, _k2 + 2)==43))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n2,
                            Or(Not(_n2 >= 0),
                               d1array4(a, _n2, 1 + _n2) ==
                               43))),
                 Or(Not(1 + _k2 >= 0),
                    d1array4(a, 1 + _k2, 1 + 1 + _k2) == 43))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array4(a,
                                        1 + _k2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        1 + _k2,
                                        2 + _k2)),
                                        (d1array4(a,
                                        1 + _k2,
                                        1 + 1 + _k2) ==
                                        43) ==
                                        (d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                        43)),
                                   Or(Not(1 + _k2 >= 0),
                                      d1array4(a,
                                        1 + _k2,
                                        1 + 1 + _k2) ==
                                      43) ==
                                   Or(Not(_k2 >= -1),
                                      d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                      43)),
                      Or(Not(ForAll(_n2,
                                    Or(Not(_n2 >= 0),
                                       d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                       43))),
                         Or(Not(1 + _k2 >= 0),
                            d1array4(a,
                                     1 + _k2,
                                     1 + 1 + _k2) ==
                            43)) ==
                      Or(Not(ForAll(_n2,
                                    Or(Not(_n2 >= 0),
                                       d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                       43))),
                         Or(Not(_k2 >= -1),
                            d1array4(a, 1 + _k2, 2 + _k2) ==
                            43))),
         rewrite(Or(Not(ForAll(_n2,
                               Or(Not(_n2 >= 0),
                                  d1array4(a, _n2, 1 + _n2) ==
                                  43))),
                    Or(Not(_k2 >= -1),
                       d1array4(a, 1 + _k2, 2 + _k2) == 43)) ==
                 Or(Not(ForAll(_n2,
                               Or(Not(_n2 >= 0),
                                  d1array4(a, _n2, 1 + _n2) ==
                                  43))),
                    Not(_k2 >= -1),
                    d1array4(a, 1 + _k2, 2 + _k2) == 43)),
         Or(Not(ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))),
            Or(Not(1 + _k2 >= 0),
               d1array4(a, 1 + _k2, 1 + 1 + _k2) == 43)) ==
         Or(Not(ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))),
            Not(_k2 >= -1),
            d1array4(a, 1 + _k2, 2 + _k2) == 43)),
   Or(Not(ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
      Not(_k2 >= -1),
      d1array4(a, 1 + _k2, 2 + _k2) == 43)), mp(mp~(mp(asserted(ForAll(_n2,
                          Implies(_n2 >= 0,
                                  d1array4(a, _n2, _n2 + 1) ==
                                  43))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       43)),
                            Implies(Var(0) >= 0,
                                    d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    43) ==
                            Or(Not(Var(0) >= 0),
                               d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               43)),
                      (ForAll(_n2,
                              Implies(_n2 >= 0,
                                      d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                      43))) ==
                      (ForAll(_n2,
                              Or(Not(_n2 >= 0),
                                 d1array4(a, _n2, 1 + _n2) ==
                                 43)))),
          ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43),
                      Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43))),
               ~(ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)),
                 ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)))),
       ForAll(_n2,
              Or(Not(_n2 >= 0),
                 d1array4(a, _n2, 1 + _n2) == 43))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43) ==
                    Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43)),
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))) ==
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43)))),
   ForAll(_n2,
          Or(Not(_n2 >= 0), d1array4(a, _n2, 1 + _n2) == 43))), not-or-elim(mp(asserted(Not(Implies(d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                    43,
                                    d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                    43))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                        d1array4(a,
                                        _k2,
                                        1 + _k2)),
                                        (d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                        43)),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        rewrite(_k2 + 2 ==
                                        2 + _k2),
                                        d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                        d1array4(a,
                                        1 + _k2,
                                        2 + _k2)),
                                        (d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                        43) ==
                                        (d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                        43)),
                                        Implies(d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                        43,
                                        d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                        43) ==
                                        Implies(d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                        43,
                                        d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                        43)),
                                  rewrite(Implies(d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                        43,
                                        d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                        43) ==
                                        Or(Not(d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                        43),
                                        d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                        43)),
                                  Implies(d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                        43,
                                        d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                        43) ==
                                  Or(Not(d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                        43),
                                     d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                     43)),
                            Not(Implies(d1array4(a,
                                        _k2,
                                        _k2 + 1) ==
                                        43,
                                        d1array4(a,
                                        _k2 + 1,
                                        _k2 + 2) ==
                                        43)) ==
                            Not(Or(Not(d1array4(a,
                                        _k2,
                                        1 + _k2) ==
                                       43),
                                   d1array4(a,
                                        1 + _k2,
                                        2 + _k2) ==
                                   43))),
               Not(Or(Not(d1array4(a, _k2, 1 + _k2) == 43),
                      d1array4(a, 1 + _k2, 2 + _k2) == 43))),
            Not(d1array4(a, 1 + _k2, 2 + _k2) == 43)), unit-resolution(th-lemma(Or(_k2 >= -1, Not(_k2 >= 0))),
                asserted(_k2 >= 0),
                _k2 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:14
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(a, _k2, _k2 + 1)==43),(d1array4(a, _k2 + 1, _k2 + 2)==43))

System try to prove 
Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _n2 + 1) == 43)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array4(a, _n2, _n2 + 1) == 43)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n2,
                            Or(Not(_n2 >= 0),
                               d1array4(a, _n2, 1 + _n2) ==
                               43))),
                 Or(Not(_n2!2 >= 0),
                    d1array4(a, _n2!2, 1 + _n2!2) == 43))),
   rewrite(Or(Not(ForAll(_n2,
                         Or(Not(_n2 >= 0),
                            d1array4(a, _n2, 1 + _n2) == 43))),
              Or(Not(_n2!2 >= 0),
                 d1array4(a, _n2!2, 1 + _n2!2) == 43)) ==
           Or(Not(ForAll(_n2,
                         Or(Not(_n2 >= 0),
                            d1array4(a, _n2, 1 + _n2) == 43))),
              Not(_n2!2 >= 0),
              d1array4(a, _n2!2, 1 + _n2!2) == 43)),
   Or(Not(ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
      Not(_n2!2 >= 0),
      d1array4(a, _n2!2, 1 + _n2!2) == 43)), mp(mp~(mp(asserted(ForAll(_n2,
                          Implies(_n2 >= 0,
                                  d1array4(a, _n2, _n2 + 1) ==
                                  43))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       43)),
                            Implies(Var(0) >= 0,
                                    d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    43) ==
                            Or(Not(Var(0) >= 0),
                               d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               43)),
                      (ForAll(_n2,
                              Implies(_n2 >= 0,
                                      d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                      43))) ==
                      (ForAll(_n2,
                              Or(Not(_n2 >= 0),
                                 d1array4(a, _n2, 1 + _n2) ==
                                 43)))),
          ForAll(_n2,
                 Or(Not(_n2 >= 0),
                    d1array4(a, _n2, 1 + _n2) == 43))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43),
                      Or(Not(Var(0) >= 0),
                         d1array4(a, Var(0), 1 + Var(0)) ==
                         43))),
               ~(ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)),
                 ForAll(_n2,
                        Or(Not(_n2 >= 0),
                           d1array4(a, _n2, 1 + _n2) == 43)))),
       ForAll(_n2,
              Or(Not(_n2 >= 0),
                 d1array4(a, _n2, 1 + _n2) == 43))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43) ==
                    Or(Not(Var(0) >= 0),
                       d1array4(a, Var(0), 1 + Var(0)) == 43)),
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43))) ==
               (ForAll(_n2,
                       Or(Not(_n2 >= 0),
                          d1array4(a, _n2, 1 + _n2) == 43)))),
   ForAll(_n2,
          Or(Not(_n2 >= 0), d1array4(a, _n2, 1 + _n2) == 43))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43)),
                                        ForAll(_n2,
                                        Implies(And(And(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        _n2 < _L2 + 1),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L2) ==
                                        Not(_L2 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L2) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        (ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43))) ==
                                        (ForAll(_n2,
                                        Or(Not(And(_n2 >= 0,
                                        Not(_L2 <= _n2),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                        43)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L2 + 1) ==
                                        Not(_L2 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L2 > 0),
                                        Var(0) < _L2 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L2 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L2 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0),
                                        Not(_L2 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Var(0) < _L2 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43)),
                                        ForAll(_n2,
                                        Implies(And(And(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        _n2 < _L2 + 1),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L2) ==
                                        Not(_L2 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L2) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        43) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        43)),
                                        (ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        d1array4(a,
                                        _n2,
                                        _n2 + 1) ==
                                        43))) ==
                                        (ForAll(_n2,
                                        Or(Not(And(_n2 >= 0,
                                        Not(_L2 <= _n2),
                                        Not(_L2 <= 0))),
                                        d1array4(a,
                                        _n2,
                                        1 + _n2) ==
                                        43)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L2 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L2 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L2 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L2 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L2 <= ... + ...)),
                                        (Var(0) < _L2 + 1) ==
                                        Not(_L2 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Var(0) < _L2 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        Not(_L2 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43))

***********************
2017-05-14 03:05:16
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array6(a, 0, 1) == 44']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array6(a, 0, 1) == 44

System try to prove 
d1array6(a, 0, 1) == 44

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _n3 + 1) == 44)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(a, _x2, 0) == d1array4(a, _x2, _N2))))
_s.add(_N3 >= 100000)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 100000)))
_s.add(Or(_N3==0,_N3 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(d1array6(a, 0, 1) == 44))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n3,
                            Or(Not(_n3 >= 0),
                               d1array6(a, _n3, 1 + _n3) ==
                               44))),
                 Or(Not(0 >= 0),
                    d1array6(a, 0, 1 + 0) == 44))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array6(a,
                                        0,
                                        1 + 0) ==
                                        d1array6(a, 0, 1)),
                                        (d1array6(a,
                                        0,
                                        1 + 0) ==
                                        44) ==
                                        (d1array6(a, 0, 1) ==
                                        44)),
                                        Or(Not(0 >= 0),
                                        d1array6(a,
                                        0,
                                        1 + 0) ==
                                        44) ==
                                        Or(False,
                                        d1array6(a, 0, 1) ==
                                        44)),
                            rewrite(Or(False,
                                       d1array6(a, 0, 1) ==
                                       44) ==
                                    (d1array6(a, 0, 1) == 44)),
                            Or(Not(0 >= 0),
                               d1array6(a, 0, 1 + 0) == 44) ==
                            (d1array6(a, 0, 1) == 44)),
                      Or(Not(ForAll(_n3,
                                    Or(Not(_n3 >= 0),
                                       d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                       44))),
                         Or(Not(0 >= 0),
                            d1array6(a, 0, 1 + 0) == 44)) ==
                      Or(Not(ForAll(_n3,
                                    Or(Not(_n3 >= 0),
                                       d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                       44))),
                         d1array6(a, 0, 1) == 44)),
         rewrite(Or(Not(ForAll(_n3,
                               Or(Not(_n3 >= 0),
                                  d1array6(a, _n3, 1 + _n3) ==
                                  44))),
                    d1array6(a, 0, 1) == 44) ==
                 Or(Not(ForAll(_n3,
                               Or(Not(_n3 >= 0),
                                  d1array6(a, _n3, 1 + _n3) ==
                                  44))),
                    d1array6(a, 0, 1) == 44)),
         Or(Not(ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))),
            Or(Not(0 >= 0), d1array6(a, 0, 1 + 0) == 44)) ==
         Or(Not(ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))),
            d1array6(a, 0, 1) == 44)),
   Or(Not(ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
      d1array6(a, 0, 1) == 44)), mp(mp~(mp(asserted(ForAll(_n3,
                          Implies(_n3 >= 0,
                                  d1array6(a, _n3, _n3 + 1) ==
                                  44))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       44)),
                            Implies(Var(0) >= 0,
                                    d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    44) ==
                            Or(Not(Var(0) >= 0),
                               d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               44)),
                      (ForAll(_n3,
                              Implies(_n3 >= 0,
                                      d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                      44))) ==
                      (ForAll(_n3,
                              Or(Not(_n3 >= 0),
                                 d1array6(a, _n3, 1 + _n3) ==
                                 44)))),
          ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44),
                      Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44))),
               ~(ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)),
                 ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)))),
       ForAll(_n3,
              Or(Not(_n3 >= 0),
                 d1array6(a, _n3, 1 + _n3) == 44))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44) ==
                    Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44)),
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))) ==
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44)))),
   ForAll(_n3,
          Or(Not(_n3 >= 0), d1array6(a, _n3, 1 + _n3) == 44))), asserted(Not(d1array6(a, 0, 1) == 44)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:17
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array6(a, _k3, _k3 + 1)==44),(d1array6(a, _k3 + 1, _k3 + 2)==44))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array6(a, _k3, _k3 + 1)==44),(d1array6(a, _k3 + 1, _k3 + 2)==44))

System try to prove 
Implies((d1array6(a, _k3, _k3 + 1)==44),(d1array6(a, _k3 + 1, _k3 + 2)==44))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _n3 + 1) == 44)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(a, _x2, 0) == d1array4(a, _x2, _N2))))
_s.add(_N3 >= 100000)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 100000)))
_s.add(Or(_N3==0,_N3 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(Implies((d1array6(a, _k3, _k3 + 1)==44),(d1array6(a, _k3 + 1, _k3 + 2)==44))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n3,
                            Or(Not(_n3 >= 0),
                               d1array6(a, _n3, 1 + _n3) ==
                               44))),
                 Or(Not(1 + _k3 >= 0),
                    d1array6(a, 1 + _k3, 1 + 1 + _k3) == 44))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d1array6(a,
                                        1 + _k3,
                                        1 + 1 + _k3) ==
                                        d1array6(a,
                                        1 + _k3,
                                        2 + _k3)),
                                        (d1array6(a,
                                        1 + _k3,
                                        1 + 1 + _k3) ==
                                        44) ==
                                        (d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                        44)),
                                   Or(Not(1 + _k3 >= 0),
                                      d1array6(a,
                                        1 + _k3,
                                        1 + 1 + _k3) ==
                                      44) ==
                                   Or(Not(_k3 >= -1),
                                      d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                      44)),
                      Or(Not(ForAll(_n3,
                                    Or(Not(_n3 >= 0),
                                       d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                       44))),
                         Or(Not(1 + _k3 >= 0),
                            d1array6(a,
                                     1 + _k3,
                                     1 + 1 + _k3) ==
                            44)) ==
                      Or(Not(ForAll(_n3,
                                    Or(Not(_n3 >= 0),
                                       d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                       44))),
                         Or(Not(_k3 >= -1),
                            d1array6(a, 1 + _k3, 2 + _k3) ==
                            44))),
         rewrite(Or(Not(ForAll(_n3,
                               Or(Not(_n3 >= 0),
                                  d1array6(a, _n3, 1 + _n3) ==
                                  44))),
                    Or(Not(_k3 >= -1),
                       d1array6(a, 1 + _k3, 2 + _k3) == 44)) ==
                 Or(Not(ForAll(_n3,
                               Or(Not(_n3 >= 0),
                                  d1array6(a, _n3, 1 + _n3) ==
                                  44))),
                    Not(_k3 >= -1),
                    d1array6(a, 1 + _k3, 2 + _k3) == 44)),
         Or(Not(ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))),
            Or(Not(1 + _k3 >= 0),
               d1array6(a, 1 + _k3, 1 + 1 + _k3) == 44)) ==
         Or(Not(ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))),
            Not(_k3 >= -1),
            d1array6(a, 1 + _k3, 2 + _k3) == 44)),
   Or(Not(ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
      Not(_k3 >= -1),
      d1array6(a, 1 + _k3, 2 + _k3) == 44)), mp(mp~(mp(asserted(ForAll(_n3,
                          Implies(_n3 >= 0,
                                  d1array6(a, _n3, _n3 + 1) ==
                                  44))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       44)),
                            Implies(Var(0) >= 0,
                                    d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    44) ==
                            Or(Not(Var(0) >= 0),
                               d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               44)),
                      (ForAll(_n3,
                              Implies(_n3 >= 0,
                                      d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                      44))) ==
                      (ForAll(_n3,
                              Or(Not(_n3 >= 0),
                                 d1array6(a, _n3, 1 + _n3) ==
                                 44)))),
          ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44),
                      Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44))),
               ~(ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)),
                 ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)))),
       ForAll(_n3,
              Or(Not(_n3 >= 0),
                 d1array6(a, _n3, 1 + _n3) == 44))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44) ==
                    Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44)),
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))) ==
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44)))),
   ForAll(_n3,
          Or(Not(_n3 >= 0), d1array6(a, _n3, 1 + _n3) == 44))), not-or-elim(mp(asserted(Not(Implies(d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                    44,
                                    d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                    44))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                        d1array6(a,
                                        _k3,
                                        1 + _k3)),
                                        (d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                        44)),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        rewrite(_k3 + 2 ==
                                        2 + _k3),
                                        d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                        d1array6(a,
                                        1 + _k3,
                                        2 + _k3)),
                                        (d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                        44) ==
                                        (d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                        44)),
                                        Implies(d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                        44,
                                        d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                        44) ==
                                        Implies(d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                        44,
                                        d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                        44)),
                                  rewrite(Implies(d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                        44,
                                        d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                        44) ==
                                        Or(Not(d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                        44),
                                        d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                        44)),
                                  Implies(d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                        44,
                                        d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                        44) ==
                                  Or(Not(d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                        44),
                                     d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                     44)),
                            Not(Implies(d1array6(a,
                                        _k3,
                                        _k3 + 1) ==
                                        44,
                                        d1array6(a,
                                        _k3 + 1,
                                        _k3 + 2) ==
                                        44)) ==
                            Not(Or(Not(d1array6(a,
                                        _k3,
                                        1 + _k3) ==
                                       44),
                                   d1array6(a,
                                        1 + _k3,
                                        2 + _k3) ==
                                   44))),
               Not(Or(Not(d1array6(a, _k3, 1 + _k3) == 44),
                      d1array6(a, 1 + _k3, 2 + _k3) == 44))),
            Not(d1array6(a, 1 + _k3, 2 + _k3) == 44)), unit-resolution(th-lemma(Or(_k3 >= -1, Not(_k3 >= 0))),
                asserted(_k3 >= 0),
                _k3 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:17
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array6(a, _k3, _k3 + 1)==44),(d1array6(a, _k3 + 1, _k3 + 2)==44))

System try to prove 
Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _n3 + 1) == 44)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(a, _x2, 0) == d1array4(a, _x2, _N2))))
_s.add(_N3 >= 100000)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 100000)))
_s.add(Or(_N3==0,_N3 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d1array6(a, _n3, _n3 + 1) == 44)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n3,
                            Or(Not(_n3 >= 0),
                               d1array6(a, _n3, 1 + _n3) ==
                               44))),
                 Or(Not(_n3!2 >= 0),
                    d1array6(a, _n3!2, 1 + _n3!2) == 44))),
   rewrite(Or(Not(ForAll(_n3,
                         Or(Not(_n3 >= 0),
                            d1array6(a, _n3, 1 + _n3) == 44))),
              Or(Not(_n3!2 >= 0),
                 d1array6(a, _n3!2, 1 + _n3!2) == 44)) ==
           Or(Not(ForAll(_n3,
                         Or(Not(_n3 >= 0),
                            d1array6(a, _n3, 1 + _n3) == 44))),
              Not(_n3!2 >= 0),
              d1array6(a, _n3!2, 1 + _n3!2) == 44)),
   Or(Not(ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
      Not(_n3!2 >= 0),
      d1array6(a, _n3!2, 1 + _n3!2) == 44)), mp(mp~(mp(asserted(ForAll(_n3,
                          Implies(_n3 >= 0,
                                  d1array6(a, _n3, _n3 + 1) ==
                                  44))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       44)),
                            Implies(Var(0) >= 0,
                                    d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    44) ==
                            Or(Not(Var(0) >= 0),
                               d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               44)),
                      (ForAll(_n3,
                              Implies(_n3 >= 0,
                                      d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                      44))) ==
                      (ForAll(_n3,
                              Or(Not(_n3 >= 0),
                                 d1array6(a, _n3, 1 + _n3) ==
                                 44)))),
          ForAll(_n3,
                 Or(Not(_n3 >= 0),
                    d1array6(a, _n3, 1 + _n3) == 44))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44),
                      Or(Not(Var(0) >= 0),
                         d1array6(a, Var(0), 1 + Var(0)) ==
                         44))),
               ~(ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)),
                 ForAll(_n3,
                        Or(Not(_n3 >= 0),
                           d1array6(a, _n3, 1 + _n3) == 44)))),
       ForAll(_n3,
              Or(Not(_n3 >= 0),
                 d1array6(a, _n3, 1 + _n3) == 44))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44) ==
                    Or(Not(Var(0) >= 0),
                       d1array6(a, Var(0), 1 + Var(0)) == 44)),
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44))) ==
               (ForAll(_n3,
                       Or(Not(_n3 >= 0),
                          d1array6(a, _n3, 1 + _n3) == 44)))),
   ForAll(_n3,
          Or(Not(_n3 >= 0), d1array6(a, _n3, 1 + _n3) == 44))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44)),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                        44)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44)),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        (d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        44) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        44)),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d1array6(a,
                                        _n3,
                                        _n3 + 1) ==
                                        44))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d1array6(a,
                                        _n3,
                                        1 + _n3) ==
                                        44)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L3 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L3 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L3 <= ... + ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        Not(_L3 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44))

***********************
2017-05-14 03:05:19
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array8(a, 0, 1) == 45']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array8(a, 0, 1) == 45

System try to prove 
d1array8(a, 0, 1) == 45

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _n4 + 1) == 45)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(a, _x2, 0) == d1array6(a, _x2, _N3))))
_s.add(_N4 >= 100000)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < 100000)))
_s.add(Or(_N4==0,_N4 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(d1array8(a, 0, 1) == 45))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n4,
                            Or(Not(_n4 >= 0),
                               d1array8(a, _n4, 1 + _n4) ==
                               45))),
                 Or(Not(0 >= 0),
                    d1array8(a, 0, 1 + 0) == 45))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array8(a,
                                        0,
                                        1 + 0) ==
                                        d1array8(a, 0, 1)),
                                        (d1array8(a,
                                        0,
                                        1 + 0) ==
                                        45) ==
                                        (d1array8(a, 0, 1) ==
                                        45)),
                                        Or(Not(0 >= 0),
                                        d1array8(a,
                                        0,
                                        1 + 0) ==
                                        45) ==
                                        Or(False,
                                        d1array8(a, 0, 1) ==
                                        45)),
                            rewrite(Or(False,
                                       d1array8(a, 0, 1) ==
                                       45) ==
                                    (d1array8(a, 0, 1) == 45)),
                            Or(Not(0 >= 0),
                               d1array8(a, 0, 1 + 0) == 45) ==
                            (d1array8(a, 0, 1) == 45)),
                      Or(Not(ForAll(_n4,
                                    Or(Not(_n4 >= 0),
                                       d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                       45))),
                         Or(Not(0 >= 0),
                            d1array8(a, 0, 1 + 0) == 45)) ==
                      Or(Not(ForAll(_n4,
                                    Or(Not(_n4 >= 0),
                                       d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                       45))),
                         d1array8(a, 0, 1) == 45)),
         rewrite(Or(Not(ForAll(_n4,
                               Or(Not(_n4 >= 0),
                                  d1array8(a, _n4, 1 + _n4) ==
                                  45))),
                    d1array8(a, 0, 1) == 45) ==
                 Or(Not(ForAll(_n4,
                               Or(Not(_n4 >= 0),
                                  d1array8(a, _n4, 1 + _n4) ==
                                  45))),
                    d1array8(a, 0, 1) == 45)),
         Or(Not(ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))),
            Or(Not(0 >= 0), d1array8(a, 0, 1 + 0) == 45)) ==
         Or(Not(ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))),
            d1array8(a, 0, 1) == 45)),
   Or(Not(ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
      d1array8(a, 0, 1) == 45)), mp(mp~(mp(asserted(ForAll(_n4,
                          Implies(_n4 >= 0,
                                  d1array8(a, _n4, _n4 + 1) ==
                                  45))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       45)),
                            Implies(Var(0) >= 0,
                                    d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    45) ==
                            Or(Not(Var(0) >= 0),
                               d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               45)),
                      (ForAll(_n4,
                              Implies(_n4 >= 0,
                                      d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                      45))) ==
                      (ForAll(_n4,
                              Or(Not(_n4 >= 0),
                                 d1array8(a, _n4, 1 + _n4) ==
                                 45)))),
          ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45),
                      Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45))),
               ~(ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)),
                 ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)))),
       ForAll(_n4,
              Or(Not(_n4 >= 0),
                 d1array8(a, _n4, 1 + _n4) == 45))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45) ==
                    Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45)),
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))) ==
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45)))),
   ForAll(_n4,
          Or(Not(_n4 >= 0), d1array8(a, _n4, 1 + _n4) == 45))), asserted(Not(d1array8(a, 0, 1) == 45)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array8(a, _k4, _k4 + 1)==45),(d1array8(a, _k4 + 1, _k4 + 2)==45))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array8(a, _k4, _k4 + 1)==45),(d1array8(a, _k4 + 1, _k4 + 2)==45))

System try to prove 
Implies((d1array8(a, _k4, _k4 + 1)==45),(d1array8(a, _k4 + 1, _k4 + 2)==45))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _n4 + 1) == 45)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(a, _x2, 0) == d1array6(a, _x2, _N3))))
_s.add(_N4 >= 100000)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < 100000)))
_s.add(Or(_N4==0,_N4 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies((d1array8(a, _k4, _k4 + 1)==45),(d1array8(a, _k4 + 1, _k4 + 2)==45))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n4,
                            Or(Not(_n4 >= 0),
                               d1array8(a, _n4, 1 + _n4) ==
                               45))),
                 Or(Not(1 + _k4 >= 0),
                    d1array8(a, 1 + _k4, 1 + 1 + _k4) == 45))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k4 >=
                                        0) ==
                                        (_k4 >= -1)),
                                        Not(1 + _k4 >= 0) ==
                                        Not(_k4 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k4 ==
                                        2 + _k4),
                                        d1array8(a,
                                        1 + _k4,
                                        1 + 1 + _k4) ==
                                        d1array8(a,
                                        1 + _k4,
                                        2 + _k4)),
                                        (d1array8(a,
                                        1 + _k4,
                                        1 + 1 + _k4) ==
                                        45) ==
                                        (d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                        45)),
                                   Or(Not(1 + _k4 >= 0),
                                      d1array8(a,
                                        1 + _k4,
                                        1 + 1 + _k4) ==
                                      45) ==
                                   Or(Not(_k4 >= -1),
                                      d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                      45)),
                      Or(Not(ForAll(_n4,
                                    Or(Not(_n4 >= 0),
                                       d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                       45))),
                         Or(Not(1 + _k4 >= 0),
                            d1array8(a,
                                     1 + _k4,
                                     1 + 1 + _k4) ==
                            45)) ==
                      Or(Not(ForAll(_n4,
                                    Or(Not(_n4 >= 0),
                                       d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                       45))),
                         Or(Not(_k4 >= -1),
                            d1array8(a, 1 + _k4, 2 + _k4) ==
                            45))),
         rewrite(Or(Not(ForAll(_n4,
                               Or(Not(_n4 >= 0),
                                  d1array8(a, _n4, 1 + _n4) ==
                                  45))),
                    Or(Not(_k4 >= -1),
                       d1array8(a, 1 + _k4, 2 + _k4) == 45)) ==
                 Or(Not(ForAll(_n4,
                               Or(Not(_n4 >= 0),
                                  d1array8(a, _n4, 1 + _n4) ==
                                  45))),
                    Not(_k4 >= -1),
                    d1array8(a, 1 + _k4, 2 + _k4) == 45)),
         Or(Not(ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))),
            Or(Not(1 + _k4 >= 0),
               d1array8(a, 1 + _k4, 1 + 1 + _k4) == 45)) ==
         Or(Not(ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))),
            Not(_k4 >= -1),
            d1array8(a, 1 + _k4, 2 + _k4) == 45)),
   Or(Not(ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
      Not(_k4 >= -1),
      d1array8(a, 1 + _k4, 2 + _k4) == 45)), mp(mp~(mp(asserted(ForAll(_n4,
                          Implies(_n4 >= 0,
                                  d1array8(a, _n4, _n4 + 1) ==
                                  45))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       45)),
                            Implies(Var(0) >= 0,
                                    d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    45) ==
                            Or(Not(Var(0) >= 0),
                               d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               45)),
                      (ForAll(_n4,
                              Implies(_n4 >= 0,
                                      d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                      45))) ==
                      (ForAll(_n4,
                              Or(Not(_n4 >= 0),
                                 d1array8(a, _n4, 1 + _n4) ==
                                 45)))),
          ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45),
                      Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45))),
               ~(ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)),
                 ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)))),
       ForAll(_n4,
              Or(Not(_n4 >= 0),
                 d1array8(a, _n4, 1 + _n4) == 45))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45) ==
                    Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45)),
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))) ==
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45)))),
   ForAll(_n4,
          Or(Not(_n4 >= 0), d1array8(a, _n4, 1 + _n4) == 45))), not-or-elim(mp(asserted(Not(Implies(d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                    45,
                                    d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                    45))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                        d1array8(a,
                                        _k4,
                                        1 + _k4)),
                                        (d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                        45)),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        rewrite(_k4 + 2 ==
                                        2 + _k4),
                                        d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                        d1array8(a,
                                        1 + _k4,
                                        2 + _k4)),
                                        (d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                        45) ==
                                        (d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                        45)),
                                        Implies(d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                        45,
                                        d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                        45) ==
                                        Implies(d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                        45,
                                        d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                        45)),
                                  rewrite(Implies(d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                        45,
                                        d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                        45) ==
                                        Or(Not(d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                        45),
                                        d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                        45)),
                                  Implies(d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                        45,
                                        d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                        45) ==
                                  Or(Not(d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                        45),
                                     d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                     45)),
                            Not(Implies(d1array8(a,
                                        _k4,
                                        _k4 + 1) ==
                                        45,
                                        d1array8(a,
                                        _k4 + 1,
                                        _k4 + 2) ==
                                        45)) ==
                            Not(Or(Not(d1array8(a,
                                        _k4,
                                        1 + _k4) ==
                                       45),
                                   d1array8(a,
                                        1 + _k4,
                                        2 + _k4) ==
                                   45))),
               Not(Or(Not(d1array8(a, _k4, 1 + _k4) == 45),
                      d1array8(a, 1 + _k4, 2 + _k4) == 45))),
            Not(d1array8(a, 1 + _k4, 2 + _k4) == 45)), unit-resolution(th-lemma(Or(_k4 >= -1, Not(_k4 >= 0))),
                asserted(_k4 >= 0),
                _k4 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:21
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n4],Implies(And(And(_n4>=0,_n4<_L4),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)),ForAll([_n4],Implies(And(And(And(And(_n4>=0,_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array8(a, _k4, _k4 + 1)==45),(d1array8(a, _k4 + 1, _k4 + 2)==45))

System try to prove 
Implies(ForAll([_n4],Implies(And(And(_n4>=0,_n4<_L4),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)),ForAll([_n4],Implies(And(And(And(And(_n4>=0,_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _n4 + 1) == 45)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(a, _x2, 0) == d1array6(a, _x2, _N3))))
_s.add(_N4 >= 100000)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < 100000)))
_s.add(Or(_N4==0,_N4 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies(ForAll([_n4],Implies(And(And(_n4>=0,_n4<_L4),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)),ForAll([_n4],Implies(And(And(And(And(_n4>=0,_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d1array8(a, _n4, _n4 + 1) == 45)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n4,
                            Or(Not(_n4 >= 0),
                               d1array8(a, _n4, 1 + _n4) ==
                               45))),
                 Or(Not(_n4!2 >= 0),
                    d1array8(a, _n4!2, 1 + _n4!2) == 45))),
   rewrite(Or(Not(ForAll(_n4,
                         Or(Not(_n4 >= 0),
                            d1array8(a, _n4, 1 + _n4) == 45))),
              Or(Not(_n4!2 >= 0),
                 d1array8(a, _n4!2, 1 + _n4!2) == 45)) ==
           Or(Not(ForAll(_n4,
                         Or(Not(_n4 >= 0),
                            d1array8(a, _n4, 1 + _n4) == 45))),
              Not(_n4!2 >= 0),
              d1array8(a, _n4!2, 1 + _n4!2) == 45)),
   Or(Not(ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
      Not(_n4!2 >= 0),
      d1array8(a, _n4!2, 1 + _n4!2) == 45)), mp(mp~(mp(asserted(ForAll(_n4,
                          Implies(_n4 >= 0,
                                  d1array8(a, _n4, _n4 + 1) ==
                                  45))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       45)),
                            Implies(Var(0) >= 0,
                                    d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    45) ==
                            Or(Not(Var(0) >= 0),
                               d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               45)),
                      (ForAll(_n4,
                              Implies(_n4 >= 0,
                                      d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                      45))) ==
                      (ForAll(_n4,
                              Or(Not(_n4 >= 0),
                                 d1array8(a, _n4, 1 + _n4) ==
                                 45)))),
          ForAll(_n4,
                 Or(Not(_n4 >= 0),
                    d1array8(a, _n4, 1 + _n4) == 45))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45),
                      Or(Not(Var(0) >= 0),
                         d1array8(a, Var(0), 1 + Var(0)) ==
                         45))),
               ~(ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)),
                 ForAll(_n4,
                        Or(Not(_n4 >= 0),
                           d1array8(a, _n4, 1 + _n4) == 45)))),
       ForAll(_n4,
              Or(Not(_n4 >= 0),
                 d1array8(a, _n4, 1 + _n4) == 45))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45) ==
                    Or(Not(Var(0) >= 0),
                       d1array8(a, Var(0), 1 + Var(0)) == 45)),
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45))) ==
               (ForAll(_n4,
                       Or(Not(_n4 >= 0),
                          d1array8(a, _n4, 1 + _n4) == 45)))),
   ForAll(_n4,
          Or(Not(_n4 >= 0), d1array8(a, _n4, 1 + _n4) == 45))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n4,
                                        Implies(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45)),
                                        ForAll(_n4,
                                        Implies(And(And(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        _n4 < _L4 + 1),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L4) ==
                                        Not(_L4 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L4) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)))),
                                        rewrite((_L4 > 0) ==
                                        Not(_L4 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L4),
                                        _L4 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L4 <= Var(0))),
                                        Not(_L4 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0))),
                                        Not(_L4 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L4),
                                        _L4 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        (ForAll(_n4,
                                        Implies(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45))) ==
                                        (ForAll(_n4,
                                        Or(Not(And(_n4 >= 0,
                                        Not(_L4 <= _n4),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                        45)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L4 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L4 + 1) ==
                                        Not(_L4 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L4 > 0),
                                        Var(0) < _L4 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L4 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L4 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0),
                                        Not(_L4 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        Var(0) < _L4 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0),
                                        Not(_L4 <=
                                        -1 + Var(0)))),
                                        rewrite((_L4 > 0) ==
                                        Not(_L4 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n4,
                                        Implies(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45)),
                                        ForAll(_n4,
                                        Implies(And(And(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        _n4 < _L4 + 1),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L4) ==
                                        Not(_L4 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L4) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)))),
                                        rewrite((_L4 > 0) ==
                                        Not(_L4 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L4),
                                        _L4 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L4 <= Var(0))),
                                        Not(_L4 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0))),
                                        Not(_L4 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L4),
                                        _L4 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        (d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        45) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        45)),
                                        (ForAll(_n4,
                                        Implies(And(And(_n4 >=
                                        0,
                                        _n4 < _L4),
                                        _L4 > 0),
                                        d1array8(a,
                                        _n4,
                                        _n4 + 1) ==
                                        45))) ==
                                        (ForAll(_n4,
                                        Or(Not(And(_n4 >= 0,
                                        Not(_L4 <= _n4),
                                        Not(_L4 <= 0))),
                                        d1array8(a,
                                        _n4,
                                        1 + _n4) ==
                                        45)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L4 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L4 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L4),
                                        _L4 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L4 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L4 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L4 <= ... + ...)),
                                        (Var(0) < _L4 + 1) ==
                                        Not(_L4 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L4),
                                        _L4 > 0),
                                        Var(0) < _L4 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        Not(_L4 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0)),
                                        Not(_L4 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L4 <= Var(0)),
                                        Not(_L4 <= 0),
                                        Not(_L4 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45))

***********************
2017-05-14 03:05:22
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array10(a, 0, 1) == 46']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array10(a, 0, 1) == 46

System try to prove 
d1array10(a, 0, 1) == 46

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _n5 + 1) == 46)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array10(a, _x2, 0) == d1array8(a, _x2, _N4))))
_s.add(_N5 >= 100000)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 100000)))
_s.add(Or(_N5==0,_N5 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(Not(d1array10(a, 0, 1) == 46))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n5,
                            Or(Not(_n5 >= 0),
                               d1array10(a, _n5, 1 + _n5) ==
                               46))),
                 Or(Not(0 >= 0),
                    d1array10(a, 0, 1 + 0) == 46))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array10(a,
                                        0,
                                        1 + 0) ==
                                        d1array10(a, 0, 1)),
                                        (d1array10(a,
                                        0,
                                        1 + 0) ==
                                        46) ==
                                        (d1array10(a, 0, 1) ==
                                        46)),
                                        Or(Not(0 >= 0),
                                        d1array10(a,
                                        0,
                                        1 + 0) ==
                                        46) ==
                                        Or(False,
                                        d1array10(a, 0, 1) ==
                                        46)),
                            rewrite(Or(False,
                                       d1array10(a, 0, 1) ==
                                       46) ==
                                    (d1array10(a, 0, 1) ==
                                     46)),
                            Or(Not(0 >= 0),
                               d1array10(a, 0, 1 + 0) == 46) ==
                            (d1array10(a, 0, 1) == 46)),
                      Or(Not(ForAll(_n5,
                                    Or(Not(_n5 >= 0),
                                       d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                       46))),
                         Or(Not(0 >= 0),
                            d1array10(a, 0, 1 + 0) == 46)) ==
                      Or(Not(ForAll(_n5,
                                    Or(Not(_n5 >= 0),
                                       d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                       46))),
                         d1array10(a, 0, 1) == 46)),
         rewrite(Or(Not(ForAll(_n5,
                               Or(Not(_n5 >= 0),
                                  d1array10(a, _n5, 1 + _n5) ==
                                  46))),
                    d1array10(a, 0, 1) == 46) ==
                 Or(Not(ForAll(_n5,
                               Or(Not(_n5 >= 0),
                                  d1array10(a, _n5, 1 + _n5) ==
                                  46))),
                    d1array10(a, 0, 1) == 46)),
         Or(Not(ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))),
            Or(Not(0 >= 0), d1array10(a, 0, 1 + 0) == 46)) ==
         Or(Not(ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))),
            d1array10(a, 0, 1) == 46)),
   Or(Not(ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
      d1array10(a, 0, 1) == 46)), mp(mp~(mp(asserted(ForAll(_n5,
                          Implies(_n5 >= 0,
                                  d1array10(a, _n5, _n5 + 1) ==
                                  46))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       46)),
                            Implies(Var(0) >= 0,
                                    d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    46) ==
                            Or(Not(Var(0) >= 0),
                               d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               46)),
                      (ForAll(_n5,
                              Implies(_n5 >= 0,
                                      d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                      46))) ==
                      (ForAll(_n5,
                              Or(Not(_n5 >= 0),
                                 d1array10(a, _n5, 1 + _n5) ==
                                 46)))),
          ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46),
                      Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46))),
               ~(ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)),
                 ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)))),
       ForAll(_n5,
              Or(Not(_n5 >= 0),
                 d1array10(a, _n5, 1 + _n5) == 46))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46) ==
                    Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46)),
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))) ==
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46)))),
   ForAll(_n5,
          Or(Not(_n5 >= 0),
             d1array10(a, _n5, 1 + _n5) == 46))), asserted(Not(d1array10(a, 0, 1) == 46)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array10(a, _k5, _k5 + 1)==46),(d1array10(a, _k5 + 1, _k5 + 2)==46))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array10(a, _k5, _k5 + 1)==46),(d1array10(a, _k5 + 1, _k5 + 2)==46))

System try to prove 
Implies((d1array10(a, _k5, _k5 + 1)==46),(d1array10(a, _k5 + 1, _k5 + 2)==46))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _n5 + 1) == 46)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array10(a, _x2, 0) == d1array8(a, _x2, _N4))))
_s.add(_N5 >= 100000)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 100000)))
_s.add(Or(_N5==0,_N5 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(Not(Implies((d1array10(a, _k5, _k5 + 1)==46),(d1array10(a, _k5 + 1, _k5 + 2)==46))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n5,
                            Or(Not(_n5 >= 0),
                               d1array10(a, _n5, 1 + _n5) ==
                               46))),
                 Or(Not(1 + _k5 >= 0),
                    d1array10(a, 1 + _k5, 1 + 1 + _k5) == 46))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d1array10(a,
                                        1 + _k5,
                                        1 + 1 + _k5) ==
                                        d1array10(a,
                                        1 + _k5,
                                        2 + _k5)),
                                        (d1array10(a,
                                        1 + _k5,
                                        1 + 1 + _k5) ==
                                        46) ==
                                        (d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                        46)),
                                   Or(Not(1 + _k5 >= 0),
                                      d1array10(a,
                                        1 + _k5,
                                        1 + 1 + _k5) ==
                                      46) ==
                                   Or(Not(_k5 >= -1),
                                      d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                      46)),
                      Or(Not(ForAll(_n5,
                                    Or(Not(_n5 >= 0),
                                       d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                       46))),
                         Or(Not(1 + _k5 >= 0),
                            d1array10(a,
                                      1 + _k5,
                                      1 + 1 + _k5) ==
                            46)) ==
                      Or(Not(ForAll(_n5,
                                    Or(Not(_n5 >= 0),
                                       d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                       46))),
                         Or(Not(_k5 >= -1),
                            d1array10(a, 1 + _k5, 2 + _k5) ==
                            46))),
         rewrite(Or(Not(ForAll(_n5,
                               Or(Not(_n5 >= 0),
                                  d1array10(a, _n5, 1 + _n5) ==
                                  46))),
                    Or(Not(_k5 >= -1),
                       d1array10(a, 1 + _k5, 2 + _k5) == 46)) ==
                 Or(Not(ForAll(_n5,
                               Or(Not(_n5 >= 0),
                                  d1array10(a, _n5, 1 + _n5) ==
                                  46))),
                    Not(_k5 >= -1),
                    d1array10(a, 1 + _k5, 2 + _k5) == 46)),
         Or(Not(ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))),
            Or(Not(1 + _k5 >= 0),
               d1array10(a, 1 + _k5, 1 + 1 + _k5) == 46)) ==
         Or(Not(ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))),
            Not(_k5 >= -1),
            d1array10(a, 1 + _k5, 2 + _k5) == 46)),
   Or(Not(ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
      Not(_k5 >= -1),
      d1array10(a, 1 + _k5, 2 + _k5) == 46)), mp(mp~(mp(asserted(ForAll(_n5,
                          Implies(_n5 >= 0,
                                  d1array10(a, _n5, _n5 + 1) ==
                                  46))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       46)),
                            Implies(Var(0) >= 0,
                                    d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    46) ==
                            Or(Not(Var(0) >= 0),
                               d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               46)),
                      (ForAll(_n5,
                              Implies(_n5 >= 0,
                                      d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                      46))) ==
                      (ForAll(_n5,
                              Or(Not(_n5 >= 0),
                                 d1array10(a, _n5, 1 + _n5) ==
                                 46)))),
          ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46),
                      Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46))),
               ~(ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)),
                 ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)))),
       ForAll(_n5,
              Or(Not(_n5 >= 0),
                 d1array10(a, _n5, 1 + _n5) == 46))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46) ==
                    Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46)),
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))) ==
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46)))),
   ForAll(_n5,
          Or(Not(_n5 >= 0),
             d1array10(a, _n5, 1 + _n5) == 46))), not-or-elim(mp(asserted(Not(Implies(d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                    46,
                                    d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                    46))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                        d1array10(a,
                                        _k5,
                                        1 + _k5)),
                                        (d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                        46)),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        rewrite(_k5 + 2 ==
                                        2 + _k5),
                                        d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                        d1array10(a,
                                        1 + _k5,
                                        2 + _k5)),
                                        (d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                        46) ==
                                        (d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                        46)),
                                        Implies(d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                        46,
                                        d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                        46) ==
                                        Implies(d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                        46,
                                        d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                        46)),
                                  rewrite(Implies(d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                        46,
                                        d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                        46) ==
                                        Or(Not(d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                        46),
                                        d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                        46)),
                                  Implies(d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                        46,
                                        d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                        46) ==
                                  Or(Not(d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                        46),
                                     d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                     46)),
                            Not(Implies(d1array10(a,
                                        _k5,
                                        _k5 + 1) ==
                                        46,
                                        d1array10(a,
                                        _k5 + 1,
                                        _k5 + 2) ==
                                        46)) ==
                            Not(Or(Not(d1array10(a,
                                        _k5,
                                        1 + _k5) ==
                                       46),
                                   d1array10(a,
                                        1 + _k5,
                                        2 + _k5) ==
                                   46))),
               Not(Or(Not(d1array10(a, _k5, 1 + _k5) == 46),
                      d1array10(a, 1 + _k5, 2 + _k5) == 46))),
            Not(d1array10(a, 1 + _k5, 2 + _k5) == 46)), unit-resolution(th-lemma(Or(_k5 >= -1, Not(_k5 >= 0))),
                asserted(_k5 >= 0),
                _k5 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n5],Implies(And(And(_n5>=0,_n5<_L5),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)),ForAll([_n5],Implies(And(And(And(And(_n5>=0,_n5<_L5),_L5>0),_n5<_L5+1),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array10(a, _k5, _k5 + 1)==46),(d1array10(a, _k5 + 1, _k5 + 2)==46))

System try to prove 
Implies(ForAll([_n5],Implies(And(And(_n5>=0,_n5<_L5),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)),ForAll([_n5],Implies(And(And(And(And(_n5>=0,_n5<_L5),_L5>0),_n5<_L5+1),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _n5 + 1) == 46)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array10(a, _x2, 0) == d1array8(a, _x2, _N4))))
_s.add(_N5 >= 100000)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 100000)))
_s.add(Or(_N5==0,_N5 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(Not(Implies(ForAll([_n5],Implies(And(And(_n5>=0,_n5<_L5),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)),ForAll([_n5],Implies(And(And(And(And(_n5>=0,_n5<_L5),_L5>0),_n5<_L5+1),_L5>0),d1array10(a, _n5, _n5 + 1) == 46)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n5,
                            Or(Not(_n5 >= 0),
                               d1array10(a, _n5, 1 + _n5) ==
                               46))),
                 Or(Not(_n5!2 >= 0),
                    d1array10(a, _n5!2, 1 + _n5!2) == 46))),
   rewrite(Or(Not(ForAll(_n5,
                         Or(Not(_n5 >= 0),
                            d1array10(a, _n5, 1 + _n5) == 46))),
              Or(Not(_n5!2 >= 0),
                 d1array10(a, _n5!2, 1 + _n5!2) == 46)) ==
           Or(Not(ForAll(_n5,
                         Or(Not(_n5 >= 0),
                            d1array10(a, _n5, 1 + _n5) == 46))),
              Not(_n5!2 >= 0),
              d1array10(a, _n5!2, 1 + _n5!2) == 46)),
   Or(Not(ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
      Not(_n5!2 >= 0),
      d1array10(a, _n5!2, 1 + _n5!2) == 46)), mp(mp~(mp(asserted(ForAll(_n5,
                          Implies(_n5 >= 0,
                                  d1array10(a, _n5, _n5 + 1) ==
                                  46))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       46)),
                            Implies(Var(0) >= 0,
                                    d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    46) ==
                            Or(Not(Var(0) >= 0),
                               d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               46)),
                      (ForAll(_n5,
                              Implies(_n5 >= 0,
                                      d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                      46))) ==
                      (ForAll(_n5,
                              Or(Not(_n5 >= 0),
                                 d1array10(a, _n5, 1 + _n5) ==
                                 46)))),
          ForAll(_n5,
                 Or(Not(_n5 >= 0),
                    d1array10(a, _n5, 1 + _n5) == 46))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46),
                      Or(Not(Var(0) >= 0),
                         d1array10(a, Var(0), 1 + Var(0)) ==
                         46))),
               ~(ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)),
                 ForAll(_n5,
                        Or(Not(_n5 >= 0),
                           d1array10(a, _n5, 1 + _n5) == 46)))),
       ForAll(_n5,
              Or(Not(_n5 >= 0),
                 d1array10(a, _n5, 1 + _n5) == 46))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46) ==
                    Or(Not(Var(0) >= 0),
                       d1array10(a, Var(0), 1 + Var(0)) ==
                       46)),
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46))) ==
               (ForAll(_n5,
                       Or(Not(_n5 >= 0),
                          d1array10(a, _n5, 1 + _n5) == 46)))),
   ForAll(_n5,
          Or(Not(_n5 >= 0),
             d1array10(a, _n5, 1 + _n5) == 46))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n5,
                                        Implies(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46)),
                                        ForAll(_n5,
                                        Implies(And(And(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        _n5 < _L5 + 1),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L5) ==
                                        Not(_L5 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L5) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)))),
                                        rewrite((_L5 > 0) ==
                                        Not(_L5 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L5),
                                        _L5 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L5 <= Var(0))),
                                        Not(_L5 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0))),
                                        Not(_L5 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L5),
                                        _L5 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        (ForAll(_n5,
                                        Implies(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46))) ==
                                        (ForAll(_n5,
                                        Or(Not(And(_n5 >= 0,
                                        Not(_L5 <= _n5),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                        46)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L5 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L5 + 1) ==
                                        Not(_L5 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L5 > 0),
                                        Var(0) < _L5 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L5 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L5 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0),
                                        Not(_L5 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        Var(0) < _L5 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0),
                                        Not(_L5 <=
                                        -1 + Var(0)))),
                                        rewrite((_L5 > 0) ==
                                        Not(_L5 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n5,
                                        Implies(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46)),
                                        ForAll(_n5,
                                        Implies(And(And(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        _n5 < _L5 + 1),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L5) ==
                                        Not(_L5 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L5) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)))),
                                        rewrite((_L5 > 0) ==
                                        Not(_L5 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L5),
                                        _L5 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L5 <= Var(0))),
                                        Not(_L5 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0))),
                                        Not(_L5 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L5),
                                        _L5 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        (d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        46) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        46)),
                                        (ForAll(_n5,
                                        Implies(And(And(_n5 >=
                                        0,
                                        _n5 < _L5),
                                        _L5 > 0),
                                        d1array10(a,
                                        _n5,
                                        _n5 + 1) ==
                                        46))) ==
                                        (ForAll(_n5,
                                        Or(Not(And(_n5 >= 0,
                                        Not(_L5 <= _n5),
                                        Not(_L5 <= 0))),
                                        d1array10(a,
                                        _n5,
                                        1 + _n5) ==
                                        46)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L5 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L5 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L5),
                                        _L5 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L5 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L5 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L5 <= ... + ...)),
                                        (Var(0) < _L5 + 1) ==
                                        Not(_L5 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L5),
                                        _L5 > 0),
                                        Var(0) < _L5 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        Not(_L5 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0)),
                                        Not(_L5 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L5 <= Var(0)),
                                        Not(_L5 <= 0),
                                        Not(_L5 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46))

***********************
2017-05-14 03:05:25
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array12(a, 0, 1) == 47']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array12(a, 0, 1) == 47

System try to prove 
d1array12(a, 0, 1) == 47

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _n6 + 1) == 47)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(a, _x2, 0) == d1array10(a, _x2, _N5))))
_s.add(_N6 >= 100000)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < 100000)))
_s.add(Or(_N6==0,_N6 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(Not(d1array12(a, 0, 1) == 47))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n6,
                            Or(Not(_n6 >= 0),
                               d1array12(a, _n6, 1 + _n6) ==
                               47))),
                 Or(Not(0 >= 0),
                    d1array12(a, 0, 1 + 0) == 47))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array12(a,
                                        0,
                                        1 + 0) ==
                                        d1array12(a, 0, 1)),
                                        (d1array12(a,
                                        0,
                                        1 + 0) ==
                                        47) ==
                                        (d1array12(a, 0, 1) ==
                                        47)),
                                        Or(Not(0 >= 0),
                                        d1array12(a,
                                        0,
                                        1 + 0) ==
                                        47) ==
                                        Or(False,
                                        d1array12(a, 0, 1) ==
                                        47)),
                            rewrite(Or(False,
                                       d1array12(a, 0, 1) ==
                                       47) ==
                                    (d1array12(a, 0, 1) ==
                                     47)),
                            Or(Not(0 >= 0),
                               d1array12(a, 0, 1 + 0) == 47) ==
                            (d1array12(a, 0, 1) == 47)),
                      Or(Not(ForAll(_n6,
                                    Or(Not(_n6 >= 0),
                                       d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                       47))),
                         Or(Not(0 >= 0),
                            d1array12(a, 0, 1 + 0) == 47)) ==
                      Or(Not(ForAll(_n6,
                                    Or(Not(_n6 >= 0),
                                       d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                       47))),
                         d1array12(a, 0, 1) == 47)),
         rewrite(Or(Not(ForAll(_n6,
                               Or(Not(_n6 >= 0),
                                  d1array12(a, _n6, 1 + _n6) ==
                                  47))),
                    d1array12(a, 0, 1) == 47) ==
                 Or(Not(ForAll(_n6,
                               Or(Not(_n6 >= 0),
                                  d1array12(a, _n6, 1 + _n6) ==
                                  47))),
                    d1array12(a, 0, 1) == 47)),
         Or(Not(ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))),
            Or(Not(0 >= 0), d1array12(a, 0, 1 + 0) == 47)) ==
         Or(Not(ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))),
            d1array12(a, 0, 1) == 47)),
   Or(Not(ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
      d1array12(a, 0, 1) == 47)), mp(mp~(mp(asserted(ForAll(_n6,
                          Implies(_n6 >= 0,
                                  d1array12(a, _n6, _n6 + 1) ==
                                  47))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       47)),
                            Implies(Var(0) >= 0,
                                    d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    47) ==
                            Or(Not(Var(0) >= 0),
                               d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               47)),
                      (ForAll(_n6,
                              Implies(_n6 >= 0,
                                      d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                      47))) ==
                      (ForAll(_n6,
                              Or(Not(_n6 >= 0),
                                 d1array12(a, _n6, 1 + _n6) ==
                                 47)))),
          ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47),
                      Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47))),
               ~(ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)),
                 ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)))),
       ForAll(_n6,
              Or(Not(_n6 >= 0),
                 d1array12(a, _n6, 1 + _n6) == 47))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47) ==
                    Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47)),
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))) ==
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47)))),
   ForAll(_n6,
          Or(Not(_n6 >= 0),
             d1array12(a, _n6, 1 + _n6) == 47))), asserted(Not(d1array12(a, 0, 1) == 47)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:26
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array12(a, _k6, _k6 + 1)==47),(d1array12(a, _k6 + 1, _k6 + 2)==47))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array12(a, _k6, _k6 + 1)==47),(d1array12(a, _k6 + 1, _k6 + 2)==47))

System try to prove 
Implies((d1array12(a, _k6, _k6 + 1)==47),(d1array12(a, _k6 + 1, _k6 + 2)==47))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _n6 + 1) == 47)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(a, _x2, 0) == d1array10(a, _x2, _N5))))
_s.add(_N6 >= 100000)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < 100000)))
_s.add(Or(_N6==0,_N6 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(Not(Implies((d1array12(a, _k6, _k6 + 1)==47),(d1array12(a, _k6 + 1, _k6 + 2)==47))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n6,
                            Or(Not(_n6 >= 0),
                               d1array12(a, _n6, 1 + _n6) ==
                               47))),
                 Or(Not(1 + _k6 >= 0),
                    d1array12(a, 1 + _k6, 1 + 1 + _k6) == 47))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k6 >=
                                        0) ==
                                        (_k6 >= -1)),
                                        Not(1 + _k6 >= 0) ==
                                        Not(_k6 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k6 ==
                                        2 + _k6),
                                        d1array12(a,
                                        1 + _k6,
                                        1 + 1 + _k6) ==
                                        d1array12(a,
                                        1 + _k6,
                                        2 + _k6)),
                                        (d1array12(a,
                                        1 + _k6,
                                        1 + 1 + _k6) ==
                                        47) ==
                                        (d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                        47)),
                                   Or(Not(1 + _k6 >= 0),
                                      d1array12(a,
                                        1 + _k6,
                                        1 + 1 + _k6) ==
                                      47) ==
                                   Or(Not(_k6 >= -1),
                                      d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                      47)),
                      Or(Not(ForAll(_n6,
                                    Or(Not(_n6 >= 0),
                                       d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                       47))),
                         Or(Not(1 + _k6 >= 0),
                            d1array12(a,
                                      1 + _k6,
                                      1 + 1 + _k6) ==
                            47)) ==
                      Or(Not(ForAll(_n6,
                                    Or(Not(_n6 >= 0),
                                       d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                       47))),
                         Or(Not(_k6 >= -1),
                            d1array12(a, 1 + _k6, 2 + _k6) ==
                            47))),
         rewrite(Or(Not(ForAll(_n6,
                               Or(Not(_n6 >= 0),
                                  d1array12(a, _n6, 1 + _n6) ==
                                  47))),
                    Or(Not(_k6 >= -1),
                       d1array12(a, 1 + _k6, 2 + _k6) == 47)) ==
                 Or(Not(ForAll(_n6,
                               Or(Not(_n6 >= 0),
                                  d1array12(a, _n6, 1 + _n6) ==
                                  47))),
                    Not(_k6 >= -1),
                    d1array12(a, 1 + _k6, 2 + _k6) == 47)),
         Or(Not(ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))),
            Or(Not(1 + _k6 >= 0),
               d1array12(a, 1 + _k6, 1 + 1 + _k6) == 47)) ==
         Or(Not(ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))),
            Not(_k6 >= -1),
            d1array12(a, 1 + _k6, 2 + _k6) == 47)),
   Or(Not(ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
      Not(_k6 >= -1),
      d1array12(a, 1 + _k6, 2 + _k6) == 47)), mp(mp~(mp(asserted(ForAll(_n6,
                          Implies(_n6 >= 0,
                                  d1array12(a, _n6, _n6 + 1) ==
                                  47))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       47)),
                            Implies(Var(0) >= 0,
                                    d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    47) ==
                            Or(Not(Var(0) >= 0),
                               d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               47)),
                      (ForAll(_n6,
                              Implies(_n6 >= 0,
                                      d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                      47))) ==
                      (ForAll(_n6,
                              Or(Not(_n6 >= 0),
                                 d1array12(a, _n6, 1 + _n6) ==
                                 47)))),
          ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47),
                      Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47))),
               ~(ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)),
                 ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)))),
       ForAll(_n6,
              Or(Not(_n6 >= 0),
                 d1array12(a, _n6, 1 + _n6) == 47))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47) ==
                    Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47)),
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))) ==
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47)))),
   ForAll(_n6,
          Or(Not(_n6 >= 0),
             d1array12(a, _n6, 1 + _n6) == 47))), not-or-elim(mp(asserted(Not(Implies(d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                    47,
                                    d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                    47))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                        d1array12(a,
                                        _k6,
                                        1 + _k6)),
                                        (d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                        47)),
                                        monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        rewrite(_k6 + 2 ==
                                        2 + _k6),
                                        d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                        d1array12(a,
                                        1 + _k6,
                                        2 + _k6)),
                                        (d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                        47) ==
                                        (d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                        47)),
                                        Implies(d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                        47,
                                        d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                        47) ==
                                        Implies(d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                        47,
                                        d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                        47)),
                                  rewrite(Implies(d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                        47,
                                        d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                        47) ==
                                        Or(Not(d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                        47),
                                        d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                        47)),
                                  Implies(d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                        47,
                                        d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                        47) ==
                                  Or(Not(d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                        47),
                                     d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                     47)),
                            Not(Implies(d1array12(a,
                                        _k6,
                                        _k6 + 1) ==
                                        47,
                                        d1array12(a,
                                        _k6 + 1,
                                        _k6 + 2) ==
                                        47)) ==
                            Not(Or(Not(d1array12(a,
                                        _k6,
                                        1 + _k6) ==
                                       47),
                                   d1array12(a,
                                        1 + _k6,
                                        2 + _k6) ==
                                   47))),
               Not(Or(Not(d1array12(a, _k6, 1 + _k6) == 47),
                      d1array12(a, 1 + _k6, 2 + _k6) == 47))),
            Not(d1array12(a, 1 + _k6, 2 + _k6) == 47)), unit-resolution(th-lemma(Or(_k6 >= -1, Not(_k6 >= 0))),
                asserted(_k6 >= 0),
                _k6 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:27
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n6],Implies(And(And(_n6>=0,_n6<_L6),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)),ForAll([_n6],Implies(And(And(And(And(_n6>=0,_n6<_L6),_L6>0),_n6<_L6+1),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array12(a, _k6, _k6 + 1)==47),(d1array12(a, _k6 + 1, _k6 + 2)==47))

System try to prove 
Implies(ForAll([_n6],Implies(And(And(_n6>=0,_n6<_L6),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)),ForAll([_n6],Implies(And(And(And(And(_n6>=0,_n6<_L6),_L6>0),_n6<_L6+1),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _n6 + 1) == 47)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(a, _x2, 0) == d1array10(a, _x2, _N5))))
_s.add(_N6 >= 100000)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < 100000)))
_s.add(Or(_N6==0,_N6 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(Not(Implies(ForAll([_n6],Implies(And(And(_n6>=0,_n6<_L6),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)),ForAll([_n6],Implies(And(And(And(And(_n6>=0,_n6<_L6),_L6>0),_n6<_L6+1),_L6>0),d1array12(a, _n6, _n6 + 1) == 47)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n6,
                            Or(Not(_n6 >= 0),
                               d1array12(a, _n6, 1 + _n6) ==
                               47))),
                 Or(Not(_n6!2 >= 0),
                    d1array12(a, _n6!2, 1 + _n6!2) == 47))),
   rewrite(Or(Not(ForAll(_n6,
                         Or(Not(_n6 >= 0),
                            d1array12(a, _n6, 1 + _n6) == 47))),
              Or(Not(_n6!2 >= 0),
                 d1array12(a, _n6!2, 1 + _n6!2) == 47)) ==
           Or(Not(ForAll(_n6,
                         Or(Not(_n6 >= 0),
                            d1array12(a, _n6, 1 + _n6) == 47))),
              Not(_n6!2 >= 0),
              d1array12(a, _n6!2, 1 + _n6!2) == 47)),
   Or(Not(ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
      Not(_n6!2 >= 0),
      d1array12(a, _n6!2, 1 + _n6!2) == 47)), mp(mp~(mp(asserted(ForAll(_n6,
                          Implies(_n6 >= 0,
                                  d1array12(a, _n6, _n6 + 1) ==
                                  47))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       47)),
                            Implies(Var(0) >= 0,
                                    d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    47) ==
                            Or(Not(Var(0) >= 0),
                               d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               47)),
                      (ForAll(_n6,
                              Implies(_n6 >= 0,
                                      d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                      47))) ==
                      (ForAll(_n6,
                              Or(Not(_n6 >= 0),
                                 d1array12(a, _n6, 1 + _n6) ==
                                 47)))),
          ForAll(_n6,
                 Or(Not(_n6 >= 0),
                    d1array12(a, _n6, 1 + _n6) == 47))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47),
                      Or(Not(Var(0) >= 0),
                         d1array12(a, Var(0), 1 + Var(0)) ==
                         47))),
               ~(ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)),
                 ForAll(_n6,
                        Or(Not(_n6 >= 0),
                           d1array12(a, _n6, 1 + _n6) == 47)))),
       ForAll(_n6,
              Or(Not(_n6 >= 0),
                 d1array12(a, _n6, 1 + _n6) == 47))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47) ==
                    Or(Not(Var(0) >= 0),
                       d1array12(a, Var(0), 1 + Var(0)) ==
                       47)),
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47))) ==
               (ForAll(_n6,
                       Or(Not(_n6 >= 0),
                          d1array12(a, _n6, 1 + _n6) == 47)))),
   ForAll(_n6,
          Or(Not(_n6 >= 0),
             d1array12(a, _n6, 1 + _n6) == 47))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n6,
                                        Implies(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47)),
                                        ForAll(_n6,
                                        Implies(And(And(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        _n6 < _L6 + 1),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L6) ==
                                        Not(_L6 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L6) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)))),
                                        rewrite((_L6 > 0) ==
                                        Not(_L6 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L6),
                                        _L6 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L6 <= Var(0))),
                                        Not(_L6 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0))),
                                        Not(_L6 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L6),
                                        _L6 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        (ForAll(_n6,
                                        Implies(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47))) ==
                                        (ForAll(_n6,
                                        Or(Not(And(_n6 >= 0,
                                        Not(_L6 <= _n6),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                        47)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L6 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L6 + 1) ==
                                        Not(_L6 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L6 > 0),
                                        Var(0) < _L6 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L6 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L6 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0),
                                        Not(_L6 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        Var(0) < _L6 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0),
                                        Not(_L6 <=
                                        -1 + Var(0)))),
                                        rewrite((_L6 > 0) ==
                                        Not(_L6 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n6,
                                        Implies(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47)),
                                        ForAll(_n6,
                                        Implies(And(And(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        _n6 < _L6 + 1),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L6) ==
                                        Not(_L6 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L6) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)))),
                                        rewrite((_L6 > 0) ==
                                        Not(_L6 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L6),
                                        _L6 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L6 <= Var(0))),
                                        Not(_L6 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0))),
                                        Not(_L6 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L6),
                                        _L6 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        (d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        47) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        47)),
                                        (ForAll(_n6,
                                        Implies(And(And(_n6 >=
                                        0,
                                        _n6 < _L6),
                                        _L6 > 0),
                                        d1array12(a,
                                        _n6,
                                        _n6 + 1) ==
                                        47))) ==
                                        (ForAll(_n6,
                                        Or(Not(And(_n6 >= 0,
                                        Not(_L6 <= _n6),
                                        Not(_L6 <= 0))),
                                        d1array12(a,
                                        _n6,
                                        1 + _n6) ==
                                        47)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L6 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L6 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L6),
                                        _L6 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L6 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L6 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L6 <= ... + ...)),
                                        (Var(0) < _L6 + 1) ==
                                        Not(_L6 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L6),
                                        _L6 > 0),
                                        Var(0) < _L6 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        Not(_L6 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0)),
                                        Not(_L6 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L6 <= Var(0)),
                                        Not(_L6 <= 0),
                                        Not(_L6 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47))

***********************
2017-05-14 03:05:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array14(a, 0, 1) == 48']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array14(a, 0, 1) == 48

System try to prove 
d1array14(a, 0, 1) == 48

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _n7 + 1) == 48)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array14(a, _x2, 0) == d1array12(a, _x2, _N6))))
_s.add(_N7 >= 100000)
_s.add(ForAll([_n7],Implies(And(_n7 < _N7,_n7>=0),_f(_n7) < 100000)))
_s.add(Or(_N7==0,_N7 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(d1array14(a, 0, 1) == 48))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n7,
                            Or(Not(_n7 >= 0),
                               d1array14(a, _n7, 1 + _n7) ==
                               48))),
                 Or(Not(0 >= 0),
                    d1array14(a, 0, 1 + 0) == 48))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array14(a,
                                        0,
                                        1 + 0) ==
                                        d1array14(a, 0, 1)),
                                        (d1array14(a,
                                        0,
                                        1 + 0) ==
                                        48) ==
                                        (d1array14(a, 0, 1) ==
                                        48)),
                                        Or(Not(0 >= 0),
                                        d1array14(a,
                                        0,
                                        1 + 0) ==
                                        48) ==
                                        Or(False,
                                        d1array14(a, 0, 1) ==
                                        48)),
                            rewrite(Or(False,
                                       d1array14(a, 0, 1) ==
                                       48) ==
                                    (d1array14(a, 0, 1) ==
                                     48)),
                            Or(Not(0 >= 0),
                               d1array14(a, 0, 1 + 0) == 48) ==
                            (d1array14(a, 0, 1) == 48)),
                      Or(Not(ForAll(_n7,
                                    Or(Not(_n7 >= 0),
                                       d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                       48))),
                         Or(Not(0 >= 0),
                            d1array14(a, 0, 1 + 0) == 48)) ==
                      Or(Not(ForAll(_n7,
                                    Or(Not(_n7 >= 0),
                                       d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                       48))),
                         d1array14(a, 0, 1) == 48)),
         rewrite(Or(Not(ForAll(_n7,
                               Or(Not(_n7 >= 0),
                                  d1array14(a, _n7, 1 + _n7) ==
                                  48))),
                    d1array14(a, 0, 1) == 48) ==
                 Or(Not(ForAll(_n7,
                               Or(Not(_n7 >= 0),
                                  d1array14(a, _n7, 1 + _n7) ==
                                  48))),
                    d1array14(a, 0, 1) == 48)),
         Or(Not(ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))),
            Or(Not(0 >= 0), d1array14(a, 0, 1 + 0) == 48)) ==
         Or(Not(ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))),
            d1array14(a, 0, 1) == 48)),
   Or(Not(ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
      d1array14(a, 0, 1) == 48)), mp(mp~(mp(asserted(ForAll(_n7,
                          Implies(_n7 >= 0,
                                  d1array14(a, _n7, _n7 + 1) ==
                                  48))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       48)),
                            Implies(Var(0) >= 0,
                                    d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    48) ==
                            Or(Not(Var(0) >= 0),
                               d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               48)),
                      (ForAll(_n7,
                              Implies(_n7 >= 0,
                                      d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                      48))) ==
                      (ForAll(_n7,
                              Or(Not(_n7 >= 0),
                                 d1array14(a, _n7, 1 + _n7) ==
                                 48)))),
          ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48),
                      Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48))),
               ~(ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)),
                 ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)))),
       ForAll(_n7,
              Or(Not(_n7 >= 0),
                 d1array14(a, _n7, 1 + _n7) == 48))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48) ==
                    Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48)),
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))) ==
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48)))),
   ForAll(_n7,
          Or(Not(_n7 >= 0),
             d1array14(a, _n7, 1 + _n7) == 48))), asserted(Not(d1array14(a, 0, 1) == 48)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array14(a, _k7, _k7 + 1)==48),(d1array14(a, _k7 + 1, _k7 + 2)==48))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array14(a, _k7, _k7 + 1)==48),(d1array14(a, _k7 + 1, _k7 + 2)==48))

System try to prove 
Implies((d1array14(a, _k7, _k7 + 1)==48),(d1array14(a, _k7 + 1, _k7 + 2)==48))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _n7 + 1) == 48)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array14(a, _x2, 0) == d1array12(a, _x2, _N6))))
_s.add(_N7 >= 100000)
_s.add(ForAll([_n7],Implies(And(_n7 < _N7,_n7>=0),_f(_n7) < 100000)))
_s.add(Or(_N7==0,_N7 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(Implies((d1array14(a, _k7, _k7 + 1)==48),(d1array14(a, _k7 + 1, _k7 + 2)==48))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n7,
                            Or(Not(_n7 >= 0),
                               d1array14(a, _n7, 1 + _n7) ==
                               48))),
                 Or(Not(1 + _k7 >= 0),
                    d1array14(a, 1 + _k7, 1 + 1 + _k7) == 48))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k7 >=
                                        0) ==
                                        (_k7 >= -1)),
                                        Not(1 + _k7 >= 0) ==
                                        Not(_k7 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k7 ==
                                        2 + _k7),
                                        d1array14(a,
                                        1 + _k7,
                                        1 + 1 + _k7) ==
                                        d1array14(a,
                                        1 + _k7,
                                        2 + _k7)),
                                        (d1array14(a,
                                        1 + _k7,
                                        1 + 1 + _k7) ==
                                        48) ==
                                        (d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                        48)),
                                   Or(Not(1 + _k7 >= 0),
                                      d1array14(a,
                                        1 + _k7,
                                        1 + 1 + _k7) ==
                                      48) ==
                                   Or(Not(_k7 >= -1),
                                      d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                      48)),
                      Or(Not(ForAll(_n7,
                                    Or(Not(_n7 >= 0),
                                       d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                       48))),
                         Or(Not(1 + _k7 >= 0),
                            d1array14(a,
                                      1 + _k7,
                                      1 + 1 + _k7) ==
                            48)) ==
                      Or(Not(ForAll(_n7,
                                    Or(Not(_n7 >= 0),
                                       d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                       48))),
                         Or(Not(_k7 >= -1),
                            d1array14(a, 1 + _k7, 2 + _k7) ==
                            48))),
         rewrite(Or(Not(ForAll(_n7,
                               Or(Not(_n7 >= 0),
                                  d1array14(a, _n7, 1 + _n7) ==
                                  48))),
                    Or(Not(_k7 >= -1),
                       d1array14(a, 1 + _k7, 2 + _k7) == 48)) ==
                 Or(Not(ForAll(_n7,
                               Or(Not(_n7 >= 0),
                                  d1array14(a, _n7, 1 + _n7) ==
                                  48))),
                    Not(_k7 >= -1),
                    d1array14(a, 1 + _k7, 2 + _k7) == 48)),
         Or(Not(ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))),
            Or(Not(1 + _k7 >= 0),
               d1array14(a, 1 + _k7, 1 + 1 + _k7) == 48)) ==
         Or(Not(ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))),
            Not(_k7 >= -1),
            d1array14(a, 1 + _k7, 2 + _k7) == 48)),
   Or(Not(ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
      Not(_k7 >= -1),
      d1array14(a, 1 + _k7, 2 + _k7) == 48)), mp(mp~(mp(asserted(ForAll(_n7,
                          Implies(_n7 >= 0,
                                  d1array14(a, _n7, _n7 + 1) ==
                                  48))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       48)),
                            Implies(Var(0) >= 0,
                                    d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    48) ==
                            Or(Not(Var(0) >= 0),
                               d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               48)),
                      (ForAll(_n7,
                              Implies(_n7 >= 0,
                                      d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                      48))) ==
                      (ForAll(_n7,
                              Or(Not(_n7 >= 0),
                                 d1array14(a, _n7, 1 + _n7) ==
                                 48)))),
          ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48),
                      Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48))),
               ~(ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)),
                 ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)))),
       ForAll(_n7,
              Or(Not(_n7 >= 0),
                 d1array14(a, _n7, 1 + _n7) == 48))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48) ==
                    Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48)),
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))) ==
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48)))),
   ForAll(_n7,
          Or(Not(_n7 >= 0),
             d1array14(a, _n7, 1 + _n7) == 48))), not-or-elim(mp(asserted(Not(Implies(d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                    48,
                                    d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                    48))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                        d1array14(a,
                                        _k7,
                                        1 + _k7)),
                                        (d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                        48)),
                                        monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        rewrite(_k7 + 2 ==
                                        2 + _k7),
                                        d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                        d1array14(a,
                                        1 + _k7,
                                        2 + _k7)),
                                        (d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                        48) ==
                                        (d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                        48)),
                                        Implies(d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                        48,
                                        d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                        48) ==
                                        Implies(d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                        48,
                                        d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                        48)),
                                  rewrite(Implies(d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                        48,
                                        d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                        48) ==
                                        Or(Not(d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                        48),
                                        d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                        48)),
                                  Implies(d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                        48,
                                        d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                        48) ==
                                  Or(Not(d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                        48),
                                     d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                     48)),
                            Not(Implies(d1array14(a,
                                        _k7,
                                        _k7 + 1) ==
                                        48,
                                        d1array14(a,
                                        _k7 + 1,
                                        _k7 + 2) ==
                                        48)) ==
                            Not(Or(Not(d1array14(a,
                                        _k7,
                                        1 + _k7) ==
                                       48),
                                   d1array14(a,
                                        1 + _k7,
                                        2 + _k7) ==
                                   48))),
               Not(Or(Not(d1array14(a, _k7, 1 + _k7) == 48),
                      d1array14(a, 1 + _k7, 2 + _k7) == 48))),
            Not(d1array14(a, 1 + _k7, 2 + _k7) == 48)), unit-resolution(th-lemma(Or(_k7 >= -1, Not(_k7 >= 0))),
                asserted(_k7 >= 0),
                _k7 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:30
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n7],Implies(And(And(_n7>=0,_n7<_L7),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)),ForAll([_n7],Implies(And(And(And(And(_n7>=0,_n7<_L7),_L7>0),_n7<_L7+1),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array14(a, _k7, _k7 + 1)==48),(d1array14(a, _k7 + 1, _k7 + 2)==48))

System try to prove 
Implies(ForAll([_n7],Implies(And(And(_n7>=0,_n7<_L7),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)),ForAll([_n7],Implies(And(And(And(And(_n7>=0,_n7<_L7),_L7>0),_n7<_L7+1),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _n7 + 1) == 48)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array14(a, _x2, 0) == d1array12(a, _x2, _N6))))
_s.add(_N7 >= 100000)
_s.add(ForAll([_n7],Implies(And(_n7 < _N7,_n7>=0),_f(_n7) < 100000)))
_s.add(Or(_N7==0,_N7 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(Implies(ForAll([_n7],Implies(And(And(_n7>=0,_n7<_L7),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)),ForAll([_n7],Implies(And(And(And(And(_n7>=0,_n7<_L7),_L7>0),_n7<_L7+1),_L7>0),d1array14(a, _n7, _n7 + 1) == 48)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n7,
                            Or(Not(_n7 >= 0),
                               d1array14(a, _n7, 1 + _n7) ==
                               48))),
                 Or(Not(_n7!2 >= 0),
                    d1array14(a, _n7!2, 1 + _n7!2) == 48))),
   rewrite(Or(Not(ForAll(_n7,
                         Or(Not(_n7 >= 0),
                            d1array14(a, _n7, 1 + _n7) == 48))),
              Or(Not(_n7!2 >= 0),
                 d1array14(a, _n7!2, 1 + _n7!2) == 48)) ==
           Or(Not(ForAll(_n7,
                         Or(Not(_n7 >= 0),
                            d1array14(a, _n7, 1 + _n7) == 48))),
              Not(_n7!2 >= 0),
              d1array14(a, _n7!2, 1 + _n7!2) == 48)),
   Or(Not(ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
      Not(_n7!2 >= 0),
      d1array14(a, _n7!2, 1 + _n7!2) == 48)), mp(mp~(mp(asserted(ForAll(_n7,
                          Implies(_n7 >= 0,
                                  d1array14(a, _n7, _n7 + 1) ==
                                  48))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                       48)),
                            Implies(Var(0) >= 0,
                                    d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                    48) ==
                            Or(Not(Var(0) >= 0),
                               d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                               48)),
                      (ForAll(_n7,
                              Implies(_n7 >= 0,
                                      d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                      48))) ==
                      (ForAll(_n7,
                              Or(Not(_n7 >= 0),
                                 d1array14(a, _n7, 1 + _n7) ==
                                 48)))),
          ForAll(_n7,
                 Or(Not(_n7 >= 0),
                    d1array14(a, _n7, 1 + _n7) == 48))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48),
                      Or(Not(Var(0) >= 0),
                         d1array14(a, Var(0), 1 + Var(0)) ==
                         48))),
               ~(ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)),
                 ForAll(_n7,
                        Or(Not(_n7 >= 0),
                           d1array14(a, _n7, 1 + _n7) == 48)))),
       ForAll(_n7,
              Or(Not(_n7 >= 0),
                 d1array14(a, _n7, 1 + _n7) == 48))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48) ==
                    Or(Not(Var(0) >= 0),
                       d1array14(a, Var(0), 1 + Var(0)) ==
                       48)),
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48))) ==
               (ForAll(_n7,
                       Or(Not(_n7 >= 0),
                          d1array14(a, _n7, 1 + _n7) == 48)))),
   ForAll(_n7,
          Or(Not(_n7 >= 0),
             d1array14(a, _n7, 1 + _n7) == 48))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n7,
                                        Implies(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48)),
                                        ForAll(_n7,
                                        Implies(And(And(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        _n7 < _L7 + 1),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L7) ==
                                        Not(_L7 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L7) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)))),
                                        rewrite((_L7 > 0) ==
                                        Not(_L7 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L7),
                                        _L7 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L7 <= Var(0))),
                                        Not(_L7 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0))),
                                        Not(_L7 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L7),
                                        _L7 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        (ForAll(_n7,
                                        Implies(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48))) ==
                                        (ForAll(_n7,
                                        Or(Not(And(_n7 >= 0,
                                        Not(_L7 <= _n7),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                        48)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L7 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L7 + 1) ==
                                        Not(_L7 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L7 > 0),
                                        Var(0) < _L7 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L7 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L7 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0),
                                        Not(_L7 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        Var(0) < _L7 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0),
                                        Not(_L7 <=
                                        -1 + Var(0)))),
                                        rewrite((_L7 > 0) ==
                                        Not(_L7 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n7,
                                        Implies(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48)),
                                        ForAll(_n7,
                                        Implies(And(And(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        _n7 < _L7 + 1),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L7) ==
                                        Not(_L7 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L7) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)))),
                                        rewrite((_L7 > 0) ==
                                        Not(_L7 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L7),
                                        _L7 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L7 <= Var(0))),
                                        Not(_L7 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0))),
                                        Not(_L7 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L7),
                                        _L7 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        (d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        Var(0),
                                        Var(0) + 1) ==
                                        48) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        Var(0),
                                        1 + Var(0)) ==
                                        48)),
                                        (ForAll(_n7,
                                        Implies(And(And(_n7 >=
                                        0,
                                        _n7 < _L7),
                                        _L7 > 0),
                                        d1array14(a,
                                        _n7,
                                        _n7 + 1) ==
                                        48))) ==
                                        (ForAll(_n7,
                                        Or(Not(And(_n7 >= 0,
                                        Not(_L7 <= _n7),
                                        Not(_L7 <= 0))),
                                        d1array14(a,
                                        _n7,
                                        1 + _n7) ==
                                        48)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L7 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L7 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L7),
                                        _L7 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L7 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L7 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L7 <= ... + ...)),
                                        (Var(0) < _L7 + 1) ==
                                        Not(_L7 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L7),
                                        _L7 > 0),
                                        Var(0) < _L7 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        Not(_L7 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0)),
                                        Not(_L7 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L7 <= Var(0)),
                                        Not(_L7 <= 0),
                                        Not(_L7 <=
                                        -1 + Var(0)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _N7) == 48))

***********************
2017-05-14 03:05:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, 0) == 48))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, 0) == 48))

System try to prove 
ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, 0) == 48))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_x2,_n8],Implies(And(_x2>=0,_n8>=0),d1array16(a, _x2, _n8 + 1) == d1array16(a, _x2, _n8))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array16(a, _x2, 0) == d1array14(a, _x2, _N7))))
_s.add(_N8 >= 100000)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < 100000)))
_s.add(Or(_N8==0,_N8 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _N7) == 48)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(Not(ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, 0) == 48))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n7,
                                       Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        48) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        48)),
                                        (ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48))) ==
                                        (ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                                Not(ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48))) ==
                                Not(ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                   Not(ForAll(_n7,
                              Or(Not(_n7 >= 0),
                                 d1array16(a, _n7, 0) == 48)))),
                sk(~(Not(ForAll(_n7,
                                Or(Not(_n7 >= 0),
                                   d1array16(a, _n7, 0) ==
                                   48))),
                     Not(Or(Not(_n7!2 >= 0),
                            d1array16(a, _n7!2, 0) == 48)))),
                Not(Or(Not(_n7!2 >= 0),
                       d1array16(a, _n7!2, 0) == 48))),
            Not(d1array16(a, _n7!2, 0) == 48)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                                       Or(Not(_n7!2 >= 0),
                                        d1array16(a,
                                        _n7!2,
                                        0) ==
                                        d1array14(a,
                                        _n7!2,
                                        _N7)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                                    Or(Not(_n7!2 >= 0),
                                       d1array16(a,
                                        _n7!2,
                                        0) ==
                                       d1array14(a,
                                        _n7!2,
                                        _N7))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                                    Not(_n7!2 >= 0),
                                    d1array16(a, _n7!2, 0) ==
                                    d1array14(a, _n7!2, _N7))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                            Not(_n7!2 >= 0),
                            d1array16(a, _n7!2, 0) ==
                            d1array14(a, _n7!2, _N7))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7)),
                                        Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array16(a, _x2, 0) ==
                                       d1array14(a,
                                        _x2,
                                        _N7)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        d1array14(a,
                                        Var(0),
                                        _N7))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array16(a, _x2, 0) ==
                                        d1array14(a,
                                        _x2,
                                        _N7))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array16(a, _x2, 0) ==
                                   d1array14(a, _x2, _N7)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        48) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array16(a,
                                        Var(0),
                                        0) ==
                                        48)),
                                        (ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48))) ==
                                        (ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                                        Not(ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        d1array16(a, _n7, 0) ==
                                        48))) ==
                                        Not(ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                                        Not(ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48)))),
                                      sk(~(Not(ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        d1array16(a, _n7, 0) ==
                                        48))),
                                        Not(Or(Not(_n7!2 >=
                                        0),
                                        d1array16(a,
                                        _n7!2,
                                        0) ==
                                        48)))),
                                      Not(Or(Not(_n7!2 >= 0),
                                        d1array16(a,
                                        _n7!2,
                                        0) ==
                                        48))),
                                  _n7!2 >= 0),
                      d1array16(a, _n7!2, 0) ==
                      d1array14(a, _n7!2, _N7)),
      unit-resolution(mp(quant-inst(Or(Not(ForAll(_n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 03:05:33
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n7],Implies(_n7>=0,Implies((d1array16(a, _n7, _k8 + 1)==48),(d1array16(a, _n7, _k8 + 2)==48))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n7],Implies(_n7>=0,Implies((d1array16(a, _n7, _k8 + 1)==48),(d1array16(a, _n7, _k8 + 2)==48))))

System try to prove 
ForAll([_n7],Implies(_n7>=0,Implies((d1array16(a, _n7, _k8 + 1)==48),(d1array16(a, _n7, _k8 + 2)==48))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(ForAll([_x2,_n8],Implies(And(_x2>=0,_n8>=0),d1array16(a, _x2, _n8 + 1) == d1array16(a, _x2, _n8))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array16(a, _x2, 0) == d1array14(a, _x2, _N7))))
_s.add(_N8 >= 100000)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < 100000)))
_s.add(Or(_N8==0,_N8 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _N7) == 48)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(Not(ForAll([_n7],Implies(_n7>=0,Implies((d1array16(a, _n7, _k8 + 1)==48),(d1array16(a, _n7, _k8 + 2)==48))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n7,
                                       Implies(_n7 >= 0,
                                        Implies(d1array16(a,
                                        _n7,
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        _n7,
                                        _k8 + 2) ==
                                        48))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        d1array16(a,
                                        Var(0),
                                        1 + _k8)),
                                        (d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        48) ==
                                        (d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48)),
                                        monotonicity(monotonicity(rewrite(_k8 +
                                        2 ==
                                        2 + _k8),
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8)),
                                        (d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        48) ==
                                        (d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        Implies(d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        48) ==
                                        Implies(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        rewrite(Implies(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48) ==
                                        Or(Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        Implies(d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        48) ==
                                        Or(Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        48)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array16(a,
                                        Var(0),
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        Var(0),
                                        _k8 + 2) ==
                                        48)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array16(a,
                                        Var(0),
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        Var(0),
                                        2 + _k8) ==
                                        48)),
                                        (ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        Implies(d1array16(a,
                                        _n7,
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        _n7,
                                        _k8 + 2) ==
                                        48)))) ==
                                        (ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        Not(d1array16(a,
                                        _n7,
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        _n7,
                                        2 + _k8) ==
                                        48)))),
                                Not(ForAll(_n7,
                                        Implies(_n7 >= 0,
                                        Implies(d1array16(a,
                                        _n7,
                                        _k8 + 1) ==
                                        48,
                                        d1array16(a,
                                        _n7,
                                        _k8 + 2) ==
                                        48)))) ==
                                Not(ForAll(_n7,
                                        Or(Not(_n7 >= 0),
                                        Not(d1array16(a,
                                        _n7,
                                        1 + _k8) ==
                                        48),
                                        d1array16(a,
                                        _n7,
                                        2 + _k8) ==
                                        48)))),
                   Not(ForAll(_n7,
                              Or(Not(_n7 >= 0),
                                 Not(d1array16(a,
                                        _n7,
                                        1 + _k8) ==
                                     48),
                                 d1array16(a, _n7, 2 + _k8) ==
                                 48)))),
                sk(~(Not(ForAll(_n7,
                                Or(Not(_n7 >= 0),
                                   Not(d1array16(a,
                                        _n7,
                                        1 + _k8) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                       Or(Not(_n7!2 >= 0),
                                        Not(1 + _k8 >= 0),
                                        d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k8 >=
                                        0) ==
                                        (_k8 >= -1)),
                                        Not(1 + _k8 >= 0) ==
                                        Not(_k8 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k8 ==
                                        2 + _k8),
                                        d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        2 + _k8)),
                                        (d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8)) ==
                                        (d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8))),
                                        Or(Not(_n7!2 >= 0),
                                        Not(1 + _k8 >= 0),
                                        d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8)) ==
                                        Or(Not(_n7!2 >= 0),
                                        Not(_k8 >= -1),
                                        d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8))),
                                        Or(Not(ForAll([_x2,
                                        _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                        Or(Not(_n7!2 >= 0),
                                        Not(1 + _k8 >= 0),
                                        d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8))) ==
                                        Or(Not(ForAll([_x2,
                                        _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                        Or(Not(_n7!2 >= 0),
                                        Not(_k8 >= -1),
                                        d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                        Or(Not(_n7!2 >= 0),
                                        Not(_k8 >= -1),
                                        d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8))) ==
                                       Or(Not(ForAll([_x2,
                                        _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                        Not(_n7!2 >= 0),
                                        Not(_k8 >= -1),
                                        d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                        d1array16(a,
                                        _n7!2,
                                        1 + _k8))),
                               Or(Not(ForAll([_x2, _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                  Or(Not(_n7!2 >= 0),
                                     Not(1 + _k8 >= 0),
                                     d1array16(a,
                                        _n7!2,
                                        1 + 1 + _k8) ==
                                     d1array16(a,
                                        _n7!2,
                                        1 + _k8))) ==
                               Or(Not(ForAll([_x2, _n8],
                                        Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                  Not(_n7!2 >= 0),
                                  Not(_k8 >= -1),
                                  d1array16(a,
                                        _n7!2,
                                        2 + _k8) ==
                                  d1array16(a,
                                        _n7!2,
                                        1 + _k8))),
                         Or(Not(ForAll([_x2, _n8],
                                       Or(Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        1 + _n8) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                            Not(_n7!2 >= 0),
                            Not(_k8 >= -1),
                            d1array16(a, _n7!2, 2 + _k8) ==
                            d1array16(a, _n7!2, 1 + _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n8],
                                        Implies(And(_x2 >= 0,
                                        _n8 >= 0),
                                        d1array16(a,
                                        _x2,
                                        _n8 + 1) ==
                                        d1array16(a,
                                        _x2,
                                        _n8)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array16(a,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array16(a,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array16(a,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, _N8) == 48))

***********************
2017-05-14 03:05:34
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n8],Implies(_n8>=0,(d1array16(a, _n8, _N8)==47)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n8],Implies(_n8>=0,(d1array16(a, _n8, _N8)==47)))

System try to prove 
ForAll([_n8],Implies(_n8>=0,(d1array16(a, _n8, _N8)==47)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_N2=Const('_N2',IntSort())
main=Int('main')
_N8=Const('_N8',IntSort())
_N1=Const('_N1',IntSort())
i1=Int('i1')
_N3=Const('_N3',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N7=Const('_N7',IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
a1=Const('a1',arraySort)
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a=Const('a',arraySort)
_n8=Int('_n8')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
_n5=Int('_n5')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
_L2=Int('_L2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_L3=Int('_L3')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_L4=Int('_L4')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_L5=Int('_L5')
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_L6=Int('_L6')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
_k7=Int('_k7')
_L7=Int('_L7')
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array16=Function('d1array16',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array10=Function('d1array10',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array14=Function('d1array14',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(i1 == _N7)
_s.add(x1 == _N8)
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array16(a, _x2, _N8))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _n1 + 1) == 42)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _n2 + 1) == 43)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _n3 + 1) == 44)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(a, _x2, 0) == d1array4(a, _x2, _N2))))
_s.add(_N3 >= 100000)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 100000)))
_s.add(Or(_N3==0,_N3 - 1 < 100000))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _n4 + 1) == 45)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(a, _x2, 0) == d1array6(a, _x2, _N3))))
_s.add(_N4 >= 100000)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < 100000)))
_s.add(Or(_N4==0,_N4 - 1 < 100000))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _n5 + 1) == 46)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array10(a, _x2, 0) == d1array8(a, _x2, _N4))))
_s.add(_N5 >= 100000)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 100000)))
_s.add(Or(_N5==0,_N5 - 1 < 100000))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _n6 + 1) == 47)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(a, _x2, 0) == d1array10(a, _x2, _N5))))
_s.add(_N6 >= 100000)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < 100000)))
_s.add(Or(_N6==0,_N6 - 1 < 100000))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _n7 + 1) == 48)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array14(a, _x2, 0) == d1array12(a, _x2, _N6))))
_s.add(_N7 >= 100000)
_s.add(ForAll([_n7],Implies(And(_n7 < _N7,_n7>=0),_f(_n7) < 100000)))
_s.add(Or(_N7==0,_N7 - 1 < 100000))
_s.add(ForAll([_x2,_n8],Implies(And(_x2>=0,_n8>=0),d1array16(a, _x2, _n8 + 1) == d1array16(a, _x2, _n8))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array16(a, _x2, 0) == d1array14(a, _x2, _N7))))
_s.add(_N8 >= 100000)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < 100000)))
_s.add(Or(_N8==0,_N8 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a, _n1, _N1) == 42)))
_s.add(ForAll([_n2],Implies(_n2>=0,d1array4(a, _n2, _N2) == 43)))
_s.add(ForAll([_n3],Implies(_n3>=0,d1array6(a, _n3, _N3) == 44)))
_s.add(ForAll([_n4],Implies(_n4>=0,d1array8(a, _n4, _N4) == 45)))
_s.add(ForAll([_n5],Implies(_n5>=0,d1array10(a, _n5, _N5) == 46)))
_s.add(ForAll([_n6],Implies(_n6>=0,d1array12(a, _n6, _N6) == 47)))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array14(a, _n7, _N7) == 48)))
_s.add(ForAll([_n7],Implies(_n7>=0,d1array16(a, _n7, _N8) == 48)))
_s.add(a1 == a)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(_N3>=0)
_s.add(_N4>=0)
_s.add(_N5>=0)
_s.add(_N6>=0)
_s.add(_N7>=0)
_s.add(_N8>=0)
_s.add(Not(ForAll([_n8],Implies(_n8>=0,(d1array16(a, _n8, _N8)==47)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_init7_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_init7_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Counter Example
[i1 = 100000,
 _n8!0 = 38,
 _k6 = 0,
 _N8 = 100000,
 _N4 = 100000,
 _k7 = 0,
 _N7 = 100000,
 x1 = 100000,
 _k8 = 0,
 _N5 = 100000,
 main = 0,
 _N2 = 100000,
 _k5 = 0,
 a = arraySort!val!0,
 a1 = arraySort!val!0,
 _k3 = 0,
 _k4 = 0,
 _N3 = 100000,
 _N1 = 100000,
 _N6 = 100000,
 _k1 = 0,
 _k2 = 0,
 d1array10 = [else ->
              d1array10!163(Var(0),
                            k!150(Var(1)),
                            k!155(Var(2)))],
 k!150 = [else ->
          If(Var(0) >= 0,
             If(Var(0) >= 38,
                If(Var(0) >= 99999, 99999, 38),
                0),
             -1)],
 d1array8 = [else ->
             d1array8!158(Var(0),
                          k!150(Var(1)),
                          k!154(Var(2)))],
 d1array14!159 = [(arraySort!val!0, 0, 0) -> 47,
                  (arraySort!val!0, 38, 0) -> 47,
                  (arraySort!val!0, 99999, 0) -> 47,
                  else -> 48],
 _f = [else -> Var(0)],
 d1array16 = [else -> 48],
 d1array6 = [else ->
             d1array6!162(Var(0),
                          k!150(Var(1)),
                          k!153(Var(2)))],
 d1array12 = [else ->
              d1array12!161(Var(0),
                            k!150(Var(1)),
                            k!156(Var(2)))],
 d1array1 = [(arraySort!val!0, 38) -> 48,
             else ->
             d1array16(arraySort!val!0, Var(1), 100000)],
 k!157 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 k!156 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array4 = [else ->
             d1array4!160(Var(0),
                          k!150(Var(1)),
                          k!152(Var(2)))],
 d1array2 = [else -> 42],
 k!155 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 k!154 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array12!161 = [(arraySort!val!0, 0, 0) -> 46,
                  (arraySort!val!0, 38, 0) -> 46,
                  (arraySort!val!0, 99999, 0) -> 46,
                  else -> 47],
 d1array6!162 = [(arraySort!val!0, 0, 0) -> 43,
                 (arraySort!val!0, 38, 0) -> 43,
                 (arraySort!val!0, 99999, 0) -> 43,
                 else -> 44],
 d1array14 = [else ->
              d1array14!159(Var(0),
                            k!150(Var(1)),
                            k!157(Var(2)))],
 k!153 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array4!160 = [(arraySort!val!0, 0, 0) -> 42,
                 (arraySort!val!0, 38, 0) -> 42,
                 (arraySort!val!0, 99999, 0) -> 42,
                 else -> 43],
 d1array10!163 = [(arraySort!val!0, 0, 0) -> 45,
                  (arraySort!val!0, 38, 0) -> 45,
                  (arraySort!val!0, 99999, 0) -> 45,
                  else -> 46],
 k!152 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array = [else -> d1array2(arraySort!val!0, Var(1), 0)],
 d1array8!158 = [(arraySort!val!0, 0, 0) -> 44,
                 (arraySort!val!0, 38, 0) -> 44,
                 (arraySort!val!0, 99999, 0) -> 44,
                 else -> 45]]


Result --Counter Example
[i1 = 100000,
 _n8!0 = 38,
 _k6 = 0,
 _N8 = 100000,
 _N4 = 100000,
 _k7 = 0,
 _N7 = 100000,
 x1 = 100000,
 _k8 = 0,
 _N5 = 100000,
 main = 0,
 _N2 = 100000,
 _k5 = 0,
 a = arraySort!val!0,
 a1 = arraySort!val!0,
 _k3 = 0,
 _k4 = 0,
 _N3 = 100000,
 _N1 = 100000,
 _N6 = 100000,
 _k1 = 0,
 _k2 = 0,
 d1array10 = [else ->
              d1array10!163(Var(0),
                            k!150(Var(1)),
                            k!155(Var(2)))],
 k!150 = [else ->
          If(Var(0) >= 0,
             If(Var(0) >= 38,
                If(Var(0) >= 99999, 99999, 38),
                0),
             -1)],
 d1array8 = [else ->
             d1array8!158(Var(0),
                          k!150(Var(1)),
                          k!154(Var(2)))],
 d1array14!159 = [(arraySort!val!0, 0, 0) -> 47,
                  (arraySort!val!0, 38, 0) -> 47,
                  (arraySort!val!0, 99999, 0) -> 47,
                  else -> 48],
 _f = [else -> Var(0)],
 d1array16 = [else -> 48],
 d1array6 = [else ->
             d1array6!162(Var(0),
                          k!150(Var(1)),
                          k!153(Var(2)))],
 d1array12 = [else ->
              d1array12!161(Var(0),
                            k!150(Var(1)),
                            k!156(Var(2)))],
 d1array1 = [(arraySort!val!0, 38) -> 48,
             else ->
             d1array16(arraySort!val!0, Var(1), 100000)],
 k!157 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 k!156 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array4 = [else ->
             d1array4!160(Var(0),
                          k!150(Var(1)),
                          k!152(Var(2)))],
 d1array2 = [else -> 42],
 k!155 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 k!154 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array12!161 = [(arraySort!val!0, 0, 0) -> 46,
                  (arraySort!val!0, 38, 0) -> 46,
                  (arraySort!val!0, 99999, 0) -> 46,
                  else -> 47],
 d1array6!162 = [(arraySort!val!0, 0, 0) -> 43,
                 (arraySort!val!0, 38, 0) -> 43,
                 (arraySort!val!0, 99999, 0) -> 43,
                 else -> 44],
 d1array14 = [else ->
              d1array14!159(Var(0),
                            k!150(Var(1)),
                            k!157(Var(2)))],
 k!153 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array4!160 = [(arraySort!val!0, 0, 0) -> 42,
                 (arraySort!val!0, 38, 0) -> 42,
                 (arraySort!val!0, 99999, 0) -> 42,
                 else -> 43],
 d1array10!163 = [(arraySort!val!0, 0, 0) -> 45,
                  (arraySort!val!0, 38, 0) -> 45,
                  (arraySort!val!0, 99999, 0) -> 45,
                  else -> 46],
 k!152 = [else ->
          If(Var(0) >= 1,
             If(Var(0) >= 39,
                If(Var(0) >= 100000, 100000, 39),
                1),
             0)],
 d1array = [else -> d1array2(arraySort!val!0, Var(1), 0)],
 d1array8!158 = [(arraySort!val!0, 0, 0) -> 44,
                 (arraySort!val!0, 38, 0) -> 44,
                 (arraySort!val!0, 99999, 0) -> 44,
                 else -> 45]]

