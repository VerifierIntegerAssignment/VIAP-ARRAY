
***********************
2017-05-14 00:56:37
***********************

Command--Translate 

Parameters--
 File Name--array_true-unreach-call3_true-termination.i

***********************
2017-05-14 00:56:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--i5(_N1) <= 1024
 Strategy--Direct
System try to prove 
i5(_N1) <= 1024

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
A=Const('A',arraySort)
_N1=Const('_N1',IntSort())
_n1=Int('_n1')
i1=Int('i1')
d1array=Function('d1array',arraySort,IntSort(),IntSort())
i5=Function('i5',IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
A1=Const('A1',arraySort)
break_1_flag1=Int('break_1_flag1')
break_1_flag5=Function('break_1_flag5',IntSort(),IntSort())
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == d1array(_x1, _x2))))
_s.add(i1 == i5(_N1))
_s.add(main == 0)
_s.add(break_1_flag1 == break_1_flag5(_N1))
_s.add(ForAll([_n1],Implies(_n1>=0,i5(_n1 + 1) == If(If(i5(_n1) >= 1024,1,0)==0,i5(_n1) + 1,i5(_n1)))))
_s.add(ForAll([_n1],Implies(_n1>=0,break_1_flag5(_n1 + 1) == If(i5(_n1) >= 1024,1,0))))
_s.add(i5(0) == 0)
_s.add(break_1_flag5(0) == 0)
_s.add(Or((d1array(A, i5(_N1))==0),(break_1_flag5(_N1)!=0)))
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),And((d1array(A, i5(_f(_n1)))!=0),(break_1_flag5(_f(_n1))==0)))))
_s.add(Or(_N1==0,And((d1array(A, i5((_N1-1)))!=0),(break_1_flag5((_N1-1))==0))))
_s.add(_N1>=0)
_s.add(Not(i5(_N1) <= 1024))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">array_true-unreach-call3_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'array_true-unreach-call3_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[th-lemma(Or(_N1 == 0, Not(_N1 <= 0), Not(_N1 >= 0))), lemma(unit-resolution(unit-resolution(th-lemma(Or(Not(i5(_N1) ==
                                        i5(0)),
                                        i5(_N1) + -1*i5(0) <=
                                        0)),
                                      lemma(th-lemma(unit-resolution(th-lemma(Or(i5(_N1) >=
                                        1024,
                                        i5(_N1) <= 1024)),
                                        asserted(Not(i5(_N1) <=
                                        1024)),
                                        i5(_N1) >= 1024),
                                        unit-resolution(th-lemma(Or(Not(i5(0) <=
                                        0),
                                        Not(i5(0) >= 1024))),
                                        unit-resolution(th-lemma(Or(Not(i5(0) ==
                                        0),
                                        i5(0) <= 0)),
                                        asserted(i5(0) == 0),
                                        i5(0) <= 0),
                                        Not(i5(0) >= 1024)),
                                        hypothesis(i5(_N1) +
                                        -1*i5(0) <=
                                        0),
                                        False),
                                        Not(i5(_N1) +
                                        -1*i5(0) <=
                                        0)),
                                      Not(i5(_N1) == i5(0))),
                      monotonicity(hypothesis(_N1 == 0),
                                   i5(_N1) == i5(0)),
                      False),
      Not(_N1 == 0)), asserted(_N1 >= 0), lemma(th-lemma(unit-resolution(unit-resolution(th-lemma(Or(-1 +
                                        _N1 ==
                                        0,
                                        Not(-1 + _N1 <= 0),
                                        Not(-1 + _N1 >= 0))),
                                        unit-resolution(lemma(mp(trans(trans(symm(trans(trans(hypothesis(i5(_N1) ==
                                        i5(-1 + _N1)),
                                        monotonicity(hypothesis(-1 +
                                        _N1 ==
                                        0),
                                        i5(-1 + _N1) ==
                                        i5(0)),
                                        i5(_N1) == i5(0)),
                                        asserted(i5(0) == 0),
                                        i5(_N1) == 0),
                                        0 == i5(_N1)),
                                        monotonicity(th-lemma(unit-resolution(th-lemma(Or(Not(-1 +
                                        _N1 ==
                                        0),
                                        -1 + _N1 >= 0)),
                                        hypothesis(-1 + _N1 ==
                                        0),
                                        -1 + _N1 >= 0),
                                        unit-resolution(th-lemma(Or(Not(-1 +
                                        _N1 ==
                                        0),
                                        -1 + _N1 <= 0)),
                                        hypothesis(-1 + _N1 ==
                                        0),
                                        -1 + _N1 <= 0),
                                        _N1 == 1),
                                        i5(_N1) == i5(1)),
                                        0 == i5(1)),
                                        th-lemma(unit-resolution(th-lemma(Or(Not(i5(0) ==
                                        0),
                                        i5(0) >= 0)),
                                        asserted(i5(0) == 0),
                                        i5(0) >= 0),
                                        unit-resolution(th-lemma(Or(Not(i5(0) ==
                                        0),
                                        i5(0) <= 0)),
                                        asserted(i5(0) == 0),
                                        i5(0) <= 0),
                                        unit-resolution(th-lemma(Or(Not(i5(0) +
                                        -1*i5(1) ==
                                        -1),
                                        i5(0) + -1*i5(1) >=
                                        -1)),
                                        unit-resolution(def-axiom(Or(Not(If(i5(0) >=
                                        1024,
                                        i5(1) == i5(0),
                                        i5(0) + -1*i5(1) ==
                                        -1)),
                                        i5(0) >= 1024,
                                        i5(0) + -1*i5(1) ==
                                        -1)),
                                        unit-resolution(th-lemma(Or(Not(i5(0) <=
                                        0),
                                        Not(i5(0) >= 1024))),
                                        unit-resolution(th-lemma(Or(Not(i5(0) ==
                                        0),
                                        i5(0) <= 0)),
                                        asserted(i5(0) == 0),
                                        i5(0) <= 0),
                                        Not(i5(0) >= 1024)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(i5(...) >= 1024,
                                        i5(...) == i5(...),
                                        ... + ... == -1)))),
                                        Or(Not(0 >= 0),
                                        If(i5(0) >= 1024,
                                        i5(1 + 0) == i5(0),
                                        i5(0) + -1*i5(...) ==
                                        -1)))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((...) ==
                                        ...),
                                        Not(...) == Not(...)),
                                        rewrite(Not(...) ==
                                        False),
                                        Not(... >= ...) ==
                                        False),
                                        monotonicity(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        (... == ...) ==
                                        (... == ...)),
                                        monotonicity(monotonicity(monotonicity(...,
                                        ...),
                                        ... == ...),
                                        (... == ...) ==
                                        (... == ...)),
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...) ==
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...)),
                                        Or(Not(... >= ...),
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...)) ==
                                        Or(False,
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...))),
                                        rewrite(Or(False,
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...)) ==
                                        If(i5(...) >= 1024,
                                        i5(...) == i5(...),
                                        ... + ... == -1)),
                                        Or(Not(0 >= 0),
                                        If(i5(...) >= 1024,
                                        i5(...) == i5(...),
                                        ... + ... == -1)) ==
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(...) + ...*... ==
                                        -1)),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(...),
                                        If(..., ..., ...)))),
                                        Or(Not(0 >= 0),
                                        If(i5(...) >= 1024,
                                        i5(...) == i5(...),
                                        ... + ... == -1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(...),
                                        If(..., ..., ...)))),
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(...) + ...*... ==
                                        -1))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(...),
                                        If(..., ..., ...)))),
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(...) + ...*... ==
                                        -1)) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(...),
                                        If(..., ..., ...)))),
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(...) + ...*... ==
                                        -1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(... >= ...),
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...)))),
                                        Or(Not(0 >= 0),
                                        If(i5(0) >= 1024,
                                        i5(... + ...) ==
                                        i5(0),
                                        i5(...) + ...*... ==
                                        -1))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(... >= ...),
                                        If(... >= ...,
                                        ... == ...,
                                        ... == ...)))),
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(0) + -1*i5(...) ==
                                        -1))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(i5(_n1) >= 1024,
                                        i5(... + ...) ==
                                        i5(_n1),
                                        i5(...) + ...*... ==
                                        -1)))),
                                        If(i5(0) >= 1024,
                                        i5(1) == i5(0),
                                        i5(0) + -1*i5(1) ==
                                        -1))),
                                        mp(mp(mp~(mp(asserted(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        i5(...) ==
                                        If(..., ..., ...)))),
                                        quant-intro(trans(monotonicity(monotonicity(monotonicity(...,
                                        ...),
                                        trans(..., ..., ...),
                                        (...) == (...)),
                                        Implies(..., ...) ==
                                        Implies(..., ...)),
                                        rewrite(Implies(...,
                                        ...) ==
                                        Or(..., ...)),
                                        Implies(... >= ...,
                                        ... == ...) ==
                                        Or(Not(...),
                                        ... == ...)),
                                        (ForAll(_n1,
                                        Implies(... >= ...,
                                        ... == ...))) ==
                                        (ForAll(_n1,
..., False]

Result 
Successfully Proved

