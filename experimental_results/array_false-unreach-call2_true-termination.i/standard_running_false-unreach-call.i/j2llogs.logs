
***********************
2017-05-14 13:10:48
***********************

Command--Translate 

Parameters--
 File Name--standard_partial_init_true-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i4(_n1 + 1)=i4(_n1) + 1,i4(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x6(_n2 + 1)=x6(_n2) + 1,x6(0)=x
 Closed Form Solution
_n2 + x

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x8(_n3 + 1)=x8(_n3) + 1,x8(0)=x
 Closed Form Solution
_n3 + x

***********************
2017-05-14 13:10:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(A, _x2, 0) ==
                           d1array(A, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(A, Var(0), 0) ==
                               d1array(A, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(A, Var(0), 0) ==
                          d1array(A, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(A, _x2, 0) ==
                               d1array(A, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(A, _x2, 0) ==
                          d1array(A, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(A, _x2, 0) == d1array(A, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(A, _x2, 0) ==
                               d1array(A, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(A,
                                        Var(0),
                                        0) ==
                                       d1array(A, Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(A, _x2, 0) ==
                                       d1array(A, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(A, _x2, 0) ==
                                   d1array(A, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(A, _x2, 0) ==
                              d1array(A, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(A, _x2, 0) == d1array(A, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:10:50
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(A, _x2, _k1 + 1)==d1array(A, _x2)),(d1array4(A, _x2, _k1 + 2)==d1array(A, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(A, _x2, _k1 + 1)==d1array(A, _x2)),(d1array4(A, _x2, _k1 + 2)==d1array(A, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(A, _x2, _k1 + 1)==d1array(A, _x2)),(d1array4(A, _x2, _k1 + 2)==d1array(A, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(A, _x2, _k1 + 1)==d1array(A, _x2)),(d1array4(A, _x2, _k1 + 2)==d1array(A, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(A,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(A, _x2),
                                        d1array4(A,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(A, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array4(A,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(A, Var(0))) ==
                                        (d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(A, Var(0))) ==
                                        (d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Implies(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        rewrite(Implies(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(A,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array4(A,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(A,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(A, Var(0))),
                                        d1array4(A,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(A,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(A, _x2),
                                        d1array4(A,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(A, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(A,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(A, _x2)),
                                        d1array4(A,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(A, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(A,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(A, _x2),
                                        d1array4(A,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(A, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(A,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(A, _x2)),
                                        d1array4(A,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(A, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array4(A,
                                        _x2,
                                        1 + _k1) ==
                                     d1array(A, _x2)),
                                 d1array4(A, _x2, 2 + _k1) ==
                                 d1array(A, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array4(A,
                                        _x2,
                                        1 + _k1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(A,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array4(A,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array4(A,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array4(A,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array4(A,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array4(A, _x2!2, 2 + _k1) ==
                            d1array4(A, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array4(A,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array4(A,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(A,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(A,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2)))

***********************
2017-05-14 13:10:52
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array4(C, j4(0), 1) == If(d1array4(A, 0, 0)==d1array4(B, 0, 0),0+0,d1array4(C, j4(0), 0))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array4(C, j4(0), 1) == If(d1array4(A, 0, 0)==d1array4(B, 0, 0),0+0,d1array4(C, j4(0), 0))

System try to prove 
d1array4(C, j4(0), 1) == If(d1array4(A, 0, 0)==d1array4(B, 0, 0),0+0,d1array4(C, j4(0), 0))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(d1array4(C, j4(0), 1) == If(d1array4(A, 0, 0)==d1array4(B, 0, 0),0+0,d1array4(C, j4(0), 0))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(Not(d1array4(C, j4(0), 1) ==
                If(d1array4(A, 0, 0) == d1array4(B, 0, 0),
                   0,
                   d1array4(C, j4(0), 0)))),
   monotonicity(monotonicity(monotonicity(asserted(j4(0) ==
                                        0),
                                        d1array4(C,
                                        j4(0),
                                        1) ==
                                        d1array4(C, 0, 1)),
                             monotonicity(monotonicity(asserted(j4(0) ==
                                        0),
                                        d1array4(C,
                                        j4(0),
                                        0) ==
                                        d1array4(C, 0, 0)),
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        0)) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0))),
                             (d1array4(C, j4(0), 1) ==
                              If(d1array4(A, 0, 0) ==
                                 d1array4(B, 0, 0),
                                 0,
                                 d1array4(C, j4(0), 0))) ==
                             (d1array4(C, 0, 1) ==
                              If(d1array4(A, 0, 0) ==
                                 d1array4(B, 0, 0),
                                 0,
                                 d1array4(C, 0, 0)))),
                Not(d1array4(C, j4(0), 1) ==
                    If(d1array4(A, 0, 0) ==
                       d1array4(B, 0, 0),
                       0,
                       d1array4(C, j4(0), 0))) ==
                Not(d1array4(C, 0, 1) ==
                    If(d1array4(A, 0, 0) ==
                       d1array4(B, 0, 0),
                       0,
                       d1array4(C, 0, 0)))),
   Not(d1array4(C, 0, 1) ==
       If(d1array4(A, 0, 0) == d1array4(B, 0, 0),
          0,
          d1array4(C, 0, 0)))), mp(unit-resolution(def-axiom(Or(d1array4(A, 0, 0) ==
                                d1array4(B, 0, 0),
                                If(d1array4(A, 0, 0) ==
                                   d1array4(B, 0, 0),
                                   0,
                                   d1array4(C, 0, 0)) ==
                                d1array4(C, 0, 0))),
                   lemma(unit-resolution(mp(asserted(Not(d1array4(C,
                                        j4(0),
                                        1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        0)))),
                                        monotonicity(monotonicity(monotonicity(asserted(j4(0) ==
                                        0),
                                        d1array4(C,
                                        j4(0),
                                        1) ==
                                        d1array4(C, 0, 1)),
                                        monotonicity(monotonicity(asserted(j4(0) ==
                                        0),
                                        d1array4(C,
                                        j4(0),
                                        0) ==
                                        d1array4(C, 0, 0)),
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        0)) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0))),
                                        (d1array4(C,
                                        j4(0),
                                        1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        0))) ==
                                        (d1array4(C, 0, 1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0)))),
                                        Not(d1array4(C,
                                        j4(0),
                                        1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        0))) ==
                                        Not(d1array4(C,
                                        0,
                                        1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0)))),
                                        Not(d1array4(C,
                                        0,
                                        1) ==
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0)))),
                                        mp(unit-resolution(def-axiom(Or(Not(d1array4(A,
                                        0,
                                        0) ==
                                        d1array4(B, 0, 0)),
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0)) ==
                                        0)),
                                        hypothesis(d1array4(A,
                                        0,
                                        0) ==
                                        d1array4(B, 0, 0)),
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        0,
                                        d1array4(C, 0, 0)) ==
                                        0),
                                        symm(trans(monotonicity(trans(monotonicity(symm(asserted(j4(0) ==
                                        0),
                                        0 == j4(0)),
                                        d1array4(C, 0, 1) ==
                                        d1array4(C,
                                        j4(0),
                                        1)),
                                        unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array4(A,
                                        0,
                                        0) ==
                                        d1array4(B, 0, 0),
                                        d1array4(C,
                                        j4(0),
                                        1) ==
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        1) ==
                                        d1array4(C,
                                        j4(0),
                                        0))),
                                        Not(d1array4(A,
                                        0,
                                        0) ==
                                        d1array4(B, 0, 0)),
                                        d1array4(C,
                                        j4(0),
                                        1) ==
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        _n1,
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...))))),
                                        Or(Not(0 >= 0),
                                        If(d1array4(A, 0, 0) ==
                                        d1array4(B, 0, 0),
                                        d1array4(C,
                                        j4(0),
                                        1 + 0) ==
                                        0,
                                        d1array4(C,
                                        j4(0),
                                        1 + 0) ==
                                        d1array4(C,
                                        j4(0),
                                        0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((...) ==
                                        ...),
                                        Not(...) == Not(...)),
                                        rewrite(Not(...) ==
                                        False),
                                        Not(... >= ...) ==
                                        False),
                                        monotonicity(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        (... == ...) ==
                                        (... == ...)),
                                        monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        (... == ...) ==
                                        (... == ...)),
                                        If(... == ...,
                                        ... == ...,
                                        ... == ...) ==
                                        If(... == ...,
                                        ... == ...,
                                        ... == ...)),
                                        Or(Not(... >= ...),
                                        If(... == ...,
                                        ... == ...,
                                        ... == ...)) ==
                                        Or(False,
                                        If(... == ...,
                                        ... == ...,
                                        ... == ...))),
                                        rewrite(Or(False,
                                        If(... == ...,
                                        ... == ...,
                                        ... == ...)) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        0,
                                        d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:10:54
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array4(C, j4(_k1), _k1 + 1)==If(d1array4(A, _k1, _k1)==d1array4(B, _k1, _k1),_k1,d1array4(C, j4(_k1), _k1))),(d1array4(C, j4(_k1 + 1), _k1 + 2)==If(d1array4(A, _k1 + 1, _k1 + 1)==d1array4(B, _k1 + 1, _k1 + 1),_k1 + 1,d1array4(C, j4(_k1 + 1), _k1 + 1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(C, j4(_k1), _k1 + 1)==If(d1array4(A, _k1, _k1)==d1array4(B, _k1, _k1),_k1,d1array4(C, j4(_k1), _k1))),(d1array4(C, j4(_k1 + 1), _k1 + 2)==If(d1array4(A, _k1 + 1, _k1 + 1)==d1array4(B, _k1 + 1, _k1 + 1),_k1 + 1,d1array4(C, j4(_k1 + 1), _k1 + 1))))

System try to prove 
Implies((d1array4(C, j4(_k1), _k1 + 1)==If(d1array4(A, _k1, _k1)==d1array4(B, _k1, _k1),_k1,d1array4(C, j4(_k1), _k1))),(d1array4(C, j4(_k1 + 1), _k1 + 2)==If(d1array4(A, _k1 + 1, _k1 + 1)==d1array4(B, _k1 + 1, _k1 + 1),_k1 + 1,d1array4(C, j4(_k1 + 1), _k1 + 1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array4(C, j4(_k1), _k1 + 1)==If(d1array4(A, _k1, _k1)==d1array4(B, _k1, _k1),_k1,d1array4(C, j4(_k1), _k1))),(d1array4(C, j4(_k1 + 1), _k1 + 2)==If(d1array4(A, _k1 + 1, _k1 + 1)==d1array4(B, _k1 + 1, _k1 + 1),_k1 + 1,d1array4(C, j4(_k1 + 1), _k1 + 1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp(asserted(Not(Implies(d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                    If(d1array4(A, _k1, _k1) ==
                                       d1array4(B, _k1, _k1),
                                       _k1,
                                       d1array4(C,
                                        j4(_k1),
                                        _k1)),
                                    d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                    If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                       d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                       _k1 + 1,
                                       d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1))))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        d1array4(C,
                                        j4(_k1),
                                        1 + _k1)),
                                        (d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1))) ==
                                        (d1array4(C,
                                        j4(_k1),
                                        1 + _k1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1)))),
                                        monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        j4(_k1 + 1) ==
                                        j4(1 + _k1)),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        d1array4(C,
                                        j4(1 + _k1),
                                        2 + _k1)),
                                        monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(A,
                                        1 + _k1,
                                        1 + _k1)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1)),
                                        (d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1)) ==
                                        (d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1))),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        j4(_k1 + 1) ==
                                        j4(1 + _k1)),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1) ==
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1)),
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1)) ==
                                        If(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                        1 + _k1,
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1))),
                                        (d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1))) ==
                                        (d1array4(C,
                                        j4(1 + _k1),
                                        2 + _k1) ==
                                        If(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                        1 + _k1,
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1)))),
                                        Implies(d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1)),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1))) ==
                                        Implies(d1array4(C,
                                        j4(_k1),
                                        1 + _k1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
..., mp(unit-resolution(def-axiom(Or(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                If(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                   d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                   1 + _k1,
                                   d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1)) ==
                                d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1))),
                   lemma(unit-resolution(not-or-elim(mp(asserted(Not(Implies(d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1)),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1))))),
                                        monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        d1array4(C,
                                        j4(_k1),
                                        1 + _k1)),
                                        (d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1))) ==
                                        (d1array4(C,
                                        j4(_k1),
                                        1 + _k1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
                                        _k1)))),
                                        monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        j4(_k1 + 1) ==
                                        j4(1 + _k1)),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        d1array4(C,
                                        j4(1 + _k1),
                                        2 + _k1)),
                                        monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(A,
                                        1 + _k1,
                                        1 + _k1)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1)),
                                        (d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1)) ==
                                        (d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1))),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        j4(_k1 + 1) ==
                                        j4(1 + _k1)),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1) ==
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1)),
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1)) ==
                                        If(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                        1 + _k1,
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1))),
                                        (d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 2) ==
                                        If(d1array4(A,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array4(B,
                                        _k1 + 1,
                                        _k1 + 1),
                                        _k1 + 1,
                                        d1array4(C,
                                        j4(_k1 + 1),
                                        _k1 + 1))) ==
                                        (d1array4(C,
                                        j4(1 + _k1),
                                        2 + _k1) ==
                                        If(d1array4(A,
                                        1 + _k1,
                                        1 + _k1) ==
                                        d1array4(B,
                                        1 + _k1,
                                        1 + _k1),
                                        1 + _k1,
                                        d1array4(C,
                                        j4(1 + _k1),
                                        1 + _k1)))),
                                        Implies(d1array4(C,
                                        j4(_k1),
                                        _k1 + 1) ==
                                        If(d1array4(A,
                                        _k1,
                                        _k1) ==
                                        d1array4(B,
                                        _k1,
                                        _k1),
                                        _k1,
                                        d1array4(C,
                                        j4(_k1),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:10:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(C, j4(_k1), _k1 + 1)==If(d1array4(A, _k1, _k1)==d1array4(B, _k1, _k1),_k1,d1array4(C, j4(_k1), _k1))),(d1array4(C, j4(_k1 + 1), _k1 + 2)==If(d1array4(A, _k1 + 1, _k1 + 1)==d1array4(B, _k1 + 1, _k1 + 1),_k1 + 1,d1array4(C, j4(_k1 + 1), _k1 + 1))))

System try to prove 
Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(j1 == j4(_N1))
_s.add(i1 == _N1)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(A, _x2) == d1array8(A, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(C, _x2) == d1array8(C, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(B, _x2) == d1array8(B, _x2, _N3))))
_s.add(main == 0)
_s.add(x1 == _N3)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(_n1),
                                        _n1 + 1) ==
                                        If(d1array4(A,
                                        _n1,
                                        _n1) ==
                                        d1array4(B,
                                        _n1,
                                        _n1),
                                        _n1,
                                        d1array4(C,
                                        j4(_n1),
                                        _n1)))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(_n1),
                                        _n1 + 1) ==
                                        If(d1array4(A,
                                        _n1,
                                        _n1) ==
                                        d1array4(B,
                                        _n1,
                                        _n1),
                                        _n1,
                                        d1array4(C,
                                        j4(_n1),
                                        _n1))))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0))),
                                        (d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0)))) ==
                                        (d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0))))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0)))) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0))))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0)))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0))))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0)))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
..., mp(unit-resolution(def-axiom(Or(d1array4(A, _n1!2, _n1!2) ==
                                d1array4(B, _n1!2, _n1!2),
                                d1array4(C,
                                        j4(_n1!2),
                                        _n1!2) ==
                                If(d1array4(A, _n1!2, _n1!2) ==
                                   d1array4(B, _n1!2, _n1!2),
                                   _n1!2,
                                   d1array4(C,
                                        j4(_n1!2),
                                        _n1!2)))),
                   lemma(unit-resolution(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(_n1),
                                        _n1 + 1) ==
                                        If(d1array4(A,
                                        _n1,
                                        _n1) ==
                                        d1array4(B,
                                        _n1,
                                        _n1),
                                        _n1,
                                        d1array4(C,
                                        j4(_n1),
                                        _n1)))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(_n1),
                                        _n1 + 1) ==
                                        If(d1array4(A,
                                        _n1,
                                        _n1) ==
                                        d1array4(B,
                                        _n1,
                                        _n1),
                                        _n1,
                                        d1array4(C,
                                        j4(_n1),
                                        _n1))))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0))),
                                        (d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0)))) ==
                                        (d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0))))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0)))) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0))))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0)))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        d1array4(C,
                                        j4(Var(0)),
                                        1 + Var(0)) ==
                                        If(d1array4(...,
                                        ...,
                                        ...) ==
                                        d1array4(...,
                                        ...,
                                        ...),
                                        Var(0),
                                        d1array4(C,
                                        j4(...),
                                        Var(0))))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0) + 1) ==
                                        If(d1array4(A,
                                        Var(0),
                                        Var(0)) ==
                                        d1array4(B,
                                        Var(0),
                                        Var(0)),
                                        Var(0),
                                        d1array4(C,
                                        j4(Var(0)),
                                        Var(0)))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))

***********************
2017-05-14 13:11:04
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(B, _x2, 0) ==
                           d1array(B, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(B, Var(0), 0) ==
                               d1array(B, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(B, Var(0), 0) ==
                          d1array(B, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(B, _x2, 0) ==
                               d1array(B, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(B, _x2, 0) ==
                          d1array(B, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(B, _x2, 0) == d1array(B, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(B, _x2, 0) ==
                               d1array(B, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(B,
                                        Var(0),
                                        0) ==
                                        d1array(B, Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(B,
                                        Var(0),
                                        0) ==
                                       d1array(B, Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(B, _x2, 0) ==
                                        d1array(B, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(B, _x2, 0) ==
                                       d1array(B, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(B, _x2, 0) ==
                                   d1array(B, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(B, _x2, 0) ==
                              d1array(B, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(B, _x2, 0) == d1array(B, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:11:04
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(B, _x2, _k1 + 1)==d1array(B, _x2)),(d1array4(B, _x2, _k1 + 2)==d1array(B, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(B, _x2, _k1 + 1)==d1array(B, _x2)),(d1array4(B, _x2, _k1 + 2)==d1array(B, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(B, _x2, _k1 + 1)==d1array(B, _x2)),(d1array4(B, _x2, _k1 + 2)==d1array(B, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _x2, _n1 + 1) == d1array4(A, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(C, j4(_n1), _n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),_n1,d1array4(C, j4(_n1), _n1)))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(B, _x2, _n1 + 1) == d1array4(B, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,j4(_n1 + 1) == If(d1array4(A, _n1, _n1)==d1array4(B, _n1, _n1),j4(_n1) + 1,j4(_n1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(C, _x2, 0) == d1array(C, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, 0) == d1array(B, _x2))))
_s.add(j4(0) == 0)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(B, _x2, _k1 + 1)==d1array(B, _x2)),(d1array4(B, _x2, _k1 + 2)==d1array(B, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(B,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(B, _x2),
                                        d1array4(B,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(B, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array4(B,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(B, Var(0))) ==
                                        (d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(B, Var(0))) ==
                                        (d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        Implies(d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(B, Var(0))) ==
                                        Implies(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        rewrite(Implies(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        Implies(d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(B, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(B,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array4(B,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(B, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(B,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(B, Var(0))),
                                        d1array4(B,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(B, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(B,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(B, _x2),
                                        d1array4(B,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(B, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(B,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(B, _x2)),
                                        d1array4(B,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(B, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(B,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(B, _x2),
                                        d1array4(B,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(B, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(B,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(B, _x2)),
                                        d1array4(B,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(B, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array4(B,
                                        _x2,
                                        1 + _k1) ==
                                     d1array(B, _x2)),
                                 d1array4(B, _x2, 2 + _k1) ==
                                 d1array(B, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array4(B,
                                        _x2,
                                        1 + _k1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(B,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array4(B,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array4(B,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array4(B,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array4(B,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array4(B, _x2!2, 2 + _k1) ==
                            d1array4(B, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array4(B,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array4(B,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(B,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(B,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(B,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2)))

***********************
2017-05-14 13:11:06
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array(A, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array(A, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array(A, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(A, _x2, _n2 + 1) == d1array6(A, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(C, _x2, _n2 + 1) == d1array6(C, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(B, _x2, _n2 + 1) == d1array6(B, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array4(A, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(C, _x2, 0) == d1array4(C, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array4(B, _x2, _N1))))
_s.add(_N2 >= j4(_N1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < j4(_N1))))
_s.add(Or(_N2==0,_N2 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array(A, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array6(A, _x2, 0) ==
                                 d1array(A, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array6(A, _x2, 0) ==
                                   d1array(A, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array6(A, _x2!2, 0) ==
                            d1array(A, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array6(A, _x2!2, 0) ==
                       d1array(A, _x2!2)))),
            Not(d1array6(A, _x2!2, 0) == d1array(A, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array6(A,
                                        _x2!2,
                                        0) ==
                                        d1array4(A,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array6(A, _x2!2, 0) ==
                                       d1array4(A,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array6(A, _x2!2, 0) ==
                                    d1array4(A, _x2!2, _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array6(A, _x2!2, 0) ==
                            d1array4(A, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array6(A, _x2, 0) ==
                                       d1array4(A, _x2, _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array4(A,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array4(A,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array6(A, _x2, 0) ==
                                   d1array4(A, _x2, _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                      sk(~(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A, _x2, 0) ==
                                        d1array(A, _x2)))),
                                        Not(Or(Not(_x2!2 >=
                                        0),
                                        d1array6(A,
                                        _x2!2,
                                        0) ==
                                        d1array(A, _x2!2))))),
                                      Not(Or(Not(_x2!2 >= 0),
                                        d1array6(A,
                                        _x2!2,
                                        0) ==
                                        d1array(A, _x2!2)))),
                                  _x2!2 >= 0),
                      d1array6(A, _x2!2, 0) ==
                      d1array4(A, _x2!2, _N1)),
      unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(A,
                                        _x2,
                                        _N1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:11:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array6(A, _x2, _k2 + 1)==d1array(A, _x2)),(d1array6(A, _x2, _k2 + 2)==d1array(A, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array6(A, _x2, _k2 + 1)==d1array(A, _x2)),(d1array6(A, _x2, _k2 + 2)==d1array(A, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array6(A, _x2, _k2 + 1)==d1array(A, _x2)),(d1array6(A, _x2, _k2 + 2)==d1array(A, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(A, _x2, _n2 + 1) == d1array6(A, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(C, _x2, _n2 + 1) == d1array6(C, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(B, _x2, _n2 + 1) == d1array6(B, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array4(A, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(C, _x2, 0) == d1array4(C, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array4(B, _x2, _N1))))
_s.add(_N2 >= j4(_N1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < j4(_N1))))
_s.add(Or(_N2==0,_N2 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array6(A, _x2, _k2 + 1)==d1array(A, _x2)),(d1array6(A, _x2, _k2 + 2)==d1array(A, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array6(A,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(A, _x2),
                                        d1array6(A,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(A, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array6(A,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(A, Var(0))) ==
                                        (d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(A, Var(0))) ==
                                        (d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Implies(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        rewrite(Implies(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array6(A,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array6(A,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array6(A,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(A, Var(0))),
                                        d1array6(A,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array6(A,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(A, _x2),
                                        d1array6(A,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(A, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array6(A,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(A, _x2)),
                                        d1array6(A,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(A, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array6(A,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(A, _x2),
                                        d1array6(A,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(A, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array6(A,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(A, _x2)),
                                        d1array6(A,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(A, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array6(A,
                                        _x2,
                                        1 + _k2) ==
                                     d1array(A, _x2)),
                                 d1array6(A, _x2, 2 + _k2) ==
                                 d1array(A, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array6(A,
                                        _x2,
                                        1 + _k2) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(A,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array6(A,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array6(A,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array6(A,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array6(A,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array6(A, _x2!2, 2 + _k2) ==
                            d1array6(A, _x2!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array6(A,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(A,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array6(A,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array6(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2)))

***********************
2017-05-14 13:11:08
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array6(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array6(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))

System try to prove 
ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array6(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(A, _x2, _n2 + 1) == d1array6(A, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(C, _x2, _n2 + 1) == d1array6(C, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(B, _x2, _n2 + 1) == d1array6(B, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array4(A, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(C, _x2, 0) == d1array4(C, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array4(B, _x2, _N1))))
_s.add(_N2 >= j4(_N1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < j4(_N1))))
_s.add(Or(_N2==0,_N2 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array6(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 13:13:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array(B, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array(B, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array(B, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(A, _x2, _n2 + 1) == d1array6(A, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(C, _x2, _n2 + 1) == d1array6(C, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(B, _x2, _n2 + 1) == d1array6(B, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array4(A, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(C, _x2, 0) == d1array4(C, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array4(B, _x2, _N1))))
_s.add(_N2 >= j4(_N1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < j4(_N1))))
_s.add(Or(_N2==0,_N2 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array(B, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array(B, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array6(B, _x2, 0) ==
                                 d1array(B, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array6(B, _x2, 0) ==
                                   d1array(B, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array6(B, _x2!2, 0) ==
                            d1array(B, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array6(B, _x2!2, 0) ==
                       d1array(B, _x2!2)))),
            Not(d1array6(B, _x2!2, 0) == d1array(B, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array6(B,
                                        _x2!2,
                                        0) ==
                                        d1array4(B,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array6(B, _x2!2, 0) ==
                                       d1array4(B,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array6(B, _x2!2, 0) ==
                                    d1array4(B, _x2!2, _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array6(B, _x2!2, 0) ==
                            d1array4(B, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array6(B, _x2, 0) ==
                                       d1array4(B, _x2, _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array4(B,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array4(B,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array6(B, _x2, 0) ==
                                   d1array4(B, _x2, _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array6(B,
                                        Var(0),
                                        0) ==
                                        d1array(B, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                                        Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2)))) ==
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2))))),
                                      sk(~(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(B, _x2, 0) ==
                                        d1array(B, _x2)))),
                                        Not(Or(Not(_x2!2 >=
                                        0),
                                        d1array6(B,
                                        _x2!2,
                                        0) ==
                                        d1array(B, _x2!2))))),
                                      Not(Or(Not(_x2!2 >= 0),
                                        d1array6(B,
                                        _x2!2,
                                        0) ==
                                        d1array(B, _x2!2)))),
                                  _x2!2 >= 0),
                      d1array6(B, _x2!2, 0) ==
                      d1array4(B, _x2!2, _N1)),
      unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(B,
                                        _x2,
                                        _N1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:13:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array6(B, _x2, _k2 + 1)==d1array(B, _x2)),(d1array6(B, _x2, _k2 + 2)==d1array(B, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array6(B, _x2, _k2 + 1)==d1array(B, _x2)),(d1array6(B, _x2, _k2 + 2)==d1array(B, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array6(B, _x2, _k2 + 1)==d1array(B, _x2)),(d1array6(B, _x2, _k2 + 2)==d1array(B, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(A, _x2, _n2 + 1) == d1array6(A, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(C, _x2, _n2 + 1) == d1array6(C, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array6(B, _x2, _n2 + 1) == d1array6(B, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, 0) == d1array4(A, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(C, _x2, 0) == d1array4(C, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, 0) == d1array4(B, _x2, _N1))))
_s.add(_N2 >= j4(_N1))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < j4(_N1))))
_s.add(Or(_N2==0,_N2 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array6(B, _x2, _k2 + 1)==d1array(B, _x2)),(d1array6(B, _x2, _k2 + 2)==d1array(B, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array6(B,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(B, _x2),
                                        d1array6(B,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(B, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array6(B,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(B, Var(0))) ==
                                        (d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(B, Var(0))) ==
                                        (d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        Implies(d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(B, Var(0))) ==
                                        Implies(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        rewrite(Implies(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        Implies(d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(B, Var(0))) ==
                                        Or(Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(B, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array6(B,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(B, Var(0)),
                                        d1array6(B,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(B, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array6(B,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(B, Var(0))),
                                        d1array6(B,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(B, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array6(B,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(B, _x2),
                                        d1array6(B,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(B, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array6(B,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(B, _x2)),
                                        d1array6(B,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(B, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array6(B,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(B, _x2),
                                        d1array6(B,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(B, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array6(B,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(B, _x2)),
                                        d1array6(B,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(B, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array6(B,
                                        _x2,
                                        1 + _k2) ==
                                     d1array(B, _x2)),
                                 d1array6(B, _x2, 2 + _k2) ==
                                 d1array(B, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array6(B,
                                        _x2,
                                        1 + _k2) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array6(B,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array6(B,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array6(B,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array6(B,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array6(B,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        1 + _n2) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array6(B, _x2!2, 2 + _k2) ==
                            d1array6(B, _x2!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array6(B,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array6(B,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array6(B,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array6(B,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array6(B,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, _N2) == d1array(B, _x2)))

***********************
2017-05-14 13:13:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array(A, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array(A, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array(A, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(A, _x2, _n3 + 1) == d1array8(A, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(C, _x2, _n3 + 1) == d1array8(C, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(B, _x2, _n3 + 1) == d1array8(B, _x2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array6(A, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(C, _x2, 0) == d1array6(C, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(B, _x2, 0) == d1array6(B, _x2, _N2))))
_s.add(_N3 >= j4(_N1))
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < j4(_N1))))
_s.add(Or(_N3==0,_N3 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, _N2) == d1array(B, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array(A, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array8(A, _x2, 0) ==
                                 d1array(A, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array8(A, _x2, 0) ==
                                   d1array(A, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array8(A, _x2!2, 0) ==
                            d1array(A, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array8(A, _x2!2, 0) ==
                       d1array(A, _x2!2)))),
            Not(d1array8(A, _x2!2, 0) == d1array(A, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array8(A,
                                        _x2!2,
                                        0) ==
                                        d1array6(A,
                                        _x2!2,
                                        _N2)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array8(A, _x2!2, 0) ==
                                       d1array6(A,
                                        _x2!2,
                                        _N2))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                                    Not(_x2!2 >= 0),
                                    d1array8(A, _x2!2, 0) ==
                                    d1array6(A, _x2!2, _N2))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                            Not(_x2!2 >= 0),
                            d1array8(A, _x2!2, 0) ==
                            d1array6(A, _x2!2, _N2))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2)),
                                        Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array8(A, _x2, 0) ==
                                       d1array6(A, _x2, _N2)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array6(A,
                                        Var(0),
                                        _N2))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array6(A,
                                        _x2,
                                        _N2))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array8(A, _x2, 0) ==
                                   d1array6(A, _x2, _N2)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array8(A,
                                        Var(0),
                                        0) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2)))) ==
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2))))),
                                      sk(~(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array8(A, _x2, 0) ==
                                        d1array(A, _x2)))),
                                        Not(Or(Not(_x2!2 >=
                                        0),
                                        d1array8(A,
                                        _x2!2,
                                        0) ==
                                        d1array(A, _x2!2))))),
                                      Not(Or(Not(_x2!2 >= 0),
                                        d1array8(A,
                                        _x2!2,
                                        0) ==
                                        d1array(A, _x2!2)))),
                                  _x2!2 >= 0),
                      d1array8(A, _x2!2, 0) ==
                      d1array6(A, _x2!2, _N2)),
      unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array6(A,
                                        _x2,
                                        _N2) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:13:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array8(A, _x2, _k3 + 1)==d1array(A, _x2)),(d1array8(A, _x2, _k3 + 2)==d1array(A, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array8(A, _x2, _k3 + 1)==d1array(A, _x2)),(d1array8(A, _x2, _k3 + 2)==d1array(A, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array8(A, _x2, _k3 + 1)==d1array(A, _x2)),(d1array8(A, _x2, _k3 + 2)==d1array(A, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(A, _x2, _n3 + 1) == d1array8(A, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(C, _x2, _n3 + 1) == d1array8(C, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(B, _x2, _n3 + 1) == d1array8(B, _x2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array6(A, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(C, _x2, 0) == d1array6(C, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(B, _x2, 0) == d1array6(B, _x2, _N2))))
_s.add(_N3 >= j4(_N1))
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < j4(_N1))))
_s.add(Or(_N3==0,_N3 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, _N2) == d1array(B, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array8(A, _x2, _k3 + 1)==d1array(A, _x2)),(d1array8(A, _x2, _k3 + 2)==d1array(A, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array8(A,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(A, _x2),
                                        d1array8(A,
                                        _x2,
                                        _k3 + 2) ==
                                        d1array(A, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array8(A,
                                        Var(0),
                                        1 + _k3)),
                                        (d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(A, Var(0))) ==
                                        (d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3)),
                                        (d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array(A, Var(0))) ==
                                        (d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Implies(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        rewrite(Implies(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        Implies(d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array(A, Var(0))) ==
                                        Or(Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array8(A,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(A, Var(0)),
                                        d1array8(A,
                                        Var(0),
                                        _k3 + 2) ==
                                        d1array(A, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array8(A,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(A, Var(0))),
                                        d1array8(A,
                                        Var(0),
                                        2 + _k3) ==
                                        d1array(A, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array8(A,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(A, _x2),
                                        d1array8(A,
                                        _x2,
                                        _k3 + 2) ==
                                        d1array(A, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array8(A,
                                        _x2,
                                        1 + _k3) ==
                                        d1array(A, _x2)),
                                        d1array8(A,
                                        _x2,
                                        2 + _k3) ==
                                        d1array(A, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array8(A,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(A, _x2),
                                        d1array8(A,
                                        _x2,
                                        _k3 + 2) ==
                                        d1array(A, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array8(A,
                                        _x2,
                                        1 + _k3) ==
                                        d1array(A, _x2)),
                                        d1array8(A,
                                        _x2,
                                        2 + _k3) ==
                                        d1array(A, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array8(A,
                                        _x2,
                                        1 + _k3) ==
                                     d1array(A, _x2)),
                                 d1array8(A, _x2, 2 + _k3) ==
                                 d1array(A, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array8(A,
                                        _x2,
                                        1 + _k3) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        2 + _k3)),
                                        (d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3)) ==
                                        (d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= -1),
                                        d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3))),
                                        Or(Not(ForAll([_x2,
                                        _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3))) ==
                                        Or(Not(ForAll([_x2,
                                        _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= -1),
                                        d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= -1),
                                        d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3))) ==
                                       Or(Not(ForAll([_x2,
                                        _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k3 >= -1),
                                        d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                        d1array8(A,
                                        _x2!2,
                                        1 + _k3))),
                               Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k3 >= 0),
                                     d1array8(A,
                                        _x2!2,
                                        1 + 1 + _k3) ==
                                     d1array8(A,
                                        _x2!2,
                                        1 + _k3))) ==
                               Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k3 >= -1),
                                  d1array8(A,
                                        _x2!2,
                                        2 + _k3) ==
                                  d1array8(A,
                                        _x2!2,
                                        1 + _k3))),
                         Or(Not(ForAll([_x2, _n3],
                                       Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        1 + _n3) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                            Not(_x2!2 >= 0),
                            Not(_k3 >= -1),
                            d1array8(A, _x2!2, 2 + _k3) ==
                            d1array8(A, _x2!2, 1 + _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array8(A,
                                        _x2,
                                        _n3 + 1) ==
                                        d1array8(A,
                                        _x2,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array8(A,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array8(A,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array8(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, _N3) == d1array(A, _x2)))

***********************
2017-05-14 13:13:14
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array8(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array8(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))

System try to prove 
ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array8(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j4=Function('j4',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Const('_N1',IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
B1=Const('B1',arraySort)
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array8=Function('d1array8',arraySort,IntSort(),IntSort(),IntSort())
d1array6=Function('d1array6',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(A, _x2, _n3 + 1) == d1array8(A, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(C, _x2, _n3 + 1) == d1array8(C, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array8(B, _x2, _n3 + 1) == d1array8(B, _x2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, 0) == d1array6(A, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(C, _x2, 0) == d1array6(C, _x2, _N2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(B, _x2, 0) == d1array6(B, _x2, _N2))))
_s.add(_N3 >= j4(_N1))
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < j4(_N1))))
_s.add(Or(_N3==0,_N3 - 1 < j4(_N1)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, _N1) == d1array(A, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(C, j4(_n1), _N1) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(B, _x2, _N1) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(A, _x2, _N2) == d1array(A, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array6(B, _x2, _N2) == d1array(B, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array8(A, _x2, _N3) == d1array(A, _x2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array8(C, j4(_n1), 0) == If(d1array4(A, _n1, _N1)==d1array4(B, _n1, _N1),_n1,d1array4(C, _x2, _N1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_partial_init_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_partial_init_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

***********************
2017-05-14 13:15:47
***********************

Command--Translate 

Parameters--
 File Name--standard_reverse_true-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i2(_n1 + 1)=i2(_n1) + 1,i2(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x4(_n2 + 1)=x4(_n2) + 1,x4(0)=x
 Closed Form Solution
_n2 + x

***********************
2017-05-14 13:15:48
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a, _x2, _n1 + 1) == d1array2(a, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(b, _n1, _n1 + 1) == d1array2(a, -_n1 + 99999, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b, _x2, 0) == d1array(b, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array2(a, _x2, 0) ==
                           d1array(a, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array2(a, Var(0), 0) ==
                               d1array(a, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array2(a, Var(0), 0) ==
                          d1array(a, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array2(a, _x2, 0) ==
                               d1array(a, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array2(a, _x2, 0) ==
                          d1array(a, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array2(a, _x2, 0) == d1array(a, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array2(a, _x2, 0) ==
                               d1array(a, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array2(a,
                                        Var(0),
                                        0) ==
                                        d1array(a, Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a,
                                        Var(0),
                                        0) ==
                                       d1array(a, Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array2(a, _x2, 0) ==
                                        d1array(a, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array2(a, _x2, 0) ==
                                       d1array(a, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array2(a, _x2, 0) ==
                                   d1array(a, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array2(a, _x2, 0) ==
                              d1array(a, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array2(a, _x2, 0) == d1array(a, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:15:48
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a, _x2, _k1 + 1)==d1array(a, _x2)),(d1array2(a, _x2, _k1 + 2)==d1array(a, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a, _x2, _k1 + 1)==d1array(a, _x2)),(d1array2(a, _x2, _k1 + 2)==d1array(a, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a, _x2, _k1 + 1)==d1array(a, _x2)),(d1array2(a, _x2, _k1 + 2)==d1array(a, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a, _x2, _n1 + 1) == d1array2(a, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(b, _n1, _n1 + 1) == d1array2(a, -_n1 + 99999, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b, _x2, 0) == d1array(b, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a, _x2, _k1 + 1)==d1array(a, _x2)),(d1array2(a, _x2, _k1 + 2)==d1array(a, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array2(a,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(a, _x2),
                                        d1array2(a,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(a, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array2(a,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a, Var(0))) ==
                                        (d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a, Var(0))) ==
                                        (d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        Implies(d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a, Var(0))) ==
                                        Implies(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        rewrite(Implies(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        Implies(d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array2(a,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array2(a,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array2(a,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a, Var(0))),
                                        d1array2(a,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array2(a,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(a, _x2),
                                        d1array2(a,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(a, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array2(a,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(a, _x2)),
                                        d1array2(a,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(a, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array2(a,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(a, _x2),
                                        d1array2(a,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(a, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array2(a,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(a, _x2)),
                                        d1array2(a,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(a, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array2(a,
                                        _x2,
                                        1 + _k1) ==
                                     d1array(a, _x2)),
                                 d1array2(a, _x2, 2 + _k1) ==
                                 d1array(a, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array2(a,
                                        _x2,
                                        1 + _k1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array2(a,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array2(a,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array2(a,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array2(a,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array2(a, _x2!2, 2 + _k1) ==
                            d1array2(a, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array2(a,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array2(a,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array2(a,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2)))

***********************
2017-05-14 13:15:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array2(b, 0, 1) == d1array2(a, 99999, 0)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array2(b, 0, 1) == d1array2(a, 99999, 0)

System try to prove 
d1array2(b, 0, 1) == d1array2(a, 99999, 0)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a, _x2, _n1 + 1) == d1array2(a, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(b, _n1, _n1 + 1) == d1array2(a, -_n1 + 99999, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b, _x2, 0) == d1array(b, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(Not(d1array2(b, 0, 1) == d1array2(a, 99999, 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(b, _n1, 1 + _n1) ==
                               d1array2(a,
                                        99999 + -1*_n1,
                                        _n1)))),
                 Or(Not(0 >= 0),
                    d1array2(b, 0, 1 + 0) ==
                    d1array2(a, 99999 + -1*0, 0)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array2(b,
                                        0,
                                        1 + 0) ==
                                        d1array2(b, 0, 1)),
                                        monotonicity(trans(monotonicity(rewrite(-1*
                                        0 ==
                                        0),
                                        99999 + -1*0 ==
                                        99999 + 0),
                                        rewrite(99999 + 0 ==
                                        99999),
                                        99999 + -1*0 ==
                                        99999),
                                        d1array2(a,
                                        99999 + -1*0,
                                        0) ==
                                        d1array2(a,
                                        99999,
                                        0)),
                                        (d1array2(b,
                                        0,
                                        1 + 0) ==
                                        d1array2(a,
                                        99999 + -1*0,
                                        0)) ==
                                        (d1array2(b, 0, 1) ==
                                        d1array2(a,
                                        99999,
                                        0))),
                                        Or(Not(0 >= 0),
                                        d1array2(b,
                                        0,
                                        1 + 0) ==
                                        d1array2(a,
                                        99999 + -1*0,
                                        0)) ==
                                        Or(False,
                                        d1array2(b, 0, 1) ==
                                        d1array2(a,
                                        99999,
                                        0))),
                            rewrite(Or(False,
                                       d1array2(b, 0, 1) ==
                                       d1array2(a, 99999, 0)) ==
                                    (d1array2(b, 0, 1) ==
                                     d1array2(a, 99999, 0))),
                            Or(Not(0 >= 0),
                               d1array2(b, 0, 1 + 0) ==
                               d1array2(a, 99999 + -1*0, 0)) ==
                            (d1array2(b, 0, 1) ==
                             d1array2(a, 99999, 0))),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(b,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a,
                                        99999 + -1*_n1,
                                        _n1)))),
                         Or(Not(0 >= 0),
                            d1array2(b, 0, 1 + 0) ==
                            d1array2(a, 99999 + -1*0, 0))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(b,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a,
                                        99999 + -1*_n1,
                                        _n1)))),
                         d1array2(b, 0, 1) ==
                         d1array2(a, 99999, 0))),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(b, _n1, 1 + _n1) ==
                                  d1array2(a,
                                        99999 + -1*_n1,
                                        _n1)))),
                    d1array2(b, 0, 1) ==
                    d1array2(a, 99999, 0)) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(b, _n1, 1 + _n1) ==
                                  d1array2(a,
                                        99999 + -1*_n1,
                                        _n1)))),
                    d1array2(b, 0, 1) ==
                    d1array2(a, 99999, 0))),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(b, _n1, 1 + _n1) ==
                          d1array2(a, 99999 + -1*_n1, _n1)))),
            Or(Not(0 >= 0),
               d1array2(b, 0, 1 + 0) ==
               d1array2(a, 99999 + -1*0, 0))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(b, _n1, 1 + _n1) ==
                          d1array2(a, 99999 + -1*_n1, _n1)))),
            d1array2(b, 0, 1) == d1array2(a, 99999, 0))),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(b, _n1, 1 + _n1) ==
                    d1array2(a, 99999 + -1*_n1, _n1)))),
      d1array2(b, 0, 1) == d1array2(a, 99999, 0))), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(b, _n1, _n1 + 1) ==
                                  d1array2(a,
                                        -_n1 + 99999,
                                        _n1)))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(b,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(b,
                                        Var(0),
                                        1 + Var(0))),
                                        monotonicity(trans(monotonicity(rewrite(-Var(0) ==
                                        -1*Var(0)),
                                        -Var(0) + 99999 ==
                                        -1*Var(0) + 99999),
                                        rewrite(-1*Var(0) +
                                        99999 ==
                                        99999 + -1*Var(0)),
                                        -Var(0) + 99999 ==
                                        99999 + -1*Var(0)),
                                        d1array2(a,
                                        -Var(0) + 99999,
                                        Var(0)) ==
                                        d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0))),
                                        (d1array2(b,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        -Var(0) + 99999,
                                        Var(0))) ==
                                        (d1array2(b,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        d1array2(b,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a,
                                        -Var(0) + 99999,
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(b,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0)))),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(b,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(b,
                                        Var(0),
                                        1 + Var(0)) ==
                                       d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0)))),
                            Implies(Var(0) >= 0,
                                    d1array2(b,
                                        Var(0),
                                        Var(0) + 1) ==
                                    d1array2(a,
                                        -Var(0) + 99999,
                                        Var(0))) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(b,
                                        Var(0),
                                        1 + Var(0)) ==
                               d1array2(a,
                                        99999 + -1*Var(0),
                                        Var(0)))),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(b,
                                        _n1,
                                        _n1 + 1) ==
                                      d1array2(a,
                                        -_n1 + 99999,
                                        _n1)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(b, _n1, 1 + _n1) ==
                                 d1array2(a,
                                        99999 + -1*_n1,
                                        _n1))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(b, _n1, 1 + _n1) ==
                    d1array2(a, 99999 + -1*_n1, _n1)))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(b, Var(0), 1 + Var(0)) ==
                         d1array2(a,
                                  99999 + -1*Var(0),
                                  Var(0))),
                      Or(Not(Var(0) >= 0),
                         d1array2(b, Var(0), 1 + Var(0)) ==
                         d1array2(a,
                                  99999 + -1*Var(0),
                                  Var(0))))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(b, _n1, 1 + _n1) ==
                           d1array2(a, 99999 + -1*_n1, _n1))),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(b, _n1, 1 + _n1) ==
                           d1array2(a, 99999 + -1*_n1, _n1))))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(b, _n1, 1 + _n1) ==
                 d1array2(a, 99999 + -1*_n1, _n1)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(b, Var(0), 1 + Var(0)) ==
                       d1array2(a,
                                99999 + -1*Var(0),
                                Var(0))) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(b, Var(0), 1 + Var(0)) ==
                       d1array2(a,
                                99999 + -1*Var(0),
                                Var(0)))),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(b, _n1, 1 + _n1) ==
                          d1array2(a, 99999 + -1*_n1, _n1)))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(b, _n1, 1 + _n1) ==
                          d1array2(a, 99999 + -1*_n1, _n1))))),
   ForAll(_n1,
          Or(Not(_n1 >= 0),
             d1array2(b, _n1, 1 + _n1) ==
             d1array2(a, 99999 + -1*_n1, _n1)))), asserted(Not(d1array2(b, 0, 1) == d1array2(a, 99999, 0))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:15:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array2(b, _k1, _k1 + 1)==d1array2(a, -_k1 + 99999, _k1)),(d1array2(b, _k1 + 1, _k1 + 2)==d1array2(a, -_k1 + 100000, _k1 + 1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(b, _k1, _k1 + 1)==d1array2(a, -_k1 + 99999, _k1)),(d1array2(b, _k1 + 1, _k1 + 2)==d1array2(a, -_k1 + 100000, _k1 + 1)))

System try to prove 
Implies((d1array2(b, _k1, _k1 + 1)==d1array2(a, -_k1 + 99999, _k1)),(d1array2(b, _k1 + 1, _k1 + 2)==d1array2(a, -_k1 + 100000, _k1 + 1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a, _x2, _n1 + 1) == d1array2(a, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(b, _n1, _n1 + 1) == d1array2(a, -_n1 + 99999, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b, _x2, 0) == d1array(b, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array2(b, _k1, _k1 + 1)==d1array2(a, -_k1 + 99999, _k1)),(d1array2(b, _k1 + 1, _k1 + 2)==d1array2(a, -_k1 + 100000, _k1 + 1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 13:17:52
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array(a, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array(a, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array(a, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a, _x2, _n2 + 1) == d1array4(a, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(b, _x2, _n2 + 1) == d1array4(b, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b, _x2, 0) == d1array2(b, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array(a, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array(a, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array4(a, _x2, 0) ==
                                 d1array(a, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array4(a, _x2, 0) ==
                                   d1array(a, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array4(a, _x2!2, 0) ==
                            d1array(a, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array4(a, _x2!2, 0) ==
                       d1array(a, _x2!2)))),
            Not(d1array4(a, _x2!2, 0) == d1array(a, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array4(a,
                                        _x2!2,
                                        0) ==
                                        d1array2(a,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array4(a, _x2!2, 0) ==
                                       d1array2(a,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array4(a, _x2!2, 0) ==
                                    d1array2(a, _x2!2, _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array4(a, _x2!2, 0) ==
                            d1array2(a, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(a, _x2, 0) ==
                                       d1array2(a, _x2, _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array2(a,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array2(a,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array4(a, _x2, 0) ==
                                   d1array2(a, _x2, _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a,
                                        Var(0),
                                        0) ==
                                        d1array(a, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                                        Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2)))) ==
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2))))),
                                      sk(~(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a, _x2, 0) ==
                                        d1array(a, _x2)))),
                                        Not(Or(Not(_x2!2 >=
                                        0),
                                        d1array4(a,
                                        _x2!2,
                                        0) ==
                                        d1array(a, _x2!2))))),
                                      Not(Or(Not(_x2!2 >= 0),
                                        d1array4(a,
                                        _x2!2,
                                        0) ==
                                        d1array(a, _x2!2)))),
                                  _x2!2 >= 0),
                      d1array4(a, _x2!2, 0) ==
                      d1array2(a, _x2!2, _N1)),
      unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array2(a,
                                        _x2,
                                        _N1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:17:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a, _x2, _k2 + 1)==d1array(a, _x2)),(d1array4(a, _x2, _k2 + 2)==d1array(a, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a, _x2, _k2 + 1)==d1array(a, _x2)),(d1array4(a, _x2, _k2 + 2)==d1array(a, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a, _x2, _k2 + 1)==d1array(a, _x2)),(d1array4(a, _x2, _k2 + 2)==d1array(a, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a, _x2, _n2 + 1) == d1array4(a, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(b, _x2, _n2 + 1) == d1array4(b, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b, _x2, 0) == d1array2(b, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a, _x2, _k2 + 1)==d1array(a, _x2)),(d1array4(a, _x2, _k2 + 2)==d1array(a, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(a,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(a, _x2),
                                        d1array4(a,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(a, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array4(a,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a, Var(0))) ==
                                        (d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a, Var(0))) ==
                                        (d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        Implies(d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a, Var(0))) ==
                                        Implies(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        rewrite(Implies(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        Implies(d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a, Var(0))) ==
                                        Or(Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a, Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a, Var(0)),
                                        d1array4(a,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a, Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a, Var(0))),
                                        d1array4(a,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a, Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(a,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(a, _x2),
                                        d1array4(a,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(a, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(a,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(a, _x2)),
                                        d1array4(a,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(a, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(a,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(a, _x2),
                                        d1array4(a,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(a, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(a,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(a, _x2)),
                                        d1array4(a,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(a, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array4(a,
                                        _x2,
                                        1 + _k2) ==
                                     d1array(a, _x2)),
                                 d1array4(a, _x2, 2 + _k2) ==
                                 d1array(a, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   Not(d1array4(a,
                                        _x2,
                                        1 + _k2) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array4(a,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array4(a,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array4(a,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array4(a,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array4(a, _x2!2, 2 + _k2) ==
                            d1array4(a, _x2!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array4(a,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array4(a,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(a,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(a,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, _N2) == d1array(a, _x2)))

***********************
2017-05-14 13:17:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(b, _n1, 0) == d1array(b, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(b, _n1, 0) == d1array(b, _x2)))

System try to prove 
ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(b, _n1, 0) == d1array(b, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a, _x2, _n2 + 1) == d1array4(a, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(b, _x2, _n2 + 1) == d1array4(b, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b, _x2, 0) == d1array2(b, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, _N2) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(b, _n1, 0) == d1array(b, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 13:19:56
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n2],Implies(_n2>=0,(d1array4(a, _n2, _N2)==d1array4(b, -_n2 + 99999, _N2))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n2],Implies(_n2>=0,(d1array4(a, _n2, _N2)==d1array4(b, -_n2 + 99999, _N2))))

System try to prove 
ForAll([_n2],Implies(_n2>=0,(d1array4(a, _n2, _N2)==d1array4(b, -_n2 + 99999, _N2))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
main=Int('main')
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(i1 == _N1)
_s.add(x1 == _N2)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(b, _x2) == d1array4(b, _x2, _N2))))
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a, _x2) == d1array4(a, _x2, _N2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a, _x2, _n1 + 1) == d1array2(a, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(b, _n1, _n1 + 1) == d1array2(a, -_n1 + 99999, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, 0) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(b, _x2, 0) == d1array(b, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a, _x2, _n2 + 1) == d1array4(a, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(b, _x2, _n2 + 1) == d1array4(b, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, 0) == d1array2(a, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(b, _x2, 0) == d1array2(b, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a, _x2, _N1) == d1array(a, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a, _x2, _N2) == d1array(a, _x2))))
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(Not(ForAll([_n2],Implies(_n2>=0,(d1array4(a, _n2, _N2)==d1array4(b, -_n2 + 99999, _N2))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Counter Example
[_k1 = 0,
 i1 = 100000,
 b = arraySort!val!1,
 a = arraySort!val!0,
 a1 = arraySort!val!0,
 _n2!0 = 107719,
 _k2 = 0,
 _N1 = 100000,
 b1 = arraySort!val!1,
 main = 0,
 x1 = 100000,
 _N2 = 100000,
 _f = [else -> Var(0)],
 d1array4!4 = [(arraySort!val!1, -7720, 100000) -> 23,
               else -> 21],
 k!1 = [else ->
        If(Var(0) >= -1,
           If(Var(0) >= 0,
              If(Var(0) >= 1,
                 If(Var(0) >= 2,
                    If(Var(0) >= 3,
                       If(Var(0) >= 4,
                          If(Var(0) >= 5,
                             If(Var(0) >= 6,
                                If(Var(0) >= 7,
                                   If(Var(0) >= 8,
                                      If(Var(0) >= 9,
                                        If(Var(0) >= 10,
                                        If(Var(0) >= 11,
                                        If(Var(0) >= 12,
                                        If(Var(0) >= 13,
                                        If(Var(0) >= 14,
                                        If(Var(0) >= 15,
                                        If(Var(0) >= 16,
                                        If(Var(0) >= 17,
                                        If(... >= ...,
                                        If(..., ..., ...),
                                        17),
                                        16),
                                        15),
                                        14),
                                        13),
                                        12),
                                        11),
                                        10),
                                        9),
                                        8),
                                      7),
                                   6),
                                5),
                             4),
                          3),
                       2),
                    1),
                 0),
              -1),
           -7720)],
 d1array2 = [else -> 21],
 d1array4 = [else ->
             d1array4!4(Var(0), k!1(Var(1)), k!3(Var(2)))],
 d1array1 = [else -> 21],
 k!3 = [else ->
        If(Var(0) >= 0,
           If(Var(0) >= 1,
              If(Var(0) >= 2,
                 If(Var(0) >= 3,
                    If(Var(0) >= 4,
                       If(Var(0) >= 5,
                          If(Var(0) >= 6,
                             If(Var(0) >= 7,
                                If(Var(0) >= 8,
                                   If(Var(0) >= 9,
                                      If(Var(0) >= 10,
                                        If(Var(0) >= 11,
                                        If(Var(0) >= 12,
                                        If(Var(0) >= 13,
                                        If(Var(0) >= 14,
                                        If(Var(0) >= 15,
                                        If(Var(0) >= 16,
                                        If(Var(0) >= 17,
                                        If(Var(0) >= 99999,
                                        If(... >= ...,
                                        If(..., ..., ...),
                                        99999),
                                        17),
                                        16),
                                        15),
                                        14),
                                        13),
                                        12),
                                        11),
                                        10),
                                        9),
                                      8),
                                   7),
                                6),
                             5),
                          4),
                       3),
                    2),
                 1),
              0),
           -1)],
 d1array = [else -> 21]]


Result --Counter Example
[_k1 = 0,
 i1 = 100000,
 b = arraySort!val!1,
 a = arraySort!val!0,
 a1 = arraySort!val!0,
 _n2!0 = 107719,
 _k2 = 0,
 _N1 = 100000,
 b1 = arraySort!val!1,
 main = 0,
 x1 = 100000,
 _N2 = 100000,
 _f = [else -> Var(0)],
 d1array4!4 = [(arraySort!val!1, -7720, 100000) -> 23,
               else -> 21],
 k!1 = [else ->
        If(Var(0) >= -1,
           If(Var(0) >= 0,
              If(Var(0) >= 1,
                 If(Var(0) >= 2,
                    If(Var(0) >= 3,
                       If(Var(0) >= 4,
                          If(Var(0) >= 5,
                             If(Var(0) >= 6,
                                If(Var(0) >= 7,
                                   If(Var(0) >= 8,
                                      If(Var(0) >= 9,
                                        If(Var(0) >= 10,
                                        If(Var(0) >= 11,
                                        If(Var(0) >= 12,
                                        If(Var(0) >= 13,
                                        If(Var(0) >= 14,
                                        If(Var(0) >= 15,
                                        If(Var(0) >= 16,
                                        If(Var(0) >= 17,
                                        If(... >= ...,
                                        If(..., ..., ...),
                                        17),
                                        16),
                                        15),
                                        14),
                                        13),
                                        12),
                                        11),
                                        10),
                                        9),
                                        8),
                                      7),
                                   6),
                                5),
                             4),
                          3),
                       2),
                    1),
                 0),
              -1),
           -7720)],
 d1array2 = [else -> 21],
 d1array4 = [else ->
             d1array4!4(Var(0), k!1(Var(1)), k!3(Var(2)))],
 d1array1 = [else -> 21],
 k!3 = [else ->
        If(Var(0) >= 0,
           If(Var(0) >= 1,
              If(Var(0) >= 2,
                 If(Var(0) >= 3,
                    If(Var(0) >= 4,
                       If(Var(0) >= 5,
                          If(Var(0) >= 6,
                             If(Var(0) >= 7,
                                If(Var(0) >= 8,
                                   If(Var(0) >= 9,
                                      If(Var(0) >= 10,
                                        If(Var(0) >= 11,
                                        If(Var(0) >= 12,
                                        If(Var(0) >= 13,
                                        If(Var(0) >= 14,
                                        If(Var(0) >= 15,
                                        If(Var(0) >= 16,
                                        If(Var(0) >= 17,
                                        If(Var(0) >= 99999,
                                        If(... >= ...,
                                        If(..., ..., ...),
                                        99999),
                                        17),
                                        16),
                                        15),
                                        14),
                                        13),
                                        12),
                                        11),
                                        10),
                                        9),
                                      8),
                                   7),
                                6),
                             5),
                          4),
                       3),
                    2),
                 1),
              0),
           -1)],
 d1array = [else -> 21]]


***********************
2017-05-14 13:22:20
***********************

Command--Translate 

Parameters--
 File Name--standard_reverse_true-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i2(_n1 + 1)=i2(_n1) + 1,i2(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i4(_n2 + 1)=i4(_n2) + 1,i4(0)=i
 Closed Form Solution
_n2 + i

***********************
2017-05-14 13:22:21
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array2(A, 0, 1) == d1array2(A, n - 1, 0)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array2(A, 0, 1) == d1array2(A, n - 1, 0)

System try to prove 
d1array2(A, 0, 1) == d1array2(A, n - 1, 0)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
A=Const('A',arraySort)
_n2=Int('_n2')
d1array=Function('d1array',arraySort,IntSort(),IntSort())
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n1=Int('_n1')
n=Int('n')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
n1=Int('n1')
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(A, _n1, _n1 + 1) == d1array2(A, -_n1 + n - 1, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(A, _x2, 0) == d1array(A, _x2))))
_s.add(_N1 >= n)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < n)))
_s.add(Or(_N1==0,_N1 - 1 < n))
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(Not(d1array2(A, 0, 1) == d1array2(A, n - 1, 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(A, _n1, 1 + _n1) ==
                               d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1)))),
                 Or(Not(0 >= 0),
                    d1array2(A, 0, 1 + 0) ==
                    d1array2(A, -1 + n + -1*0, 0)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array2(A,
                                        0,
                                        1 + 0) ==
                                        d1array2(A, 0, 1)),
                                        monotonicity(trans(monotonicity(rewrite(-1*
                                        0 ==
                                        0),
                                        -1 + n + -1*0 ==
                                        -1 + n + 0),
                                        rewrite(-1 + n + 0 ==
                                        -1 + n),
                                        -1 + n + -1*0 ==
                                        -1 + n),
                                        d1array2(A,
                                        -1 + n + -1*0,
                                        0) ==
                                        d1array2(A,
                                        -1 + n,
                                        0)),
                                        (d1array2(A,
                                        0,
                                        1 + 0) ==
                                        d1array2(A,
                                        -1 + n + -1*0,
                                        0)) ==
                                        (d1array2(A, 0, 1) ==
                                        d1array2(A,
                                        -1 + n,
                                        0))),
                                        Or(Not(0 >= 0),
                                        d1array2(A,
                                        0,
                                        1 + 0) ==
                                        d1array2(A,
                                        -1 + n + -1*0,
                                        0)) ==
                                        Or(False,
                                        d1array2(A, 0, 1) ==
                                        d1array2(A,
                                        -1 + n,
                                        0))),
                            rewrite(Or(False,
                                       d1array2(A, 0, 1) ==
                                       d1array2(A,
                                        -1 + n,
                                        0)) ==
                                    (d1array2(A, 0, 1) ==
                                     d1array2(A, -1 + n, 0))),
                            Or(Not(0 >= 0),
                               d1array2(A, 0, 1 + 0) ==
                               d1array2(A, -1 + n + -1*0, 0)) ==
                            (d1array2(A, 0, 1) ==
                             d1array2(A, -1 + n, 0))),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(A,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1)))),
                         Or(Not(0 >= 0),
                            d1array2(A, 0, 1 + 0) ==
                            d1array2(A, -1 + n + -1*0, 0))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(A,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1)))),
                         d1array2(A, 0, 1) ==
                         d1array2(A, -1 + n, 0))),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(A, _n1, 1 + _n1) ==
                                  d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1)))),
                    d1array2(A, 0, 1) ==
                    d1array2(A, -1 + n, 0)) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(A, _n1, 1 + _n1) ==
                                  d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1)))),
                    d1array2(A, 0, 1) ==
                    d1array2(A, -1 + n, 0))),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(A, _n1, 1 + _n1) ==
                          d1array2(A, -1 + n + -1*_n1, _n1)))),
            Or(Not(0 >= 0),
               d1array2(A, 0, 1 + 0) ==
               d1array2(A, -1 + n + -1*0, 0))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(A, _n1, 1 + _n1) ==
                          d1array2(A, -1 + n + -1*_n1, _n1)))),
            d1array2(A, 0, 1) == d1array2(A, -1 + n, 0))),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(A, _n1, 1 + _n1) ==
                    d1array2(A, -1 + n + -1*_n1, _n1)))),
      d1array2(A, 0, 1) == d1array2(A, -1 + n, 0))), mp(mp~(mp(mp(asserted(ForAll(_n1,
                             Implies(_n1 >= 0,
                                     d1array2(A,
                                        _n1,
                                        _n1 + 1) ==
                                     d1array2(A,
                                        -_n1 + n - 1,
                                        _n1)))),
             quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(A,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(A,
                                        Var(0),
                                        1 + Var(0))),
                                        monotonicity(trans(trans(monotonicity(monotonicity(rewrite(-Var(0) ==
                                        -1*Var(0)),
                                        -Var(0) + n ==
                                        -1*Var(0) + n),
                                        -Var(0) + n - 1 ==
                                        -1*Var(0) + n - 1),
                                        rewrite(-1*Var(0) +
                                        n -
                                        1 ==
                                        -1*Var(0) + n + -1*1),
                                        -Var(0) + n - 1 ==
                                        -1*Var(0) + n + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        -1*Var(0) + n + -1*1 ==
                                        -1*Var(0) + n + -1),
                                        rewrite(-1*Var(0) +
                                        n +
                                        -1 ==
                                        -1 + -1*Var(0) + n),
                                        -1*Var(0) + n + -1*1 ==
                                        -1 + -1*Var(0) + n),
                                        -Var(0) + n - 1 ==
                                        -1 + -1*Var(0) + n),
                                        d1array2(A,
                                        -Var(0) + n - 1,
                                        Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0))),
                                        (d1array2(A,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(A,
                                        -Var(0) + n - 1,
                                        Var(0))) ==
                                        (d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        d1array2(A,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(A,
                                        -Var(0) + n - 1,
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0)))),
                               rewrite(Implies(Var(0) >= 0,
                                        d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0))) ==
                                       Or(Not(Var(0) >= 0),
                                        d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0)))),
                               Implies(Var(0) >= 0,
                                       d1array2(A,
                                        Var(0),
                                        Var(0) + 1) ==
                                       d1array2(A,
                                        -Var(0) + n - 1,
                                        Var(0))) ==
                               Or(Not(Var(0) >= 0),
                                  d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                  d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0)))),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        d1array2(A,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(A,
                                        -_n1 + n - 1,
                                        _n1)))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    d1array2(A,
                                        _n1,
                                        1 + _n1) ==
                                    d1array2(A,
                                        -1 + -1*_n1 + n,
                                        _n1))))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       d1array2(A, _n1, 1 + _n1) ==
                       d1array2(A, -1 + -1*_n1 + n, _n1)))),
          quant-intro(monotonicity(monotonicity(monotonicity(rewrite(-1 +
                                        -1*Var(0) +
                                        n ==
                                        -1 + n + -1*Var(0)),
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0)) ==
                                        d1array2(A,
                                        -1 + n + -1*Var(0),
                                        Var(0))),
                                        (d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0))) ==
                                        (d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(A,
                                        -1 + n + -1*Var(0),
                                        Var(0)))),
                                   Or(Not(Var(0) >= 0),
                                      d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                      d1array2(A,
                                        -1 + -1*Var(0) + n,
                                        Var(0))) ==
                                   Or(Not(Var(0) >= 0),
                                      d1array2(A,
                                        Var(0),
                                        1 + Var(0)) ==
                                      d1array2(A,
                                        -1 + n + -1*Var(0),
                                        Var(0)))),
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(A, _n1, 1 + _n1) ==
                                 d1array2(A,
                                        -1 + -1*_n1 + n,
                                        _n1)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(A, _n1, 1 + _n1) ==
                                 d1array2(A,
                                        -1 + n + -1*_n1,
                                        _n1))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(A, _n1, 1 + _n1) ==
                    d1array2(A, -1 + n + -1*_n1, _n1)))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(A, Var(0), 1 + Var(0)) ==
                         d1array2(A,
                                  -1 + n + -1*Var(0),
                                  Var(0))),
                      Or(Not(Var(0) >= 0),
                         d1array2(A, Var(0), 1 + Var(0)) ==
                         d1array2(A,
                                  -1 + n + -1*Var(0),
                                  Var(0))))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(A, _n1, 1 + _n1) ==
                           d1array2(A, -1 + n + -1*_n1, _n1))),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(A, _n1, 1 + _n1) ==
                           d1array2(A, -1 + n + -1*_n1, _n1))))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(A, _n1, 1 + _n1) ==
                 d1array2(A, -1 + n + -1*_n1, _n1)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(A, Var(0), 1 + Var(0)) ==
                       d1array2(A,
                                -1 + n + -1*Var(0),
..., mp(asserted(Not(d1array2(A, 0, 1) == d1array2(A, n - 1, 0))),
   monotonicity(monotonicity(monotonicity(trans(rewrite(n -
                                        1 ==
                                        n + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        n + -1*1 == n + -1),
                                        rewrite(n + -1 ==
                                        -1 + n),
                                        n + -1*1 == -1 + n),
                                        n - 1 == -1 + n),
                                        d1array2(A,
                                        n - 1,
                                        0) ==
                                        d1array2(A,
                                        -1 + n,
                                        0)),
                             (d1array2(A, 0, 1) ==
                              d1array2(A, n - 1, 0)) ==
                             (d1array2(A, 0, 1) ==
                              d1array2(A, -1 + n, 0))),
                Not(d1array2(A, 0, 1) ==
                    d1array2(A, n - 1, 0)) ==
                Not(d1array2(A, 0, 1) ==
                    d1array2(A, -1 + n, 0))),
   Not(d1array2(A, 0, 1) == d1array2(A, -1 + n, 0))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 13:22:22
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array2(A, _k1, _k1 + 1)==d1array2(A, -_k1 + n - 1, _k1)),(d1array2(A, _k1 + 1, _k1 + 2)==d1array2(A, -_k1 + n, _k1 + 1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(A, _k1, _k1 + 1)==d1array2(A, -_k1 + n - 1, _k1)),(d1array2(A, _k1 + 1, _k1 + 2)==d1array2(A, -_k1 + n, _k1 + 1)))

System try to prove 
Implies((d1array2(A, _k1, _k1 + 1)==d1array2(A, -_k1 + n - 1, _k1)),(d1array2(A, _k1 + 1, _k1 + 2)==d1array2(A, -_k1 + n, _k1 + 1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
A=Const('A',arraySort)
_n2=Int('_n2')
d1array=Function('d1array',arraySort,IntSort(),IntSort())
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n1=Int('_n1')
n=Int('n')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
n1=Int('n1')
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(A, _n1, _n1 + 1) == d1array2(A, -_n1 + n - 1, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(A, _x2, 0) == d1array(A, _x2))))
_s.add(_N1 >= n)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < n)))
_s.add(Or(_N1==0,_N1 - 1 < n))
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array2(A, _k1, _k1 + 1)==d1array2(A, -_k1 + n - 1, _k1)),(d1array2(A, _k1 + 1, _k1 + 2)==d1array2(A, -_k1 + n, _k1 + 1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Counter Example
[A1 = arraySort!val!0,
 A = arraySort!val!0,
 n1 = 8366,
 _N1 = 8366,
 n = 8366,
 _k1 = 5853,
 k!7 = [else ->
        If(Var(0) >= 2511,
           If(Var(0) >= 2512,
              If(Var(0) >= 2513,
                 If(Var(0) >= 5852,
                    If(Var(0) >= 5853,
                       If(Var(0) >= 5854,
                          If(Var(0) >= 5855, 5855, 5854),
                          5853),
                       5852),
                    2513),
                 2512),
              2511),
           0)],
 _f = [else -> Var(0)],
 d1array = [else -> d1array2(arraySort!val!0, Var(1), 0)],
 d1array2!9 = [(arraySort!val!0, 5854, 5855) -> 7,
               (arraySort!val!0, 2513, 5854) -> 6,
               (arraySort!val!0, 2511, 5854) -> 7,
               else -> 5],
 d1array2 = [else ->
             d1array2!9(Var(0), k!7(Var(1)), k!7(Var(2)))]]


Result --Counter Example
[A1 = arraySort!val!0,
 A = arraySort!val!0,
 n1 = 8366,
 _N1 = 8366,
 n = 8366,
 _k1 = 5853,
 k!7 = [else ->
        If(Var(0) >= 2511,
           If(Var(0) >= 2512,
              If(Var(0) >= 2513,
                 If(Var(0) >= 5852,
                    If(Var(0) >= 5853,
                       If(Var(0) >= 5854,
                          If(Var(0) >= 5855, 5855, 5854),
                          5853),
                       5852),
                    2513),
                 2512),
              2511),
           0)],
 _f = [else -> Var(0)],
 d1array = [else -> d1array2(arraySort!val!0, Var(1), 0)],
 d1array2!9 = [(arraySort!val!0, 5854, 5855) -> 7,
               (arraySort!val!0, 2513, 5854) -> 6,
               (arraySort!val!0, 2511, 5854) -> 7,
               else -> 5],
 d1array2 = [else ->
             d1array2!9(Var(0), k!7(Var(1)), k!7(Var(2)))]]


***********************
2017-05-14 13:22:22
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _n1, 0) == d1array(A, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _n1, 0) == d1array(A, _x2)))

System try to prove 
ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _n1, 0) == d1array(A, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
A=Const('A',arraySort)
_n2=Int('_n2')
d1array=Function('d1array',arraySort,IntSort(),IntSort())
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n1=Int('_n1')
n=Int('n')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
n1=Int('n1')
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(A, _x2, _n2 + 1) == d1array4(A, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array2(A, _x2, _N1))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(A, _n1, 0) == d1array(A, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Counter Example
[A = arraySort!val!0,
 _x2!1 = 38,
 n1 = -1,
 n = -1,
 _n1!0 = 7719,
 A1 = arraySort!val!0,
 _k2 = 0,
 _N1 = 24,
 _k1 = 0,
 _N2 = -1,
 d1array2 = [(arraySort!val!0, 7719, 24) -> 22,
             else -> d1array4(arraySort!val!0, Var(1), 0)],
 _f = [else -> Var(0)],
 d1array = [else -> 23],
 d1array4 = [else -> 22]]


Result --Counter Example
[A = arraySort!val!0,
 _x2!1 = 38,
 n1 = -1,
 n = -1,
 _n1!0 = 7719,
 A1 = arraySort!val!0,
 _k2 = 0,
 _N1 = 24,
 _k1 = 0,
 _N2 = -1,
 d1array2 = [(arraySort!val!0, 7719, 24) -> 22,
             else -> d1array4(arraySort!val!0, Var(1), 0)],
 _f = [else -> Var(0)],
 d1array = [else -> 23],
 d1array4 = [else -> 22]]


***********************
2017-05-14 13:22:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n2],Implies(_n2>=0,(d1array4(A, _n2, _N2)==d1array4(A, -_n2 + n - 1, _N2))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n2],Implies(_n2>=0,(d1array4(A, _n2, _N2)==d1array4(A, -_n2 + n - 1, _N2))))

System try to prove 
ForAll([_n2],Implies(_n2>=0,(d1array4(A, _n2, _N2)==d1array4(A, -_n2 + n - 1, _N2))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
A=Const('A',arraySort)
_n2=Int('_n2')
d1array=Function('d1array',arraySort,IntSort(),IntSort())
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_n1=Int('_n1')
n=Int('n')
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
n1=Int('n1')
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(i1 == _N2)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(A, _x2) == d1array4(A, _x2, _N2))))
_s.add(main == 0)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(A, _n1, _n1 + 1) == d1array2(A, -_n1 + n - 1, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(A, _x2, 0) == d1array(A, _x2))))
_s.add(_N1 >= n)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < n)))
_s.add(Or(_N1==0,_N1 - 1 < n))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(A, _x2, _n2 + 1) == d1array4(A, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(A, _x2, 0) == d1array2(A, _x2, _N1))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(A1 == A)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(Not(ForAll([_n2],Implies(_n2>=0,(d1array4(A, _n2, _N2)==d1array4(A, -_n2 + n - 1, _N2))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_reverse_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_reverse_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 13:24:38
***********************

Command--Translate 

Parameters--
 File Name--standard_running_false-unreach-call.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i3(_n1 + 1)=i3(_n1) + 1,i3(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i8(_n2 + 1)=i8(_n2) + 1,i8(0)=i
 Closed Form Solution
_n2 + i

***********************
2017-05-14 13:24:39
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--f8(_N2) > 0
 Strategy--Direct
System try to prove 
f8(_N2) > 0

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
a=Const('a',arraySort)
f1=Int('f1')
f8=Function('f8',IntSort(),IntSort())
b=Const('b',arraySort)
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a1=Const('a1',arraySort)
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
b1=Const('b1',arraySort)
_n1=Int('_n1')
main=Int('main')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
d1array3=Function('d1array3',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array3=Function('d1array3',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a1 == a)
_s.add(b1 == b)
_s.add(i1 == _N2)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == d1array3(_x1, _x2, _N1))))
_s.add(main == 0)
_s.add(f1 == f8(_N2))
_s.add(ForAll([_x2,_x1,_n1],Implies(And(_x2>=0,_n1>=0),d1array3(_x1, _x2, _n1 + 1) == If(d1array3(a, _n1, _n1) >= 0,If(And((_x1==b),(_x2==_n1)),0,d1array3(_x1, _x2, _n1)),d1array3(_x1, _x2, _n1)))))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array3(_x1, _x2, 0) == d1array(_x1, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_n2],Implies(_n2>=0,f8(_n2 + 1) == If(And(d1array3(a, _n2, _N1) < 0,d1array3(b, _n2, _N1) <= 0),0,If(And(d1array3(a, _n2, _N1) >= 0,d1array3(b, _n2, _N1) <= 0),0,f8(_n2))))))
_s.add(f8(0) == 1)
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(Not(f8(_N2) > 0))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_running_false-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_running_false-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove

