
***********************
2017-05-23 19:47:56
***********************

Command--Translate 

Parameters--
 File Name--standard_password_true-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i3(_n1 + 1)=i3(_n1) + 1,i3(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x5(_n2 + 1)=x5(_n2) + 1,x5(0)=x
 Closed Form Solution
_n2 + x

***********************
2017-05-23 19:47:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k2=Int('_k2')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array5(guess, _x2, 0) ==
                           d1array(guess, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array5(guess, Var(0), 0) ==
                               d1array(guess, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array5(guess, Var(0), 0) ==
                          d1array(guess, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array5(guess, _x2, 0) ==
                               d1array(guess, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array5(guess, _x2, 0) ==
                          d1array(guess, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array5(guess, _x2, 0) == d1array(guess, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array5(guess, _x2, 0) ==
                               d1array(guess, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array5(guess,
                                        Var(0),
                                        0) ==
                                        d1array(guess,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array5(guess,
                                        Var(0),
                                        0) ==
                                       d1array(guess,
                                        Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array5(guess,
                                        _x2,
                                        0) ==
                                        d1array(guess, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array5(guess,
                                        _x2,
                                        0) ==
                                       d1array(guess, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array5(guess, _x2, 0) ==
                                   d1array(guess, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array5(guess, _x2, 0) ==
                              d1array(guess, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array5(guess, _x2, 0) ==
                 d1array(guess, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-23 19:47:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array5(guess, _x2, _k2 + 1)==d1array(guess, _x2)),(d1array5(guess, _x2, _k2 + 2)==d1array(guess, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array5(guess, _x2, _k2 + 1)==d1array(guess, _x2)),(d1array5(guess, _x2, _k2 + 2)==d1array(guess, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array5(guess, _x2, _k2 + 1)==d1array(guess, _x2)),(d1array5(guess, _x2, _k2 + 2)==d1array(guess, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k2=Int('_k2')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array5(guess, _x2, _k2 + 1)==d1array(guess, _x2)),(d1array5(guess, _x2, _k2 + 2)==d1array(guess, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array5(guess,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(guess, _x2),
                                        d1array5(guess,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(guess, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array5(guess,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(guess,
                                        Var(0))) ==
                                        (d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(guess,
                                        Var(0))) ==
                                        (d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        Implies(d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(guess,
                                        Var(0))) ==
                                        Implies(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        rewrite(Implies(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0))) ==
                                        Or(Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        Implies(d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(guess,
                                        Var(0))) ==
                                        Or(Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(guess,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array5(guess,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(guess,
                                        Var(0)),
                                        d1array5(guess,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(guess,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array5(guess,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(guess,
                                        Var(0))),
                                        d1array5(guess,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(guess,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array5(guess,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(guess, _x2),
                                        d1array5(guess,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(guess, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array5(guess,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(guess, _x2)),
                                        d1array5(guess,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(guess, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array5(guess,
                                        _x2,
                                        _k2 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(guess,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array5(guess,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array5(guess,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array5(guess,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array5(guess,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array5(guess, _x2!2, 2 + _k2) ==
                            d1array5(guess, _x2!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array5(guess,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array5(guess,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array5(guess,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array5(guess,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array5(guess,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2)))

***********************
2017-05-23 19:47:59
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k2=Int('_k2')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array5(password, _x2, 0) ==
                           d1array(password, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array5(password, Var(0), 0) ==
                               d1array(password, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array5(password, Var(0), 0) ==
                          d1array(password, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array5(password, _x2, 0) ==
                               d1array(password, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array5(password, _x2, 0) ==
                          d1array(password, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array5(password, _x2, 0) ==
             d1array(password, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array5(password, _x2, 0) ==
                               d1array(password, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array5(password,
                                        Var(0),
                                        0) ==
                                        d1array(password,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array5(password,
                                        Var(0),
                                        0) ==
                                       d1array(password,
                                        Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array5(password,
                                        _x2,
                                        0) ==
                                        d1array(password,
                                        _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array5(password,
                                        _x2,
                                        0) ==
                                       d1array(password,
                                        _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array5(password,
                                        _x2,
                                        0) ==
                                   d1array(password, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array5(password, _x2, 0) ==
                              d1array(password, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array5(password, _x2, 0) ==
                 d1array(password, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-23 19:47:59
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array5(password, _x2, _k2 + 1)==d1array(password, _x2)),(d1array5(password, _x2, _k2 + 2)==d1array(password, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array5(password, _x2, _k2 + 1)==d1array(password, _x2)),(d1array5(password, _x2, _k2 + 2)==d1array(password, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array5(password, _x2, _k2 + 1)==d1array(password, _x2)),(d1array5(password, _x2, _k2 + 2)==d1array(password, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k2=Int('_k2')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array5(password, _x2, _k2 + 1)==d1array(password, _x2)),(d1array5(password, _x2, _k2 + 2)==d1array(password, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array5(password,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(password,
                                        _x2),
                                        d1array5(password,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(password,
                                        _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array5(password,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(password,
                                        Var(0))) ==
                                        (d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(password,
                                        Var(0))) ==
                                        (d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        Implies(d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(password,
                                        Var(0))) ==
                                        Implies(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        rewrite(Implies(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0))) ==
                                        Or(Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        Implies(d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(password,
                                        Var(0))) ==
                                        Or(Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(password,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array5(password,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(password,
                                        Var(0)),
                                        d1array5(password,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(password,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array5(password,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(password,
                                        Var(0))),
                                        d1array5(password,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(password,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array5(password,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(password,
                                        _x2),
                                        d1array5(password,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(password,
                                        _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array5(password,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(password,
                                        _x2)),
                                        d1array5(password,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(password,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array5(password,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array5(password,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array5(password,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array5(password,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array5(password,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        1 + _n2) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array5(password,
                                     _x2!2,
                                     2 + _k2) ==
                            d1array5(password,
                                     _x2!2,
                                     1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array5(password,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array5(password,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array5(password,
                                        Var(1),
                                        Var(0) + 1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, _N2) == d1array(password, _x2)))

***********************
2017-05-23 19:48:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n2],Implies(_n2>=0,Implies(result3(_N1) > 0,(d1array5(password, _n2, _N2)==d1array5(guess, _n2, _N2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n2],Implies(_n2>=0,Implies(result3(_N1) > 0,(d1array5(password, _n2, _N2)==d1array5(guess, _n2, _N2)))))

System try to prove 
ForAll([_n2],Implies(_n2>=0,Implies(result3(_N1) > 0,(d1array5(password, _n2, _N2)==d1array5(guess, _n2, _N2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k2=Int('_k2')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(i1 == _N1)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(guess, _x2) == If(result3(_N1) > 0,d1array5(guess, _x2, _N2),d1array(guess, _x2)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(password, _x2) == If(result3(_N1) > 0,d1array5(password, _x2, _N2),d1array(password, _x2)))))
_s.add(main == 0)
_s.add(result1 == result3(_N1))
_s.add(x1 == If(result3(_N1) > 0,_N2,x))
_s.add(ForAll([_n1],Implies(_n1>=0,result3(_n1 + 1) == If(d1array(password, _n1)!=d1array(guess, _n1),0,result3(_n1)))))
_s.add(result3(0) == 1)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, _N2) == d1array(password, _x2))))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(_k2>=0)
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(Not(ForAll([_n2],Implies(_n2>=0,Implies(result3(_N1) > 0,(d1array5(password, _n2, _N2)==d1array5(guess, _n2, _N2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-23 19:50:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(result3(1) > 0,(d1array(password, 0)==d1array(password, 0)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(result3(1) > 0,(d1array(password, 0)==d1array(password, 0)))

System try to prove 
Implies(result3(1) > 0,(d1array(password, 0)==d1array(password, 0)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(i1 == _N1)
_s.add(x1 == If(result3(_N1) > 0,_N2,x))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(result3(_N1) > 0,d1array5(_x1, _x2, _N2),d1array(_x1, _x2)))))
_s.add(result1 == result3(_N1))
_s.add(main == 0)
_s.add(ForAll([_n1],Implies(_n1>=0,result3(_n1 + 1) == If(d1array(password, _n1)!=d1array(guess, _n1),0,result3(_n1)))))
_s.add(result3(0) == 1)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, _N2) == d1array(password, _x2))))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(i1 == _N1)
_s.add(x1 == If(result3(_N1) > 0,_N2,x))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(result3(_N1) > 0,d1array5(_x1, _x2, _N2),d1array(_x1, _x2)))))
_s.add(result1 == result3(_N1))
_s.add(main == 0)
_s.add(Not(Implies(result3(1) > 0,(d1array(password, 0)==d1array(password, 0)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[asserted(Not(Implies(result3(1) > 0,
                     d1array(password, 0) ==
                     d1array(password, 0)))), trans(monotonicity(trans(monotonicity(rewrite((result3(1) >
                                        0) ==
                                        Not(result3(1) <= 0)),
                                      rewrite((d1array(password,
                                        0) ==
                                        d1array(password, 0)) ==
                                        True),
                                      Implies(result3(1) > 0,
                                        d1array(password, 0) ==
                                        d1array(password, 0)) ==
                                      Implies(Not(result3(1) <=
                                        0),
                                        True)),
                         rewrite(Implies(Not(result3(1) <= 0),
                                        True) ==
                                 True),
                         Implies(result3(1) > 0,
                                 d1array(password, 0) ==
                                 d1array(password, 0)) ==
                         True),
                   Not(Implies(result3(1) > 0,
                               d1array(password, 0) ==
                               d1array(password, 0))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(Implies(result3(1) > 0,
                  d1array(password, 0) ==
                  d1array(password, 0))) ==
      False), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-23 19:50:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),Implies(result3(_L2) > 0,(d1array(password, _n2)==d1array(password, _n2))))),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),Implies(And(result3(_L2 + 1) > 0,_n2>=0),(d1array(password, _n2)==d1array(password, _n2))))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),Implies(result3(_L2) > 0,(d1array(password, _n2)==d1array(password, _n2))))),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),Implies(And(result3(_L2 + 1) > 0,_n2>=0),(d1array(password, _n2)==d1array(password, _n2))))))

System try to prove 
Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),Implies(result3(_L2) > 0,(d1array(password, _n2)==d1array(password, _n2))))),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),Implies(And(result3(_L2 + 1) > 0,_n2>=0),(d1array(password, _n2)==d1array(password, _n2))))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
password1=Const('password1',arraySort)
guess1=Const('guess1',arraySort)
x1=Int('x1')
result1=Int('result1')
i1=Int('i1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
_N1=Const('_N1',IntSort())
guess=Const('guess',arraySort)
result3=Function('result3',IntSort(),IntSort())
_N2=Const('_N2',IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_n2=Int('_n2')
_n1=Int('_n1')
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
main=Int('main')
x=Int('x')
password=Const('password',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_L2=Int('_L2')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array5=Function('d1array5',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(i1 == _N1)
_s.add(x1 == If(result3(_N1) > 0,_N2,x))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(result3(_N1) > 0,d1array5(_x1, _x2, _N2),d1array(_x1, _x2)))))
_s.add(result1 == result3(_N1))
_s.add(main == 0)
_s.add(ForAll([_n1],Implies(_n1>=0,result3(_n1 + 1) == If(d1array(password, _n1)!=d1array(guess, _n1),0,result3(_n1)))))
_s.add(result3(0) == 1)
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(guess, _x2, _n2 + 1) == d1array5(guess, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array5(password, _x2, _n2 + 1) == d1array5(password, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, 0) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, 0) == d1array(password, _x2))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(guess, _x2, _N2) == d1array(guess, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array5(password, _x2, _N2) == d1array(password, _x2))))
_s.add(guess1 == guess)
_s.add(password1 == password)
_s.add(i1 == _N1)
_s.add(x1 == If(result3(_N1) > 0,_N2,x))
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(result3(_N1) > 0,d1array5(_x1, _x2, _N2),d1array(_x1, _x2)))))
_s.add(result1 == result3(_N1))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n2],Implies(And(And(_n2>=0,_n2<_L2),_L2>0),Implies(result3(_L2) > 0,(d1array(password, _n2)==d1array(password, _n2))))),ForAll([_n2],Implies(And(And(And(And(_n2>=0,_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),Implies(And(result3(_L2 + 1) > 0,_n2>=0),(d1array(password, _n2)==d1array(password, _n2))))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_password_true-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_password_true-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[asserted(Not(Implies(ForAll(_n2,
                            Implies(And(And(_n2 >= 0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                    Implies(result3(_L2) > 0,
                                        d1array(password,
                                        _n2) ==
                                        d1array(password,
                                        _n2)))),
                     ForAll(_n2,
                            Implies(And(And(And(And(_n2 >= 0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        _n2 < _L2 + 1),
                                        _L2 > 0),
                                    Implies(And(result3(_L2 +
                                        1) >
                                        0,
                                        _n2 >= 0),
                                        d1array(password,
                                        _n2) ==
                                        d1array(password,
                                        _n2))))))), trans(monotonicity(trans(monotonicity(trans(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L2) ==
                                        Not(_L2 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L2) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        trans(monotonicity(rewrite((result3(_L2) >
                                        0) ==
                                        Not(result3(_L2) <=
                                        0)),
                                        rewrite((d1array(password,
                                        Var(0)) ==
                                        d1array(password,
                                        Var(0))) ==
                                        True),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        Var(0)) ==
                                        d1array(password,
                                        Var(0))) ==
                                        Implies(Not(result3(_L2) <=
                                        0),
                                        True)),
                                        rewrite(Implies(Not(result3(_L2) <=
                                        0),
                                        True) ==
                                        True),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        Var(0)) ==
                                        d1array(password,
                                        Var(0))) ==
                                        True),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        Var(0)) ==
                                        d1array(password,
                                        Var(0)))) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        True)),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        True) ==
                                        True),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        Var(0)) ==
                                        d1array(password,
                                        Var(0)))) ==
                                        True),
                                        (ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        _n2) ==
                                        d1array(password,
                                        _n2))))) ==
                                        (ForAll(_n2, True))),
                                        elim-unused((ForAll(_n2,
                                        True)) ==
                                        True),
                                        (ForAll(_n2,
                                        Implies(And(And(_n2 >=
                                        0,
                                        _n2 < _L2),
                                        _L2 > 0),
                                        Implies(result3(_L2) >
                                        0,
                                        d1array(password,
                                        _n2) ==
                                        d1array(password,
                                        _n2))))) ==
                                        True),
                                      trans(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L2) ==
                                        Not(_L2 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L2) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0))),
                                        Not(_L2 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L2),
                                        _L2 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0))),
                                        trans(trans(monotonicity(rewrite(_L2 +
                                        1 ==
                                        1 + _L2),
                                        (Var(0) < _L2 + 1) ==
                                        (Var(0) < 1 + _L2)),
                                        rewrite((Var(0) <
                                        1 + _L2) ==
                                        Not(1 + _L2 <=
                                        Var(0))),
                                        (Var(0) < _L2 + 1) ==
                                        Not(1 + _L2 <=
                                        Var(0))),
                                        monotonicity(rewrite((1 +
                                        _L2 <=
                                        Var(0)) ==
                                        (_L2 <= -1 + Var(0))),
                                        Not(1 + _L2 <=
                                        Var(0)) ==
                                        Not(_L2 <=
                                        -1 + Var(0))),
                                        (Var(0) < _L2 + 1) ==
                                        Not(_L2 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Var(0) < _L2 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0)),
                                        Not(_L2 <=
                                        -1 + Var(0))) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L2),
                                        _L2 > 0),
                                        Var(0) < _L2 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L2 <= Var(0)),
                                        Not(_L2 <= 0),
                                        Not(_L2 <=
                                        -1 + Var(0)))),
                                        rewrite((_L2 > 0) ==
                                        Not(_L2 <= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved
