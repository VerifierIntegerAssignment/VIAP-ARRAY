from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
min1=Int('min1')
min3=Function('min3',IntSort(),IntSort(),IntSort())
min6=Function('min6',IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L3=Int('_L3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(min1 == min6(_N2))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),min3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) < min3(_n1, _n2),d2array(A, _n2, _n1),min3(_n1, _n2)))))
_s.add(ForAll([_n2],min3(0, _n2) == min6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,min6(_n2 + 1) == min3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(min6(0) == d2array(A, 0, 0))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array(A, _n4, _n3) >= min6(_L4))))
_s.add(_L4 >= 0)
_s.add(A1 == A)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(min1 == min6(_N2))
_s.add(Not(Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) >= min3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) >= min3(_L3 + 1, _L4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/min-2-u/min-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/min-2-u/min-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"