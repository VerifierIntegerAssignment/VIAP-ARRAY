>>> prove_auto(file_name)
Program Body
{
  int RET = 0;
  int _1_PROVE[][];
  int i;
  int j;
  int m;
  int n;
  int p;
  int A[][];
  int min;
  i = 0;
  j = 0;
  min = A[0][0];
  while (i < m)
  {
    j = 0;
    while (j < n)
    {
      if (A[i][j] < min)
      {
        min = A[i][j];
      }

      j = j + 1;
    }

    i = i + 1;
  }

  i = 0;
  j = 0;
  while (i < m)
  {
    j = 0;
    while (j < n)
    {
      _1_PROVE[i][j] = A[i][j] >= min;
      j = j + 1;
    }

    i = i + 1;
  }

}

Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ A:array j:int min:int i:int _1_PROVE:array m:int RET:int n:int p:int}
Program Body
{
  int RET = 0;
  int _1_FAILED = 0;
  if (cond <= 0)
  {
    ERROR:
    

    _1_FAILED = 1;
  }

}

Function Name:
__VERIFIER_assert
Return Type:
void
Input Variables:
{ cond:int}
Local Variables:
{ _1_FAILED:int RET:int}
Output for main:
Output in prefix notation:
1. Frame axioms:
(= A1 A)
(= p1 p)
(= m1 m)
(= n1 n)

2. Output equations:
(= i1 (+ _N4 0))
(= j1 (j11 _N4))
(= (d2array1 _x1 _x2 _x3) (d2array11 _x1 _x2 _x3 _N4))
(= main 0)
(= min1 (min6 _N2))

3. Other axioms:
(= (min3 (+ _n1 1) _n2) (ite (< (d2array A (+ _n2 0) (+ _n1 0)) (min3 _n1 _n2)) (d2array A (+ _n2 0) (+ _n1 0)) (min3 _n1 _n2)))
(= (min3 0 _n2) (min6 _n2))
(>= (_N1 _n2) (+ (- 0) n))
(implies (< _n1 (_N1 _n2)) (< (+ _n1 0) n))
(= (j6 (+ _n2 1)) (+ (_N1 _n2) 0))
(= (min6 (+ _n2 1)) (min3 (_N1 _n2) _n2))
(= (j6 0) 0)
(= (min6 0) (d2array A 0 0))
(>= _N2 (+ (- 0) m))
(implies (< _n2 _N2) (< (+ _n2 0) m))
(= (d2array8 _x1 _x2 _x3 (+ _n3 1) _n4) (d2array8 _x1 _x2 _x3 _n3 _n4))
(= (d2array8 _x1 _x2 _x3 0 _n4) (d2array11 _x1 _x2 _x3 _n4))
(>= (_N3 _n4) (+ (- 0) n))
(implies (< _n3 (_N3 _n4)) (< (+ _n3 0) n))
(= (j11 (+ _n4 1)) (+ (_N3 _n4) 0))
(= (d2array11 _x1 _x2 _x3 (+ _n4 1)) (d2array8 _x1 _x2 _x3 (_N3 _n4) _n4))
(= (j11 0) 0)
(= (d2array11 _x1 _x2 _x3 0) (d2array _x1 _x2 _x3))
(>= _N4 (+ (- 0) m))
(implies (< _n4 _N4) (< (+ _n4 0) m))

Output in normal notation:
1. Frame axioms:
A1 = A
p1 = p
m1 = m
n1 = n

2. Output equations:
i1 = (_N4+0)
j1 = j11(_N4)
d2array1(_x1,_x2,_x3) = d2array11(_x1,_x2,_x3,_N4)
main = 0
min1 = min6(_N2)

3. Other axioms:
min3((_n1+1),_n2) = ite((d2array(A,(_n2+0),(_n1+0))<min3(_n1,_n2)),d2array(A,(_n2+0),(_n1+0)),min3(_n1,_n2))
min3(0,_n2) = min6(_n2)
(_N1(_n2)>=(-(0)+n))
(_n1<_N1(_n2)) -> ((_n1+0)<n)
j6((_n2+1)) = (_N1(_n2)+0)
min6((_n2+1)) = min3(_N1(_n2),_n2)
j6(0) = 0
min6(0) = d2array(A,0,0)
(_N2>=(-(0)+m))
(_n2<_N2) -> ((_n2+0)<m)
d2array8(_x1,_x2,_x3,(_n3+1),_n4) = d2array8(_x1,_x2,_x3,_n3,_n4)
d2array8(_x1,_x2,_x3,0,_n4) = d2array11(_x1,_x2,_x3,_n4)
(_N3(_n4)>=(-(0)+n))
(_n3<_N3(_n4)) -> ((_n3+0)<n)
j11((_n4+1)) = (_N3(_n4)+0)
d2array11(_x1,_x2,_x3,(_n4+1)) = d2array8(_x1,_x2,_x3,_N3(_n4),_n4)
j11(0) = 0
d2array11(_x1,_x2,_x3,0) = d2array(_x1,_x2,_x3)
(_N4>=(-(0)+m))
(_n4<_N4) -> ((_n4+0)<m)

4. Assumption :

5. Assertion :
(d2array11(A,(_n4+0),(_n3+0),_N4)>=min6(_N2))
Output for __VERIFIER_assert:
Output in prefix notation:
1. Frame axioms:
(= (cond1 cond) cond)

2. Output equations:
(= (_1_FAILED1 cond) (ite (<= cond 0) 1 0))
(= (__VERIFIER_assert cond) 0)

3. Other axioms:

Output in normal notation:
1. Frame axioms:
cond1(cond) = cond

2. Output equations:
_1_FAILED1(cond) = ite((cond<=0),1,0)
__VERIFIER_assert(cond) = 0

3. Other axioms:

4. Assumption :

5. Assertion :
Translation Time--
3526

----Proving Process----


Function Name--main
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))
Successfully Proved

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))
Successfully Proved
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))
Successfully Proved
A
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))
Successfully Proved
=====================Main Proving Process=====================

Axiomes Added

d2array8(A,_x2,_x3,_N3(_n4),_n4) = d2array(A,_x2,_x3)
d2array11(A,_x2,_x3,_N4) = d2array(A,_x2,_x3)


==============================================================
System Try To Prove
(d2array(A,(_n4+0),(_n3+0))>=min6(_N2))
Induction Over--_N2
Base Case -
_N2=1
System tried to prove--
(d2array(A,(0+0),(_n3+0))>=min6(1))
System Try To Prove
(d2array(A,(0+0),(_n3+0))>=min3(_N1(0),0))
Induction Over--_N1(0)
Base Case -
_N1(0)=1
System tried to prove--
(d2array(A,(0+0),(0+0))>=min3(1,0))
Inductive Assumption
when _N1(0)=_L3
(d2array(A,(0+0),(_n3+0))>=min3(_L3,0))
Inductive Step
when _N1(0)=_L3+1
(d2array(A,(0+0),(_n3+0))>=min3((_L3+1),0))
Successfully Proved Base Case
Inductive Assumption
when _N2=_L4
(d2array(A,(_n4+0),(_n3+0))>=min6(_L4))
Inductive Step
when _N2=_L4+1
(d2array(A,(_n4+0),(_n3+0))>=min6((_L4+1)))
Result
Failed to prove
System Try To Prove
None
Induction Over--_N1(_L4)
Base Case -
_N1(_L4)=1
System tried to prove--
(d2array(A,(_n4+0),(0+0))>=min3(1,_L4))
Inductive Assumption
when _N1(_L4)=_L3
(d2array(A,(_n4+0),(_n3+0))>=min3(_L3,_L4))
Inductive Step
when _N1(_L4)=_L3+1
(d2array(A,(_n4+0),(_n3+0))>=min3((_L3+1),_L4))
Successfully Proved

Function Name--__VERIFIER_assert
Time Taken by Proving Process--
360865
