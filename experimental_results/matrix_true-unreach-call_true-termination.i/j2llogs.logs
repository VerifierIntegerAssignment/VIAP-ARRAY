
***********************
2017-05-14 01:14:39
***********************

Command--Translate 

Parameters--
 File Name--matrix_false-unreach-call_true-termination.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k4(_n1 + 1)=k4(_n1) + 1,k4(0)=k
 Closed Form Solution
_n1 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j7(_n2 + 1)=j7(_n2) + 1,j7(0)=j
 Closed Form Solution
_n2 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k9(_n3 + 1)=k9(_n3) + 1,k9(0)=k
 Closed Form Solution
_n3 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j12(_n4 + 1)=j12(_n4) + 1,j12(0)=j
 Closed Form Solution
_n4 + j

***********************
2017-05-14 01:14:42
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, 0) == d2array(matriz, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, 0) == d2array(matriz, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, 0) == d2array(matriz, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
matriz1=Const('matriz1',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k12=Function('k12',IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
matriz=Const('matriz',arraySort)
d2array9=Function('d2array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
N_LIN1=Int('N_LIN1')
__VERIFIER_nondet_uint=Int('__VERIFIER_nondet_uint')
k1=Int('k1')
k7=Function('k7',IntSort(),IntSort())
main=Int('main')
d2array12=Function('d2array12',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N2=Const('_N2',IntSort())
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
N_COL1=Int('N_COL1')
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
maior7=Function('maior7',IntSort(),IntSort())
maior4=Function('maior4',IntSort(),IntSort(),IntSort())
_n1=Int('_n1')
_n4=Int('_n4')
maior1=Int('maior1')
_n3=Int('_n3')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
k=Int('k')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array12=Function('d2array12',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array9=Function('d2array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(matriz1 == matriz)
_s.add(k1 == k12(_N4))
_s.add(j1 == _N4)
_s.add(maior1 == maior7(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array12(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(N_COL1 == __VERIFIER_nondet_uint)
_s.add(N_LIN1 == __VERIFIER_nondet_uint)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),maior4(_n1 + 1, _n2) == If(If(And((matriz==matriz),And((_n2==_n2),(_n1==_n1))),__VERIFIER_nondet_int,d2array4(matriz, _n2, _n1, _n1, _n2))>maior4(_n1, _n2),If(And((matriz==matriz),And((_n2==_n2),(_n1==_n1))),__VERIFIER_nondet_int,d2array4(matriz, _n2, _n1, _n1, _n2)),maior4(_n1, _n2)))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array4(matriz, _n2, _n1, _n1 + 1, _n2) == __VERIFIER_nondet_int)))
_s.add(ForAll([_n2],maior4(0, _n2) == maior7(_n2)))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array4(matriz, _x2, _x3, 0, _n2) == d2array7(matriz, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= __VERIFIER_nondet_uint)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < __VERIFIER_nondet_uint)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < __VERIFIER_nondet_uint))))
_s.add(ForAll([_n2],Implies(_n2>=0,k7(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,maior7(_n2 + 1) == maior4(_N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array7(matriz, _x2, _x3, _n2 + 1) == d2array4(matriz, _x2, _x3, _N1(_n2), _n2))))
_s.add(k7(0) == k)
_s.add(maior7(0) == __VERIFIER_nondet_int)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, 0) == d2array(matriz, _x2, _x3))))
_s.add(_N2 >= __VERIFIER_nondet_uint)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < __VERIFIER_nondet_uint)))
_s.add(Or(_N2==0,_N2 - 1 < __VERIFIER_nondet_uint))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array9(matriz, _x2, _x3, _n3 + 1, _n4) == d2array9(matriz, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array9(matriz, _x2, _x3, 0, _n4) == d2array12(matriz, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= __VERIFIER_nondet_uint)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < __VERIFIER_nondet_uint)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < __VERIFIER_nondet_uint))))
_s.add(ForAll([_n4],Implies(_n4>=0,k12(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array12(matriz, _x2, _x3, _n4 + 1) == d2array9(matriz, _x2, _x3, _N3(_n4), _n4))))
_s.add(k12(0) == k7(_N2))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array12(matriz, _x2, _x3, 0) == d2array7(matriz, _x2, _x3, _N2))))
_s.add(_N4 >= __VERIFIER_nondet_uint)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < __VERIFIER_nondet_uint)))
_s.add(Or(_N4==0,_N4 - 1 < __VERIFIER_nondet_uint))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array7(matriz, _x2, _x3, _n2 + 1) == d2array4(matriz, _x2, _x3, _N1(_n2), _n2))))
_s.add(matriz1 == matriz)
_s.add(k1 == k12(_N4))
_s.add(j1 == _N4)
_s.add(maior1 == maior7(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array12(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(N_COL1 == __VERIFIER_nondet_uint)
_s.add(N_LIN1 == __VERIFIER_nondet_uint)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, 0) == d2array(matriz, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">matrix_false-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'matrix_false-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array7(matriz, _x2, _x3, 0) ==
                           d2array(matriz, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array7(matriz,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(matriz,
                                       Var(0),
                                       Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array7(matriz,
                                   Var(0),
                                   Var(1),
                                   0) ==
                          d2array(matriz, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array7(matriz, _x2, _x3, 0) ==
                               d2array(matriz, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array7(matriz, _x2, _x3, 0) ==
                          d2array(matriz, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array7(matriz, _x2, _x3, 0) ==
             d2array(matriz, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array7(matriz, _x2, _x3, 0) ==
                               d2array(matriz, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(matriz,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(matriz,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array7(matriz,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(matriz,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(matriz,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(matriz,
                                        _x2,
                                        _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array7(matriz,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(matriz,
                                        _x2,
                                        _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array7(matriz,
                                        _x2,
                                        _x3,
                                        0) ==
                                   d2array(matriz, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array7(matriz, _x2, _x3, 0) ==
                              d2array(matriz, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array7(matriz, _x2, _x3, 0) ==
                 d2array(matriz, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 01:14:44
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d2array4(matriz, _k2, 0, 1, _k2) == __VERIFIER_nondet_int']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d2array4(matriz, _k2, 0, 1, _k2) == __VERIFIER_nondet_int

System try to prove 
d2array4(matriz, _k2, 0, 1, _k2) == __VERIFIER_nondet_int

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
matriz1=Const('matriz1',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k12=Function('k12',IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
matriz=Const('matriz',arraySort)
d2array9=Function('d2array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
N_LIN1=Int('N_LIN1')
__VERIFIER_nondet_uint=Int('__VERIFIER_nondet_uint')
k1=Int('k1')
k7=Function('k7',IntSort(),IntSort())
main=Int('main')
d2array12=Function('d2array12',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N2=Const('_N2',IntSort())
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
N_COL1=Int('N_COL1')
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
maior7=Function('maior7',IntSort(),IntSort())
maior4=Function('maior4',IntSort(),IntSort(),IntSort())
_n1=Int('_n1')
_n4=Int('_n4')
maior1=Int('maior1')
_n3=Int('_n3')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
k=Int('k')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(matriz1 == matriz)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array4(matriz, _n2, _n1, _n1 + 1, _n2) == __VERIFIER_nondet_int)))
_s.add(ForAll([_n2],maior4(0, _n2) == maior7(_n2)))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array4(matriz, _x2, _x3, 0, _n2) == d2array7(matriz, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= __VERIFIER_nondet_uint)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < __VERIFIER_nondet_uint)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < __VERIFIER_nondet_uint))))
_s.add(ForAll([_n2],Implies(_n2>=0,k7(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,maior7(_n2 + 1) == maior4(_N1(_n2), _n2))))
_s.add(matriz1 == matriz)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(matriz, _x2, _x3, _k2) == d2array(matriz, _x2, _x3))))
_s.add(_k2>=0)
_s.add(Not(d2array4(matriz, _k2, 0, 1, _k2) == __VERIFIER_nondet_int))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">matrix_false-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'matrix_false-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

***********************
2017-05-14 01:23:05
***********************

Command--Translate 

Parameters--
 File Name--matrix_true-unreach-call_true-termination.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k4(_n1 + 1)=k4(_n1) + 1,k4(0)=k
 Closed Form Solution
_n1 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j7(_n2 + 1)=j7(_n2) + 1,j7(0)=j
 Closed Form Solution
_n2 + j

***********************
2017-05-14 01:23:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--d2array7(matriz, 0, 0, _N2) <= maior7(_N2)
 Strategy--Direct
System try to prove 
d2array7(matriz, 0, 0, _N2) <= maior7(_N2)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
j1=Int('j1')
matriz1=Const('matriz1',arraySort)
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
N_LIN1=Int('N_LIN1')
k1=Int('k1')
k7=Function('k7',IntSort(),IntSort())
main=Int('main')
_N2=Const('_N2',IntSort())
_N1=Function('_N1',IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
N_COL1=Int('N_COL1')
_n2=Int('_n2')
maior7=Function('maior7',IntSort(),IntSort())
maior4=Function('maior4',IntSort(),IntSort(),IntSort())
matriz=Const('matriz',arraySort)
maior1=Int('maior1')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
k=Int('k')
__VERIFIER_nondet_int=Int('__VERIFIER_nondet_int')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array4=Function('d2array4',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(matriz1 == matriz)
_s.add(k1 == k7(_N2))
_s.add(j1 == _N2)
_s.add(maior1 == maior7(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array7(_x1, _x2, _x3, _N2))))
_s.add(main == 0)
_s.add(N_COL1 == 1)
_s.add(N_LIN1 == 1)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),maior4(_n1 + 1, _n2) == If(If(And((matriz==matriz),And((_n2==_n2),(_n1==_n1))),__VERIFIER_nondet_int,d2array4(matriz, _n2, _n1, _n1, _n2))>=maior4(_n1, _n2),If(And((matriz==matriz),And((_n2==_n2),(_n1==_n1))),__VERIFIER_nondet_int,d2array4(matriz, _n2, _n1, _n1, _n2)),maior4(_n1, _n2)))))
_s.add(ForAll([_x3,_x2,_x1,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array4(_x1, _x2, _x3, _n1 + 1, _n2) == If(And((_x1==matriz),And((_x2==_n2),(_x3==_n1))),__VERIFIER_nondet_int,d2array4(_x1, _x2, _x3, _n1, _n2)))))
_s.add(ForAll([_n2],maior4(0, _n2) == maior7(_n2)))
_s.add(ForAll([_x3,_x2,_x1,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array4(_x1, _x2, _x3, 0, _n2) == d2array7(_x1, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= 1)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < 1)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < 1))))
_s.add(ForAll([_n2],Implies(_n2>=0,k7(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,maior7(_n2 + 1) == maior4(_N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_x1,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array7(_x1, _x2, _x3, _n2 + 1) == d2array4(_x1, _x2, _x3, _N1(_n2), _n2))))
_s.add(k7(0) == k)
_s.add(maior7(0) == __VERIFIER_nondet_int)
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array7(_x1, _x2, _x3, 0) == d2array(_x1, _x2, _x3))))
_s.add(_N2 >= 1)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 1)))
_s.add(Or(_N2==0,_N2 - 1 < 1))
_s.add(ForAll([_n2],_N1(_n2)>=0))
_s.add(_N2>=0)
_s.add(Not(d2array7(matriz, 0, 0, _N2) <= maior7(_N2)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">matrix_true-unreach-call_true-termination.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'matrix_true-unreach-call_true-termination.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(Not(d2array7(matriz, 0, 0, _N2) <= maior7(_N2))),
   monotonicity(rewrite((d2array7(matriz, 0, 0, _N2) <=
                         maior7(_N2)) ==
                        (maior7(_N2) +
                         -1*d2array7(matriz, 0, 0, _N2) >=
                         0)),
                Not(d2array7(matriz, 0, 0, _N2) <=
                    maior7(_N2)) ==
                Not(maior7(_N2) +
                    -1*d2array7(matriz, 0, 0, _N2) >=
                    0)),
   Not(maior7(_N2) + -1*d2array7(matriz, 0, 0, _N2) >= 0)), unit-resolution(th-lemma(Or(Not(maior7(_N2) == maior4(1, 0)),
                            maior7(_N2) + -1*maior4(1, 0) >=
                            0)),
                trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Or(Not(-1 + _N2 >= 0),
                                        maior7(1 + -1 + _N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2)))),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite((-1 +
                                        _N2 >=
                                        0) ==
                                        (_N2 >= 1)),
                                        Not(-1 + _N2 >= 0) ==
                                        Not(_N2 >= 1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        -1 +
                                        _N2 ==
                                        _N2),
                                        maior7(1 + -1 + _N2) ==
                                        maior7(_N2)),
                                        (maior7(1 + -1 + _N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2)) ==
                                        (maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))),
                                        Or(Not(-1 + _N2 >= 0),
                                        maior7(1 + -1 + _N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2)) ==
                                        Or(Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))),
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Or(Not(-1 + _N2 >= 0),
                                        maior7(1 + -1 + _N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))) ==
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Or(Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2)))),
                                        rewrite(Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Or(Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))) ==
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))),
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Or(Not(-1 + _N2 >= 0),
                                        maior7(1 + -1 + _N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))) ==
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))),
                                        Or(Not(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        Not(_N2 >= 1),
                                        maior7(_N2) ==
                                        maior4(_N1(-1 + _N2),
                                        -1 + _N2))),
                                      mp(mp~(mp(asserted(ForAll(_n2,
                                        Implies(_n2 >= 0,
                                        maior7(_n2 + 1) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        maior7(Var(0) + 1) ==
                                        maior7(1 + Var(0))),
                                        (maior7(Var(0) + 1) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))) ==
                                        (maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        maior7(Var(0) + 1) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        maior7(Var(0) + 1) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0)))),
                                        (ForAll(_n2,
                                        Implies(_n2 >= 0,
                                        maior7(_n2 + 1) ==
                                        maior4(_N1(_n2),
                                        _n2)))) ==
                                        (ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2))))),
                                        ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))),
                                        Or(Not(Var(0) >= 0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))))),
                                        ~(ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2))),
                                        ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2))))),
                                        ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))),
                                        quant-intro(refl(Or(Not(Var(0) >=
                                        0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        maior7(1 + Var(0)) ==
                                        maior4(_N1(Var(0)),
                                        Var(0)))),
                                        (ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2)))) ==
                                        (ForAll(_n2,
                                        Or(Not(_n2 >= 0),
                                        maior7(1 + _n2) ==
                                        maior4(_N1(_n2),
                                        _n2))))),
..., unit-resolution(th-lemma(Or(Not(__VERIFIER_nondet_int ==
                                maior4(1, 0)),
                            __VERIFIER_nondet_int +
                            -1*maior4(1, 0) <=
                            0)),
                symm(unit-resolution(def-axiom(Or(Not(If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0))),
                                        Not(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0),
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int)),
                                     unit-resolution(th-lemma(Or(Not(__VERIFIER_nondet_int ==
                                        maior4(0, 0)),
                                        __VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0)),
                                        trans(symm(asserted(maior7(0) ==
                                        __VERIFIER_nondet_int),
                                        __VERIFIER_nondet_int ==
                                        maior7(0)),
                                        symm(unit-resolution(quant-inst(Or(Not(ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2))),
                                        maior4(0, 0) ==
                                        maior7(0))),
                                        mp(mp~(asserted(ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2))),
                                        nnf-pos(refl(~(maior4(0,
                                        Var(0)) ==
                                        maior7(Var(0)),
                                        maior4(0, Var(0)) ==
                                        maior7(Var(0)))),
                                        ~(ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2)),
                                        ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2)))),
                                        ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2))),
                                        quant-intro(refl((maior4(0,
                                        Var(0)) ==
                                        maior7(Var(0))) ==
                                        (maior4(0, Var(0)) ==
                                        maior7(Var(0)))),
                                        (ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2))) ==
                                        (ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2)))),
                                        ForAll(_n2,
                                        maior4(0, _n2) ==
                                        maior7(_n2))),
                                        maior4(0, 0) ==
                                        maior7(0)),
                                        maior7(0) ==
                                        maior4(0, 0)),
                                        __VERIFIER_nondet_int ==
                                        maior4(0, 0)),
                                        __VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0),
                                     unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(_n1, _n2) >=
                                        0,
                                        maior4(1 + _n1, _n2) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + _n1, _n2) ==
                                        maior4(_n1, _n2))))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1 + 0, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + 0, 0) ==
                                        maior4(0, 0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        maior4(1 + 0, 0) ==
                                        maior4(1, 0)),
                                        (maior4(1 + 0, 0) ==
                                        __VERIFIER_nondet_int) ==
                                        (maior4(1, 0) ==
                                        __VERIFIER_nondet_int)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        maior4(1 + 0, 0) ==
                                        maior4(1, 0)),
                                        (maior4(1 + 0, 0) ==
                                        maior4(0, 0)) ==
                                        (maior4(1, 0) ==
                                        maior4(0, 0))),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1 + 0, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + 0, 0) ==
                                        maior4(0, 0)) ==
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1 + 0, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + 0, 0) ==
                                        maior4(0, 0))) ==
                                        Or(False,
                                        False,
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0)))),
                                        rewrite(Or(False,
                                        False,
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0))) ==
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1 + 0, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + 0, 0) ==
                                        maior4(0, 0))) ==
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(0, 0) >=
                                        0,
                                        maior4(1, 0) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1, 0) ==
                                        maior4(0, 0))),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(__VERIFIER_nondet_int +
                                        -1*maior4(_n1, _n2) >=
                                        0,
                                        maior4(1 + _n1, _n2) ==
                                        __VERIFIER_nondet_int,
                                        maior4(1 + _n1, _n2) ==
                                        maior4(_n1, _n2))))),
..., unit-resolution(th-lemma(Or(Not(__VERIFIER_nondet_int ==
                                d2array7(matriz, 0, 0, _N2)),
                            __VERIFIER_nondet_int +
                            -1*d2array7(matriz, 0, 0, _N2) >=
                            0)),
                trans(trans(trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x1,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(Or(Not(_x1 ==
                                        matriz),
                                        Not(_x2 == _n2),
                                        Not(_x3 == _n1)),
                                        d2array4(_x1,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array4(_x1,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2),
                                        d2array4(_x1,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        __VERIFIER_nondet_int)))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(Or(Not(matriz ==
                                        matriz),
                                        Not(0 == 0),
                                        Not(0 == 0)),
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        d2array4(matriz,
                                        0,
                                        0,
                                        0,
                                        0),
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        __VERIFIER_nondet_int)))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((matriz ==
                                        matriz) ==
                                        True),
                                        Not(matriz == matriz) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(matriz == matriz) ==
                                        False),
                                        trans(monotonicity(rewrite((0 ==
                                        0) ==
                                        True),
                                        Not(0 == 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 == 0) == False),
                                        trans(monotonicity(rewrite((0 ==
                                        0) ==
                                        True),
                                        Not(0 == 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 == 0) == False),
                                        Or(Not(matriz ==
                                        matriz),
                                        Not(0 == 0),
                                        Not(0 == 0)) ==
                                        Or(False,
                                        False,
                                        False)),
                                        rewrite(Or(False,
                                        False,
                                        False) ==
                                        False),
                                        Or(Not(matriz ==
                                        matriz),
                                        Not(0 == 0),
                                        Not(0 == 0)) ==
                                        False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1,
                                        0)),
                                        (d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        d2array4(matriz,
                                        0,
                                        0,
                                        0,
                                        0)) ==
                                        (d2array4(matriz,
                                        0,
                                        0,
                                        1,
                                        0) ==
                                        d2array4(matriz,
                                        0,
                                        0,
                                        0,
                                        0))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1,
                                        0)),
                                        (d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        __VERIFIER_nondet_int) ==
                                        (d2array4(matriz,
                                        0,
                                        0,
                                        1,
                                        0) ==
                                        __VERIFIER_nondet_int)),
                                        If(Or(Not(matriz ==
                                        matriz),
                                        Not(0 == 0),
                                        Not(0 == 0)),
                                        d2array4(matriz,
                                        0,
                                        0,
                                        1 + 0,
                                        0) ==
                                        d2array4(matriz,
                                        0,
..., False]

Result 
Successfully Proved

