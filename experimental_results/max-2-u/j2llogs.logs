
***********************
2017-05-20 00:47:55
***********************

Command--Translate 

Parameters--
 File Name--multi/max-2-n-u/max-2-n-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j3(_n1 + 1)=j3(_n1) + 1,j3(0)=j
 Closed Form Solution
_n1 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i6(_n2 + 1)=i6(_n2) + 1,i6(0)=i
 Closed Form Solution
_n2 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j8(_n3 + 1)=j8(_n3) + 1,j8(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i11(_n4 + 1)=i11(_n4) + 1,i11(0)=i
 Closed Form Solution
_n4 + i

***********************
2017-05-20 00:47:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array11(A, _x2, _x3, 0) ==
                           d2array(A, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(A, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array11(A, Var(0), Var(1), 0) ==
                          d2array(A, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array11(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array11(A, _x2, _x3, 0) ==
                          d2array(A, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array11(A, _x2, _x3, 0) ==
             d2array(A, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array11(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(A,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array11(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(A, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array11(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array11(A, _x2, _x3, 0) ==
                              d2array(A, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array11(A, _x2, _x3, 0) ==
                 d2array(A, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:48:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array8(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array8(A, _x2!4, _x3!5, 0, _k4) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array8(A, _x2!4, _x3!5, 0, _k4) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array8(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array11(A, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:48:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array8(A,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3)))

***********************
2017-05-20 00:48:06
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array11(A, _x2, _x3, _N4))))
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
Error

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3)))

***********************
2017-05-20 00:49:11
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))

System try to prove 
ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array11(A, _x2, _x3, _N4))))
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_n2],_N1(_n2)>=0))
_s.add(_N2>=0)
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(Not(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:51:18
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))

System try to prove 
ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:53:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d2array(A, 0, 0) <= m3(1, 0)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d2array(A, 0, 0) <= m3(1, 0)

System try to prove 
d2array(A, 0, 0) <= m3(1, 0)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(d2array(A, 0, 0) <= m3(1, 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[def-axiom(Or(Not(If(d2array(A, 0, 0) + -1*m3(0, 0) <= 0,
                    m3(1, 0) == m3(0, 0),
                    m3(1, 0) == d2array(A, 0, 0))),
             Not(d2array(A, 0, 0) + -1*m3(0, 0) <= 0),
             m3(1, 0) == m3(0, 0))), unit-resolution(th-lemma(Or(Not(d2array(A, 0, 0) == m3(0, 0)),
                            d2array(A, 0, 0) + -1*m3(0, 0) <=
                            0)),
                trans(symm(asserted(m6(0) ==
                                    d2array(A, 0, 0)),
                           d2array(A, 0, 0) == m6(0)),
                      symm(unit-resolution(quant-inst(Or(Not(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0))),
                                        mp(mp~(asserted(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        nnf-pos(refl(~(m3(0,
                                        Var(0)) ==
                                        m6(Var(0)),
                                        m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        ~(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        quant-intro(refl((m3(0,
                                        Var(0)) ==
                                        m6(Var(0))) ==
                                        (m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))) ==
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0)),
                           m6(0) == m3(0, 0)),
                      d2array(A, 0, 0) == m3(0, 0)),
                d2array(A, 0, 0) + -1*m3(0, 0) <= 0), mp(mp(unit-resolution(th-lemma(Or(Not(d2array(A, 0, 0) ==
                                      m3(1, 0)),
                                  d2array(A, 0, 0) +
                                  -1*m3(1, 0) <=
                                  0)),
                      mp(asserted(Not(d2array(A, 0, 0) <=
                                      m3(1, 0))),
                         monotonicity(rewrite((d2array(A,
                                        0,
                                        0) <=
                                        m3(1, 0)) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(1, 0) <=
                                        0)),
                                      Not(d2array(A, 0, 0) <=
                                        m3(1, 0)) ==
                                      Not(d2array(A, 0, 0) +
                                        -1*m3(1, 0) <=
                                        0)),
                         Not(d2array(A, 0, 0) + -1*m3(1, 0) <=
                             0)),
                      Not(d2array(A, 0, 0) == m3(1, 0))),
      monotonicity(commutativity((d2array(A, 0, 0) ==
                                  m3(1, 0)) ==
                                 (m3(1, 0) ==
                                  d2array(A, 0, 0))),
                   Not(d2array(A, 0, 0) == m3(1, 0)) ==
                   Not(m3(1, 0) == d2array(A, 0, 0))),
      Not(m3(1, 0) == d2array(A, 0, 0))),
   monotonicity(symm(monotonicity(trans(unit-resolution(quant-inst(Or(Not(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0))),
                                        mp(mp~(asserted(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        nnf-pos(refl(~(m3(0,
                                        Var(0)) ==
                                        m6(Var(0)),
                                        m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        ~(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        quant-intro(refl((m3(0,
                                        Var(0)) ==
                                        m6(Var(0))) ==
                                        (m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))) ==
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0)),
                                        asserted(m6(0) ==
                                        d2array(A, 0, 0)),
                                        m3(0, 0) ==
                                        d2array(A, 0, 0)),
                                  (m3(1, 0) == m3(0, 0)) ==
                                  (m3(1, 0) ==
                                   d2array(A, 0, 0))),
                     (m3(1, 0) == d2array(A, 0, 0)) ==
                     (m3(1, 0) == m3(0, 0))),
                Not(m3(1, 0) == d2array(A, 0, 0)) ==
                Not(m3(1, 0) == m3(0, 0))),
   Not(m3(1, 0) == m3(0, 0))), unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                 Or(Not(0 >= 0),
                                    Not(0 >= 0),
                                    If(m3(0, 0) +
                                       -1*d2array(A, 0, 0) >=
                                       0,
                                       m3(1 + 0, 0) ==
                                       m3(0, 0),
                                       m3(1 + 0, 0) ==
                                       d2array(A, 0, 0))))),
                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(rewrite(m3(0,
                                        0) +
                                        -1*d2array(A, 0, 0) ==
                                        -1*d2array(A, 0, 0) +
                                        m3(0, 0)),
                                        (m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0) ==
                                        (-1*d2array(A, 0, 0) +
                                        m3(0, 0) >=
                                        0)),
                                        rewrite((-1*
                                        d2array(A, 0, 0) +
                                        m3(0, 0) >=
                                        0) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0)),
                                        (m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, 0) ==
                                        m3(1, 0)),
                                        (m3(1 + 0, 0) ==
                                        m3(0, 0)) ==
                                        (m3(1, 0) ==
                                        m3(0, 0))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, 0) ==
                                        m3(1, 0)),
                                        (m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)) ==
                                        (m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0))) ==
                                        Or(False,
                                        False,
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0)))),
                                        rewrite(Or(False,
                                        False,
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0))) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                      Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)))) ==
                                      Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0)))),
                         rewrite(Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                    If(d2array(A, 0, 0) +
                                       -1*m3(0, 0) <=
                                       0,
                                       m3(1, 0) == m3(0, 0),
                                       m3(1, 0) ==
                                       d2array(A, 0, 0))) ==
                                 Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:53:27
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))

System try to prove 
Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L3=Int('_L3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                 Or(Not(_n3!2 >= 0),
                                    _L3 + -1*_n3!2 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, 0) +
                                    -1*d2array(A, 0, _n3!2) >=
                                    0))),
                   rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                              Or(Not(_n3!2 >= 0),
                                 _L3 + -1*_n3!2 <= 0,
                                 _L3 <= 0,
                                 m3(_L3, 0) +
                                 -1*d2array(A, 0, _n3!2) >=
                                 0)) ==
                           Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                              Not(_n3!2 >= 0),
                              _L3 + -1*_n3!2 <= 0,
                              _L3 <= 0,
                              m3(_L3, 0) +
                              -1*d2array(A, 0, _n3!2) >=
                              0)),
                   Or(Not(ForAll(_n3,
                                 Or(Not(_n3 >= 0),
                                    _L3 + -1*_n3 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, 0) +
                                    -1*d2array(A, 0, _n3) >=
                                    0))),
                      Not(_n3!2 >= 0),
                      _L3 + -1*_n3!2 <= 0,
                      _L3 <= 0,
                      m3(_L3, 0) + -1*d2array(A, 0, _n3!2) >=
                      0)),
                mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        trans(trans(monotonicity(rewrite(...),
                                        (...) == (...)),
                                        rewrite((...) == ...),
                                        (... < ...) ==
                                        Not(...)),
                                        monotonicity(rewrite((...) ==
                                        (...)),
                                        Not(...) == Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        And(And(And(...,
                                        ...),
                                        ... > ...),
                                        Var(0) < ... + ...) ==
                                        And(And(... >= ...,
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(And(... >=
..., not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                     monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
..., unit-resolution(def-axiom(Or(Not(If(m3(_L3, 0) +
                                    -1*d2array(A, 0, _L3) >=
                                    0,
                                    m3(1 + _L3, 0) ==
                                    m3(_L3, 0),
                                    m3(1 + _L3, 0) ==
                                    d2array(A, 0, _L3))),
                             Not(m3(_L3, 0) +
                                 -1*d2array(A, 0, _L3) >=
                                 0),
                             m3(1 + _L3, 0) == m3(_L3, 0))),
                mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) ==
                                        m3(1 + _L3, 0)),
                                        m3(_L3, 0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0)),
                                   unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0),
                                        m3(1 + _L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0))),
                                        rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)) ==
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        Implies(And(And(...,
                                        ...),
                                        ... > ...),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...)) ==
                                        Implies(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...))),
                                        rewrite(Implies(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...)) ==
                                        Or(Not(And(...,
                                        ...,
                                        ...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...))),
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...),
                                        Not(...))),
                                        monotonicity(monotonicity(rewrite(... ==
                                        ...),
..., unit-resolution(th-lemma(Or(Not(m3(1 + _L3, 0) ==
                                d2array(A, 0, _L3)),
                            m3(1 + _L3, 0) +
                            -1*d2array(A, 0, _L3) >=
                            0)),
                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0),
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0),
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0),
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0))),
                                        mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) ==
                                        m3(1 + _L3, 0)),
                                        m3(_L3, 0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0)),
                                        unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0),
                                        m3(1 + _L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0))),
                                        rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)) ==
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(... + ..., 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        Implies(..., ...) ==
                                        Implies(..., ...)),
                                        rewrite(Implies(...,
                                        ...) ==
                                        Or(..., ...)),
                                        Implies(And(...,
                                        ...),
                                        ... <= ...) ==
                                        Or(Not(...),
                                        ... <= ...)),
                                        (ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        (ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        monotonicity(monotonicity(...,
                                        ...),
                                        (...) == (...)),
                                        Implies(..., ...) ==
                                        Implies(..., ...)),
                                        rewrite(Implies(...,
                                        ...) ==
                                        Or(..., ...)),
                                        Implies(And(...,
                                        ...),
                                        ... <= ...) ==
                                        Or(Not(...),
                                        ... <= ...)),
                                        (ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        (ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        Implies(ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        Implies(ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        rewrite(Implies(ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...))) ==
                                        Or(Not(ForAll(_n3,
                                        Or(..., ...))),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        Implies(ForAll(_n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:53:41
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))

System try to prove 
Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:55:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))

System try to prove 
ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array(A, _n4, _n3) <= m6(_L4))))
_s.add(_L4 >= 0)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[lemma(th-lemma(unit-resolution(unit-resolution(def-axiom(Or(Not(If(m3(0,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        m3(0, _L4)) ==
                                        (m3(1, _L4) ==
                                        m3(0, _L4))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        (m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        rewrite(Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)))) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        rewrite(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
..., unit-resolution(th-lemma(Or(m3(1, _L4) + -1*m3(0, _L4) >= 0,
                            m3(1, _L4) + -1*m3(0, _L4) <= 0)),
                lemma(th-lemma(hypothesis(m3(1, _L4) +
                                        -1*m3(0, _L4) >=
                                        0),
                               unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        False,
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        rewrite(Or(Not(_n4!2 >=
                                        0),
                                        False,
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        mp(mp(mp~(mp(mp(asserted(ForAll([_n4,
                                        _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))) ==
                                        (ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0)),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4))))),
                                        ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0)),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))),
                                        quant-intro(monotonicity(rewrite((d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4)) ==
                                        (m6(_L4) +
                                        -1*
                                        d2array(A,
                                        Var(1),
                                        Var(0)) >=
                                        0)),
..., unit-resolution(unit-resolution(def-axiom(Or(Not(If(m3(0,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Not(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0),
                                        m3(1, _L4) ==
                                        m3(0, _L4))),
                                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        m3(0, _L4)) ==
                                        (m3(1, _L4) ==
                                        m3(0, _L4))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        (m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        rewrite(Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)))) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        rewrite(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:55:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))

System try to prove 
Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L3=Int('_L3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array(A, _n4, _n3) <= m6(_L4))))
_s.add(_L4 >= 0)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(def-axiom(Or(Not(If(m3(_L3, _L4) +
                                    -1*d2array(A, _L4, _L3) >=
                                    0,
                                    m3(1 + _L3, _L4) ==
                                    m3(_L3, _L4),
                                    m3(1 + _L3, _L4) ==
                                    d2array(A, _L4, _L3))),
                             Not(m3(_L3, _L4) +
                                 -1*d2array(A, _L4, _L3) >=
                                 0),
                             m3(1 + _L3, _L4) ==
                             m3(_L3, _L4))),
                mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) ==
                                        m3(1 + _L3, _L4)),
                                        m3(_L3, _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0)),
                                   unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0),
                                        m3(1 + _L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
..., unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                 Or(Not(_n4!5 >= 0),
                                    Not(_n3!4 >= 0),
                                    _L3 + -1*_n3!4 <= 0,
                                    _L3 <= 0,
                                    d2array(A, _n4!5, _n3!4) +
                                    -1*m3(_L3, _L4) <=
                                    0))),
                   trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                      Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                      Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                         rewrite(Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                    Or(Not(_n4!5 >= 0),
                                       Not(_n3!4 >= 0),
                                       _L3 + -1*_n3!4 <= 0,
                                       _L3 <= 0,
                                       m3(_L3, _L4) +
                                       -1*
                                       d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                       0)) ==
                                 Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                    Not(_n4!5 >= 0),
                                    Not(_n3!4 >= 0),
                                    _L3 + -1*_n3!4 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, _L4) +
                                    -1*
                                    d2array(A, _n4!5, _n3!4) >=
                                    0)),
                         Or(Not(ForAll([_n4, _n3],
                                       Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                            Or(Not(_n4!5 >= 0),
                               Not(_n3!4 >= 0),
                               _L3 + -1*_n3!4 <= 0,
                               _L3 <= 0,
                               d2array(A, _n4!5, _n3!4) +
                               -1*m3(_L3, _L4) <=
                               0)) ==
                         Or(Not(ForAll([_n4, _n3],
                                       Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                            Not(_n4!5 >= 0),
                            Not(_n3!4 >= 0),
                            _L3 + -1*_n3!4 <= 0,
                            _L3 <= 0,
                            m3(_L3, _L4) +
                            -1*d2array(A, _n4!5, _n3!4) >=
                            0)),
                   Or(Not(ForAll([_n4, _n3],
                                 Or(Not(_n4 >= 0),
                                    Not(_n3 >= 0),
                                    _L3 + -1*_n3 <= 0,
                                    _L3 <= 0,
                                    d2array(A, _n4, _n3) +
                                    -1*m3(_L3, _L4) <=
                                    0))),
                      Not(_n4!5 >= 0),
                      Not(_n3!4 >= 0),
                      _L3 + -1*_n3!4 <= 0,
                      _L3 <= 0,
                      m3(_L3, _L4) +
                      -1*d2array(A, _n4!5, _n3!4) >=
                      0)),
                mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n4,
                                        _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))),
..., not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n4,
                                        _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))),
                                        ForAll([_n4, _n3],
                                        Implies(And(And(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3 + 1, _L4)))))),
                                     monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(0) < _L3) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L3 <= Var(0)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L3 <= Var(0))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(0) < _L3) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4)))) ==
                                        (ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        And(..., ...) ==
                                        And(..., ..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(...,
                                        ...,
                                        ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <= ... + ...)),
                                        And(And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...)) ==
                                        And(Var(1) >= 0,
..., unit-resolution(th-lemma(Or(Not(m3(1 + _L3, _L4) ==
                                d2array(A, _L4, _L3)),
                            m3(1 + _L3, _L4) +
                            -1*d2array(A, _L4, _L3) >=
                            0)),
                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4),
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4),
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0),
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4))),
                                        mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) ==
                                        m3(1 + _L3, _L4)),
                                        m3(_L3, _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0)),
                                        unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0),
                                        m3(1 + _L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:58:46
***********************

Command--Translate 

Parameters--
 File Name--multi/max-2-n-u/max-2-n-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j3(_n1 + 1)=j3(_n1) + 1,j3(0)=j
 Closed Form Solution
_n1 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i6(_n2 + 1)=i6(_n2) + 1,i6(0)=i
 Closed Form Solution
_n2 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j8(_n3 + 1)=j8(_n3) + 1,j8(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i11(_n4 + 1)=i11(_n4) + 1,i11(0)=i
 Closed Form Solution
_n4 + i

***********************
2017-05-20 00:58:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array11(A, _x2, _x3, 0) ==
                           d2array(A, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(A, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array11(A, Var(0), Var(1), 0) ==
                          d2array(A, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array11(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array11(A, _x2, _x3, 0) ==
                          d2array(A, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array11(A, _x2, _x3, 0) ==
             d2array(A, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array11(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array11(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(A,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array11(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(A, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array11(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array11(A, _x2, _x3, 0) ==
                              d2array(A, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array11(A, _x2, _x3, 0) ==
                 d2array(A, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:58:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array8(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array8(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array8(A, _x2!4, _x3!5, 0, _k4) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array8(A, _x2!4, _x3!5, 0, _k4) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array11(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array8(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array11(A, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array11(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array8(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array11(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:58:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array8(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array8(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array8(A,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array8(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array8(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array8(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array8(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array8(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3)))

***********************
2017-05-20 00:58:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array11(A, _x2, _x3, _N4))))
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array11(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array11(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
Error

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3)))

***********************
2017-05-20 01:00:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))

System try to prove 
ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array11(A, _x2, _x3, _N4))))
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_n2],_N1(_n2)>=0))
_s.add(_N2>=0)
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(Not(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array11(A, _n4, _n3, _N4) <= m6(_N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 01:02:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))

System try to prove 
ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n3],Implies(_n3>=0,d2array(A, 0, _n3) <= m6(1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 01:04:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d2array(A, 0, 0) <= m3(1, 0)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d2array(A, 0, 0) <= m3(1, 0)

System try to prove 
d2array(A, 0, 0) <= m3(1, 0)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(d2array(A, 0, 0) <= m3(1, 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[def-axiom(Or(Not(If(d2array(A, 0, 0) + -1*m3(0, 0) <= 0,
                    m3(1, 0) == m3(0, 0),
                    m3(1, 0) == d2array(A, 0, 0))),
             Not(d2array(A, 0, 0) + -1*m3(0, 0) <= 0),
             m3(1, 0) == m3(0, 0))), unit-resolution(th-lemma(Or(Not(d2array(A, 0, 0) == m3(0, 0)),
                            d2array(A, 0, 0) + -1*m3(0, 0) <=
                            0)),
                trans(symm(asserted(m6(0) ==
                                    d2array(A, 0, 0)),
                           d2array(A, 0, 0) == m6(0)),
                      symm(unit-resolution(quant-inst(Or(Not(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0))),
                                        mp(mp~(asserted(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        nnf-pos(refl(~(m3(0,
                                        Var(0)) ==
                                        m6(Var(0)),
                                        m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        ~(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        quant-intro(refl((m3(0,
                                        Var(0)) ==
                                        m6(Var(0))) ==
                                        (m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))) ==
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0)),
                           m6(0) == m3(0, 0)),
                      d2array(A, 0, 0) == m3(0, 0)),
                d2array(A, 0, 0) + -1*m3(0, 0) <= 0), mp(mp(unit-resolution(th-lemma(Or(Not(d2array(A, 0, 0) ==
                                      m3(1, 0)),
                                  d2array(A, 0, 0) +
                                  -1*m3(1, 0) <=
                                  0)),
                      mp(asserted(Not(d2array(A, 0, 0) <=
                                      m3(1, 0))),
                         monotonicity(rewrite((d2array(A,
                                        0,
                                        0) <=
                                        m3(1, 0)) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(1, 0) <=
                                        0)),
                                      Not(d2array(A, 0, 0) <=
                                        m3(1, 0)) ==
                                      Not(d2array(A, 0, 0) +
                                        -1*m3(1, 0) <=
                                        0)),
                         Not(d2array(A, 0, 0) + -1*m3(1, 0) <=
                             0)),
                      Not(d2array(A, 0, 0) == m3(1, 0))),
      monotonicity(commutativity((d2array(A, 0, 0) ==
                                  m3(1, 0)) ==
                                 (m3(1, 0) ==
                                  d2array(A, 0, 0))),
                   Not(d2array(A, 0, 0) == m3(1, 0)) ==
                   Not(m3(1, 0) == d2array(A, 0, 0))),
      Not(m3(1, 0) == d2array(A, 0, 0))),
   monotonicity(symm(monotonicity(trans(unit-resolution(quant-inst(Or(Not(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0))),
                                        mp(mp~(asserted(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        nnf-pos(refl(~(m3(0,
                                        Var(0)) ==
                                        m6(Var(0)),
                                        m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        ~(ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        quant-intro(refl((m3(0,
                                        Var(0)) ==
                                        m6(Var(0))) ==
                                        (m3(0, Var(0)) ==
                                        m6(Var(0)))),
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))) ==
                                        (ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2)))),
                                        ForAll(_n2,
                                        m3(0, _n2) ==
                                        m6(_n2))),
                                        m3(0, 0) == m6(0)),
                                        asserted(m6(0) ==
                                        d2array(A, 0, 0)),
                                        m3(0, 0) ==
                                        d2array(A, 0, 0)),
                                  (m3(1, 0) == m3(0, 0)) ==
                                  (m3(1, 0) ==
                                   d2array(A, 0, 0))),
                     (m3(1, 0) == d2array(A, 0, 0)) ==
                     (m3(1, 0) == m3(0, 0))),
                Not(m3(1, 0) == d2array(A, 0, 0)) ==
                Not(m3(1, 0) == m3(0, 0))),
   Not(m3(1, 0) == m3(0, 0))), unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                 Or(Not(0 >= 0),
                                    Not(0 >= 0),
                                    If(m3(0, 0) +
                                       -1*d2array(A, 0, 0) >=
                                       0,
                                       m3(1 + 0, 0) ==
                                       m3(0, 0),
                                       m3(1 + 0, 0) ==
                                       d2array(A, 0, 0))))),
                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(rewrite(m3(0,
                                        0) +
                                        -1*d2array(A, 0, 0) ==
                                        -1*d2array(A, 0, 0) +
                                        m3(0, 0)),
                                        (m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0) ==
                                        (-1*d2array(A, 0, 0) +
                                        m3(0, 0) >=
                                        0)),
                                        rewrite((-1*
                                        d2array(A, 0, 0) +
                                        m3(0, 0) >=
                                        0) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0)),
                                        (m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0) ==
                                        (d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, 0) ==
                                        m3(1, 0)),
                                        (m3(1 + 0, 0) ==
                                        m3(0, 0)) ==
                                        (m3(1, 0) ==
                                        m3(0, 0))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, 0) ==
                                        m3(1, 0)),
                                        (m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)) ==
                                        (m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0))) ==
                                        Or(False,
                                        False,
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0)))),
                                        rewrite(Or(False,
                                        False,
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0))) ==
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0))),
                                      Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        If(m3(0, 0) +
                                        -1*d2array(A, 0, 0) >=
                                        0,
                                        m3(1 + 0, 0) ==
                                        m3(0, 0),
                                        m3(1 + 0, 0) ==
                                        d2array(A, 0, 0)))) ==
                                      Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        If(d2array(A, 0, 0) +
                                        -1*m3(0, 0) <=
                                        0,
                                        m3(1, 0) == m3(0, 0),
                                        m3(1, 0) ==
                                        d2array(A, 0, 0)))),
                         rewrite(Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                    If(d2array(A, 0, 0) +
                                       -1*m3(0, 0) <=
                                       0,
                                       m3(1, 0) == m3(0, 0),
                                       m3(1, 0) ==
                                       d2array(A, 0, 0))) ==
                                 Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 01:04:17
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))

System try to prove 
Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L3=Int('_L3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n3],Implies(And(And(_n3>=0,_n3<_L3),_L3>0),d2array(A, 0, _n3) <= m3(_L3, 0))),ForAll([_n3],Implies(And(And(And(And(_n3>=0,_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, 0, _n3) <= m3(_L3 + 1, 0))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                 Or(Not(_n3!2 >= 0),
                                    _L3 + -1*_n3!2 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, 0) +
                                    -1*d2array(A, 0, _n3!2) >=
                                    0))),
                   rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                              Or(Not(_n3!2 >= 0),
                                 _L3 + -1*_n3!2 <= 0,
                                 _L3 <= 0,
                                 m3(_L3, 0) +
                                 -1*d2array(A, 0, _n3!2) >=
                                 0)) ==
                           Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                              Not(_n3!2 >= 0),
                              _L3 + -1*_n3!2 <= 0,
                              _L3 <= 0,
                              m3(_L3, 0) +
                              -1*d2array(A, 0, _n3!2) >=
                              0)),
                   Or(Not(ForAll(_n3,
                                 Or(Not(_n3 >= 0),
                                    _L3 + -1*_n3 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, 0) +
                                    -1*d2array(A, 0, _n3) >=
                                    0))),
                      Not(_n3!2 >= 0),
                      _L3 + -1*_n3!2 <= 0,
                      _L3 <= 0,
                      m3(_L3, 0) + -1*d2array(A, 0, _n3!2) >=
                      0)),
                mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        trans(trans(monotonicity(rewrite(...),
                                        (...) == (...)),
                                        rewrite((...) == ...),
                                        (... < ...) ==
                                        Not(...)),
                                        monotonicity(rewrite((...) ==
                                        (...)),
                                        Not(...) == Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        And(And(And(...,
                                        ...),
                                        ... > ...),
                                        Var(0) < ... + ...) ==
                                        And(And(... >= ...,
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(And(... >=
..., not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                     monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L3) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(_n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <= ... + ...))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1),
                                        _L3 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0),
                                        Not(_L3 <=
                                        -1 + Var(0)))),
                                        And(And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L3),
                                        _L3 > 0),
..., unit-resolution(def-axiom(Or(Not(If(m3(_L3, 0) +
                                    -1*d2array(A, 0, _L3) >=
                                    0,
                                    m3(1 + _L3, 0) ==
                                    m3(_L3, 0),
                                    m3(1 + _L3, 0) ==
                                    d2array(A, 0, _L3))),
                             Not(m3(_L3, 0) +
                                 -1*d2array(A, 0, _L3) >=
                                 0),
                             m3(1 + _L3, 0) == m3(_L3, 0))),
                mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) ==
                                        m3(1 + _L3, 0)),
                                        m3(_L3, 0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0)),
                                   unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0),
                                        m3(1 + _L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0))),
                                        rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)) ==
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(_n3 >=
                                        0,
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3 + 1, 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        Implies(And(And(...,
                                        ...),
                                        ... > ...),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...)) ==
                                        Implies(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...))),
                                        rewrite(Implies(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...)) ==
                                        Or(Not(And(...,
                                        ...,
                                        ...)),
                                        d2array(...,
                                        ...,
                                        ...) <=
                                        m3(..., ...))),
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0)) ==
                                        Or(Not(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...))),
                                        d2array(A,
                                        0,
                                        Var(0)) <=
                                        m3(_L3, 0))),
                                        (ForAll(_n3,
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0)))) ==
                                        (ForAll(_n3,
                                        Or(Not(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...))),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        rewrite((...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...),
                                        Not(...))),
                                        monotonicity(monotonicity(rewrite(... ==
                                        ...),
..., unit-resolution(th-lemma(Or(Not(m3(1 + _L3, 0) ==
                                d2array(A, 0, _L3)),
                            m3(1 + _L3, 0) +
                            -1*d2array(A, 0, _L3) >=
                            0)),
                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0),
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0,
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0),
                                        m3(1 + _L3, 0) ==
                                        d2array(A, 0, _L3))),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _L3) >=
                                        0),
                                        m3(1 + _L3, 0) ==
                                        m3(_L3, 0))),
                                        mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) ==
                                        m3(1 + _L3, 0)),
                                        m3(_L3, 0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0)),
                                        unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        0) +
                                        -1*m3(1 + _L3, 0) <=
                                        0),
                                        Not(m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0),
                                        m3(1 + _L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0))),
                                        rewrite(Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Or(Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)) ==
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        Or(Not(ForAll(_n3,
                                        Or(Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3) >=
                                        0))),
                                        Not(_n3!2 >= 0),
                                        _L3 + -1*_n3!2 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, 0) +
                                        -1*
                                        d2array(A, 0, _n3!2) >=
                                        0)),
                                        mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n3,
                                        Implies(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(_L3, 0))),
                                        ForAll(_n3,
                                        Implies(And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0),
                                        d2array(A, 0, _n3) <=
                                        m3(... + ..., 0)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        Implies(..., ...) ==
                                        Implies(..., ...)),
                                        rewrite(Implies(...,
                                        ...) ==
                                        Or(..., ...)),
                                        Implies(And(...,
                                        ...),
                                        ... <= ...) ==
                                        Or(Not(...),
                                        ... <= ...)),
                                        (ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        (ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        monotonicity(monotonicity(...,
                                        ...),
                                        (...) == (...)),
                                        Implies(..., ...) ==
                                        Implies(..., ...)),
                                        rewrite(Implies(...,
                                        ...) ==
                                        Or(..., ...)),
                                        Implies(And(...,
                                        ...),
                                        ... <= ...) ==
                                        Or(Not(...),
                                        ... <= ...)),
                                        (ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        (ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        Implies(ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Implies(And(...,
                                        ...),
                                        ... <= ...))) ==
                                        Implies(ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        rewrite(Implies(ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...))) ==
                                        Or(Not(ForAll(_n3,
                                        Or(..., ...))),
                                        ForAll(_n3,
                                        Or(Not(...),
                                        ... <= ...)))),
                                        Implies(ForAll(_n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 01:04:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))

System try to prove 
Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),d2array(A, _n4, _n3) <= m6(_L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n4<_L4),_L4>0),_n4<_L4+1),_L4>0),d2array(A, _n4, _n3) <= m6(_L4 + 1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 01:06:35
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))

System try to prove 
ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array(A, _n4, _n3) <= m6(_L4))))
_s.add(_L4 >= 0)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n4],Implies(_n4>=0,d2array(A, _n4, 0) <= m3(1, _L4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[lemma(th-lemma(unit-resolution(unit-resolution(def-axiom(Or(Not(If(m3(0,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        m3(0, _L4)) ==
                                        (m3(1, _L4) ==
                                        m3(0, _L4))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        (m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        rewrite(Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)))) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        rewrite(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
..., unit-resolution(th-lemma(Or(m3(1, _L4) + -1*m3(0, _L4) >= 0,
                            m3(1, _L4) + -1*m3(0, _L4) <= 0)),
                lemma(th-lemma(hypothesis(m3(1, _L4) +
                                        -1*m3(0, _L4) >=
                                        0),
                               unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        False,
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        rewrite(Or(Not(_n4!2 >=
                                        0),
                                        False,
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0) ==
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Or(Not(_n4!2 >= 0),
                                        Not(0 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4, _n3) >=
                                        0))),
                                        Not(_n4!2 >= 0),
                                        m6(_L4) +
                                        -1*
                                        d2array(A, _n4!2, 0) >=
                                        0)),
                                        mp(mp(mp~(mp(mp(asserted(ForAll([_n4,
                                        _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))) ==
                                        (ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0)),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4))))),
                                        ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0)),
                                        d2array(A, _n4, _n3) <=
                                        m6(_L4)))),
                                        quant-intro(monotonicity(rewrite((d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m6(_L4)) ==
                                        (m6(_L4) +
                                        -1*
                                        d2array(A,
                                        Var(1),
                                        Var(0)) >=
                                        0)),
..., unit-resolution(unit-resolution(def-axiom(Or(Not(If(m3(0,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Not(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0),
                                        m3(1, _L4) ==
                                        m3(0, _L4))),
                                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        m3(0, _L4)) ==
                                        (m3(1, _L4) ==
                                        m3(0, _L4))),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        m3(1 + 0, _L4) ==
                                        m3(1, _L4)),
                                        (m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        (m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)) ==
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        rewrite(Or(False,
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0))) ==
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0)))),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(0 >= 0),
                                        Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1 + 0, _L4) ==
                                        m3(0, _L4),
                                        m3(1 + 0, _L4) ==
                                        d2array(A, _L4, 0)))) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
                                        d2array(A, _L4, 0))))),
                                        rewrite(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        If(m3(_n1, _n2) +
                                        -1*
                                        d2array(A, _n2, _n1) >=
                                        0,
                                        m3(1 + _n1, _n2) ==
                                        m3(_n1, _n2),
                                        m3(1 + _n1, _n2) ==
                                        d2array(A, _n2, _n1))))),
                                        Or(Not(_L4 >= 0),
                                        If(m3(0, _L4) +
                                        -1*
                                        d2array(A, _L4, 0) >=
                                        0,
                                        m3(1, _L4) ==
                                        m3(0, _L4),
                                        m3(1, _L4) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 01:06:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))

System try to prove 
Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j6=Function('j6',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m6=Function('m6',IntSort(),IntSort())
m1=Int('m1')
m3=Function('m3',IntSort(),IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j11=Function('j11',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L4=Int('_L4')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L3=Int('_L3')
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array11=Function('d2array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array8=Function('d2array8',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),m3(_n1 + 1, _n2) == If(d2array(A, _n2, _n1) > m3(_n1, _n2),d2array(A, _n2, _n1),m3(_n1, _n2)))))
_s.add(ForAll([_n2],m3(0, _n2) == m6(_n2)))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j6(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,m6(_n2 + 1) == m3(_N1(_n2), _n2))))
_s.add(j6(0) == 0)
_s.add(m6(0) == d2array(A, 0, 0))
_s.add(_N2 >= m6(_N2))
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m6(_f(_n2)))))
_s.add(Or(_N2==0,_N2 - 1 < m6(_N2 - 1)))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array8(A, _x2, _x3, _n3 + 1, _n4) == d2array8(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, 0, _n4) == d2array11(A, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j11(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(j11(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(_N4 >= m6(_N2))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m6(_N2))))
_s.add(Or(_N4==0,_N4 - 1 < m6(_N2)))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array11(A, _x2, _x3, _n4 + 1) == d2array8(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array8(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array11(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),d2array(A, _n4, _n3) <= m6(_L4))))
_s.add(_L4 >= 0)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j11(_N4))
_s.add(m1 == m6(_N2))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array11(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(Implies(ForAll([_n4,_n3],Implies(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),d2array(A, _n4, _n3) <= m3(_L3, _L4))),ForAll([_n4,_n3],Implies(And(And(And(And(And(_n4>=0,_n3>=0),_n3<_L3),_L3>0),_n3<_L3+1),_L3>0),d2array(A, _n4, _n3) <= m3(_L3 + 1, _L4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/max-2-n-u/max-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/max-2-n-u/max-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(def-axiom(Or(Not(If(m3(_L3, _L4) +
                                    -1*d2array(A, _L4, _L3) >=
                                    0,
                                    m3(1 + _L3, _L4) ==
                                    m3(_L3, _L4),
                                    m3(1 + _L3, _L4) ==
                                    d2array(A, _L4, _L3))),
                             Not(m3(_L3, _L4) +
                                 -1*d2array(A, _L4, _L3) >=
                                 0),
                             m3(1 + _L3, _L4) ==
                             m3(_L3, _L4))),
                mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) ==
                                        m3(1 + _L3, _L4)),
                                        m3(_L3, _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0)),
                                   unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0),
                                        m3(1 + _L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
..., unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                 Or(Not(_n4!5 >= 0),
                                    Not(_n3!4 >= 0),
                                    _L3 + -1*_n3!4 <= 0,
                                    _L3 <= 0,
                                    d2array(A, _n4!5, _n3!4) +
                                    -1*m3(_L3, _L4) <=
                                    0))),
                   trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                      Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                      Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                         rewrite(Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                    Or(Not(_n4!5 >= 0),
                                       Not(_n3!4 >= 0),
                                       _L3 + -1*_n3!4 <= 0,
                                       _L3 <= 0,
                                       m3(_L3, _L4) +
                                       -1*
                                       d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                       0)) ==
                                 Or(Not(ForAll([_n4, _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                    Not(_n4!5 >= 0),
                                    Not(_n3!4 >= 0),
                                    _L3 + -1*_n3!4 <= 0,
                                    _L3 <= 0,
                                    m3(_L3, _L4) +
                                    -1*
                                    d2array(A, _n4!5, _n3!4) >=
                                    0)),
                         Or(Not(ForAll([_n4, _n3],
                                       Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                            Or(Not(_n4!5 >= 0),
                               Not(_n3!4 >= 0),
                               _L3 + -1*_n3!4 <= 0,
                               _L3 <= 0,
                               d2array(A, _n4!5, _n3!4) +
                               -1*m3(_L3, _L4) <=
                               0)) ==
                         Or(Not(ForAll([_n4, _n3],
                                       Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                            Not(_n4!5 >= 0),
                            Not(_n3!4 >= 0),
                            _L3 + -1*_n3!4 <= 0,
                            _L3 <= 0,
                            m3(_L3, _L4) +
                            -1*d2array(A, _n4!5, _n3!4) >=
                            0)),
                   Or(Not(ForAll([_n4, _n3],
                                 Or(Not(_n4 >= 0),
                                    Not(_n3 >= 0),
                                    _L3 + -1*_n3 <= 0,
                                    _L3 <= 0,
                                    d2array(A, _n4, _n3) +
                                    -1*m3(_L3, _L4) <=
                                    0))),
                      Not(_n4!5 >= 0),
                      Not(_n3!4 >= 0),
                      _L3 + -1*_n3!4 <= 0,
                      _L3 <= 0,
                      m3(_L3, _L4) +
                      -1*d2array(A, _n4!5, _n3!4) >=
                      0)),
                mp(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n4,
                                        _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))),
..., not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n4,
                                        _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))),
                                        ForAll([_n4, _n3],
                                        Implies(And(And(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        _n3 < _L3 + 1),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3 + 1, _L4)))))),
                                     monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(0) <
                                        _L3) ==
                                        Not(_L3 <= Var(0))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(0) < _L3) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L3 <= Var(0)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L3 <= Var(0))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(0) < _L3) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)))),
                                        rewrite((_L3 > 0) ==
                                        Not(_L3 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0))),
                                        Not(_L3 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0)),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(0) < _L3),
                                        _L3 > 0),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L3 <= Var(0)),
                                        Not(_L3 <= 0))),
                                        d2array(A,
                                        Var(1),
                                        Var(0)) <=
                                        m3(_L3, _L4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(And(And(_n4 >=
                                        0,
                                        _n3 >= 0),
                                        _n3 < _L3),
                                        _L3 > 0),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4)))) ==
                                        (ForAll([_n4, _n3],
                                        Or(Not(And(_n4 >= 0,
                                        _n3 >= 0,
                                        Not(_L3 <= _n3),
                                        Not(_L3 <= 0))),
                                        d2array(A, _n4, _n3) <=
                                        m3(_L3, _L4))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        And(..., ...) ==
                                        And(..., ..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(...,
                                        ...,
                                        ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L3 + 1) ==
                                        Not(_L3 <= ... + ...)),
                                        And(And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L3 > 0),
                                        Var(0) < _L3 + 1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L3 <= ... + ...)) ==
                                        And(Var(1) >= 0,
..., unit-resolution(th-lemma(Or(Not(m3(1 + _L3, _L4) ==
                                d2array(A, _L4, _L3)),
                            m3(1 + _L3, _L4) +
                            -1*d2array(A, _L4, _L3) >=
                            0)),
                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4),
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                unit-resolution(def-axiom(Or(Not(If(m3(_L3,
                                        _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0,
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4),
                                        m3(1 + _L3, _L4) ==
                                        d2array(A, _L4, _L3))),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A, _L4, _L3) >=
                                        0),
                                        m3(1 + _L3, _L4) ==
                                        m3(_L3, _L4))),
                                        mp(unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) ==
                                        m3(1 + _L3, _L4)),
                                        m3(_L3, _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0)),
                                        unit-resolution(th-lemma(Or(Not(m3(_L3,
                                        _L4) +
                                        -1*m3(1 + _L3, _L4) <=
                                        0),
                                        Not(m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0),
                                        m3(1 + _L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) ==
                                        -1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (-1*m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0)),
                                        rewrite((-1*
                                        m3(_L3, _L4) +
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        (d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        (m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0) ==
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) +
                                        -1*m3(_L3, _L4) <=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0))),
                                        rewrite(Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
                                        Or(Not(_n4!5 >= 0),
                                        Not(_n3!4 >= 0),
                                        _L3 + -1*_n3!4 <= 0,
                                        _L3 <= 0,
                                        m3(_L3, _L4) +
                                        -1*
                                        d2array(A,
                                        _n4!5,
                                        _n3!4) >=
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n3],
                                        Or(Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        _L3 + -1*_n3 <= 0,
                                        _L3 <= 0,
                                        d2array(A, _n4, _n3) +
                                        -1*m3(_L3, _L4) <=
                                        0))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved
