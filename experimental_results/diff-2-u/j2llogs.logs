
***********************
2017-05-15 00:09:52
***********************

Command--Translate 

Parameters--
 File Name--multi/diff-2-u/diff-2-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j2(_n1 + 1)=j2(_n1) + 1,j2(0)=j
 Closed Form Solution
_n1 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i5(_n2 + 1)=i5(_n2) + 1,i5(0)=i
 Closed Form Solution
_n2 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j7(_n3 + 1)=j7(_n3) + 1,j7(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i10(_n4 + 1)=i10(_n4) + 1,i10(0)=i
 Closed Form Solution
_n4 + i

***********************
2017-05-15 00:09:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(A, _x2, _x3, 0) ==
                           d2array(A, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(A, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(A, Var(0), Var(1), 0) ==
                          d2array(A, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(A, _x2, _x3, 0) ==
                          d2array(A, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(A, _x2, _x3, 0) ==
             d2array(A, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(A,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(A, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(A, _x2, _x3, 0) ==
                              d2array(A, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(A, _x2, _x3, 0) ==
                 d2array(A, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:09:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(C, _x2, _x3, 0) ==
                           d2array(C, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(C, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(C, Var(0), Var(1), 0) ==
                          d2array(C, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(C, _x2, _x3, 0) ==
                               d2array(C, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(C, _x2, _x3, 0) ==
                          d2array(C, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(C, _x2, _x3, 0) ==
             d2array(C, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(C, _x2, _x3, 0) ==
                               d2array(C, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(C,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(C,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(C, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(C, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(C, _x2, _x3, 0) ==
                                   d2array(C, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(C, _x2, _x3, 0) ==
                              d2array(C, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(C, _x2, _x3, 0) ==
                 d2array(C, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:00
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(B, _x2, _x3, 0) ==
                           d2array(B, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(B, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(B, Var(0), Var(1), 0) ==
                          d2array(B, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(B, _x2, _x3, 0) ==
                               d2array(B, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(B, _x2, _x3, 0) ==
                          d2array(B, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(B, _x2, _x3, 0) ==
             d2array(B, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(B, _x2, _x3, 0) ==
                               d2array(B, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(B,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(B, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(B, _x2, _x3, 0) ==
                                   d2array(B, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(B, _x2, _x3, 0) ==
                              d2array(B, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(B, _x2, _x3, 0) ==
                 d2array(B, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:02
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array2(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array2(A, _x2!4, _x3!5, 0, _k2) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array2(A, _x2!4, _x3!5, 0, _k2) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                        d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k2 >= 0),
                                       d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                       d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k2 >= 0),
                                    d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                    d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k2 >= 0),
                            d2array2(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array5(A, _x2!4, _x3!5, _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:04
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array2(A,
                                        _x2,
                                        _x3,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A, _x2, _x3),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        (d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:10:06
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)

System try to prove 
d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(_k2 >= 0),
                    d2array2(B, _k2, 0, 0, _k2) +
                    -1*d2array2(A, _k2, 0, 0, _k2) +
                    d2array2(C, _k2, 0, 1 + 0, _k2) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2)),
                                        rewrite(d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                        (d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        0) ==
                                        (d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) ==
                                        0)),
                                        Or(Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        0) ==
                                        Or(False,
                                        Not(_k2 >= 0),
                                        d2array2(C,
                                        _k2,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., asserted(_k2 >= 0), mp(mp(asserted(Not(d2array2(C, _k2, 0, 1, _k2) ==
                   d2array2(A, _k2, 0, 0, _k2) -
                   d2array2(B, _k2, 0, 0, _k2))),
      monotonicity(monotonicity(rewrite(d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                (d2array2(C, _k2, 0, 1, _k2) ==
                                 d2array2(A, _k2, 0, 0, _k2) -
                                 d2array2(B, _k2, 0, 0, _k2)) ==
                                (d2array2(C, _k2, 0, 1, _k2) ==
                                 d2array2(A, _k2, 0, 0, _k2) +
                                 -1*
                                 d2array2(B, _k2, 0, 0, _k2))),
                   Not(d2array2(C, _k2, 0, 1, _k2) ==
                       d2array2(A, _k2, 0, 0, _k2) -
                       d2array2(B, _k2, 0, 0, _k2)) ==
                   Not(d2array2(C, _k2, 0, 1, _k2) ==
                       d2array2(A, _k2, 0, 0, _k2) +
                       -1*d2array2(B, _k2, 0, 0, _k2))),
      Not(d2array2(C, _k2, 0, 1, _k2) ==
          d2array2(A, _k2, 0, 0, _k2) +
          -1*d2array2(B, _k2, 0, 0, _k2))),
   monotonicity(rewrite((d2array2(C, _k2, 0, 1, _k2) ==
                         d2array2(A, _k2, 0, 0, _k2) +
                         -1*d2array2(B, _k2, 0, 0, _k2)) ==
                        (d2array2(C, _k2, 0, 1, _k2) +
                         -1*d2array2(A, _k2, 0, 0, _k2) +
                         d2array2(B, _k2, 0, 0, _k2) ==
                         0)),
                Not(d2array2(C, _k2, 0, 1, _k2) ==
                    d2array2(A, _k2, 0, 0, _k2) +
                    -1*d2array2(B, _k2, 0, 0, _k2)) ==
                Not(d2array2(C, _k2, 0, 1, _k2) +
                    -1*d2array2(A, _k2, 0, 0, _k2) +
                    d2array2(B, _k2, 0, 0, _k2) ==
                    0)),
   Not(d2array2(C, _k2, 0, 1, _k2) +
       -1*d2array2(A, _k2, 0, 0, _k2) +
       d2array2(B, _k2, 0, 0, _k2) ==
       0)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:08
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

System try to prove 
Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(1 + _k1 >= 0),
                    Not(_k2 >= 0),
                    d2array2(B, _k2, 1 + _k1, 1 + _k1, _k2) +
                    -1*
                    d2array2(A, _k2, 1 + _k1, 1 + _k1, _k2) +
                    d2array2(C,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        0) ==
                                        (d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) ==
                                        0)),
                                   Or(Not(1 + _k1 >= 0),
                                      Not(_k2 >= 0),
                                      d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      -1*
                                      d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                      0) ==
                                   Or(Not(_k1 >= -1),
                                      Not(_k2 >= 0),
                                      d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      -1*
                                      d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) ==
                                      0)),
                      Or(Not(ForAll([_n1, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n2 >= 0),
                                       d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                                       -1*
                                       d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                                       d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                                       0))),
                         Or(Not(1 + _k1 >= 0),
                            Not(_k2 >= 0),
                            d2array2(B,
                                     _k2,
                                     1 + _k1,
                                     1 + _k1,
                                     _k2) +
                            -1*
                            d2array2(A,
                                     _k2,
                                     1 + _k1,
                                     1 + _k1,
                                     _k2) +
                            d2array2(C,
                                     _k2,
                                     1 + _k1,
                                     1 + 1 + _k1,
                                     _k2) ==
                            0)) ==
                      Or(Not(ForAll([_n1, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n2 >= 0),
                                       d2array2(B,
                                        _n2,
                                        _n1,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., asserted(_k2 >= 0), mp(not-or-elim(mp(asserted(Not(Implies(d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                       d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                       d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2),
                                       d2array2(C,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2) ==
                                       d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                       d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2)))),
                  monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2)),
                                        rewrite(d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2)),
                                        (d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2)) ==
                                        (d2array2(C,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d2array2(C,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        trans(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        rewrite(d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

System try to prove 
Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(_n1!5 >= 0),
                    Not(_k2!4 >= 0),
                    d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
                    -1*
                    d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
                    d2array2(C,
                             _k2!4,
                             _n1!5,
                             1 + _n1!5,
                             _k2!4) ==
                    0))),
   rewrite(Or(Not(ForAll([_n1, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n2 >= 0),
                            d2array2(B, _n2, _n1, _n1, _n2) +
                            -1*
                            d2array2(A, _n2, _n1, _n1, _n2) +
                            d2array2(C,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2) ==
                            0))),
              Or(Not(_n1!5 >= 0),
                 Not(_k2!4 >= 0),
                 d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
                 -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
                 d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
                 0)) ==
           Or(Not(ForAll([_n1, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n2 >= 0),
                            d2array2(B, _n2, _n1, _n1, _n2) +
                            -1*
                            d2array2(A, _n2, _n1, _n1, _n2) +
                            d2array2(C,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2) ==
                            0))),
              Not(_n1!5 >= 0),
              Not(_k2!4 >= 0),
              d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
              -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
              d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
              0)),
   Or(Not(ForAll([_n1, _n2],
                 Or(Not(_n1 >= 0),
                    Not(_n2 >= 0),
                    d2array2(B, _n2, _n1, _n1, _n2) +
                    -1*d2array2(A, _n2, _n1, _n1, _n2) +
                    d2array2(C, _n2, _n1, 1 + _n1, _n2) ==
                    0))),
      Not(_n1!5 >= 0),
      Not(_k2!4 >= 0),
      d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
      -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
      d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
      0)), mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2)))

***********************
2017-05-15 00:10:16
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array2(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array2(B, _x2!4, _x3!5, 0, _k2) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array2(B, _x2!4, _x3!5, 0, _k2) ==
                d2array(B, _x2!4, _x3!5))), mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                       d2array(B,
                                        _x2!4,
                                        _x3!5)))),
                      rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                 Or(Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                    d2array(B, _x2!4, _x3!5))) ==
                              Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                 Not(_x3!5 >= 0),
                                 Not(_x2!4 >= 0),
                                 d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                 d2array(B, _x2!4, _x3!5))),
                      Or(Not(ForAll([_x3, _x2],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                       d2array(B, _x2, _x3)))),
                         Not(_x3!5 >= 0),
                         Not(_x2!4 >= 0),
                         d2array5(B, _x2!4, _x3!5, _k2) ==
                         d2array(B, _x2!4, _x3!5))),
                   mp(mp(mp~(mp(asserted(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                             nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                     ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))),
                                       ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                             ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                       d2array(B, _x2, _x3)))),
                         quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Or(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:10:17
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array2(B,
                                        _x2,
                                        _x3,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B, _x2, _x3),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        (d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:10:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array5(A,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(A, _x2, _x3),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _k2 + 1) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2)),
                                        (d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                       Or(Not(_x3!231 >= 0),
                                        Not(_x2!230 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                        d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Or(Not(_x3!231 >= 0),
                                       Not(_x2!230 >= 0),
                                       Not(_k2 >= 0),
                                       d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                       d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Not(_x3!231 >= 0),
                                    Not(_x2!230 >= 0),
                                    Not(_k2 >= 0),
                                    d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                    d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                            Not(_x3!231 >= 0),
                            Not(_x2!230 >= 0),
                            Not(_k2 >= 0),
                            d2array5(A,
                                     _x2!230,
                                     _x3!231,
                                     1 + _k2) ==
                            d2array2(A,
                                     _x2!230,
                                     _x3!231,
                                     _N1(_k2),
                                     _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2 + 1) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        (d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:10:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-15 00:12:27
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                -1*
                                d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                0),
                            d2array2(B, 0, _n1!2, _N1(0), 0) +
                            d2array2(C, 0, _n1!2, _N1(0), 0) +
                            -1*
                            d2array2(A, 0, _n1!2, _N1(0), 0) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)),
                                        (d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        (d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0)),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        Or(Not(_n1!2 >= 0),
                                        False,
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0)),
                                        rewrite(Or(Not(_n1!2 >=
                                        0),
                                        False,
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
..., unit-resolution(unit-resolution(th-lemma(Or(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0,
                                        Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) <=
                                        0),
                                        Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d2array5(C,
                                        0,
                                        _n1,
                                        1) ==
                                        d2array2(A,
                                        0,
                                        _n1,
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        _n1,
                                        _N1(0),
                                        0))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)),
                                        (d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        (d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
..., unit-resolution(th-lemma(Or(Not(d2array5(C, 0, _n1!2, 1) ==
                                d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)),
                            d2array5(C, 0, _n1!2, 1) +
                            -1*
                            d2array2(C, 0, _n1!2, _N1(0), 0) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1)),
                                        (d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        (d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        False,
                                        False,
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        rewrite(Or(Not(_n1!2 >=
                                        0),
                                        False,
                                        False,
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:12:35
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)),
                            d2array5(C, _k2, _n1!2, 1 + _k2) +
                            -1*
                            d2array2(C,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)))),
                                   trans(monotonicity(rewrite(Or(Not(_n1!2 >=
                                        0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)) ==
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
..., unit-resolution(unit-resolution(th-lemma(Or(d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0,
                                        Not(d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) <=
                                        0),
                                        Not(d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d2array5(C,
                                        _k2 - 1,
                                        _n1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1),
                                        _k2 - 1) -
                                        d2array2(B,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1),
                                        _k2 - 1),
                                        d2array5(C,
                                        _k2,
                                        _n1,
                                        _k2 + 1) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _N1(_k2),
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _N1(_k2),
                                        _k2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(...*
                                        ... ==
                                        -1),
                                        _k2 + ...*... ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d2array5(C,
                                        _k2 - 1,
                                        Var(0),
                                        _k2) ==
                                        d2array5(C,
                                        -1 + _k2,
                                        Var(0),
                                        _k2)),
                                        trans(monotonicity(monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N1(... - ...) ==
                                        _N1(... + ...)),
                                        trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        d2array2(A,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(... - ...),
                                        _k2 - 1) ==
                                        d2array2(A,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(... + ...),
                                        -1 + _k2)),
                                        monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N1(... - ...) ==
                                        _N1(... + ...)),
                                        trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        d2array2(B,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(... - ...),
                                        _k2 - 1) ==
                                        d2array2(B,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(... + ...),
                                        -1 + _k2)),
                                        d2array2(A,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(... - ...),
                                        _k2 - 1) -
                                        d2array2(B,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(... - ...),
                                        _k2 - 1) ==
                                        d2array2(A,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(... + ...),
                                        -1 + _k2) -
                                        d2array2(B,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(... + ...),
                                        -1 + _k2)),
                                        rewrite(d2array2(A,
                                        -1 + _k2,
..., unit-resolution(th-lemma(Or(Not(d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                -1*
                                d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                -1*
                                d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                0),
                            d2array2(A,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) +
                            -1*
                            d2array2(C,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) +
                            -1*
                            d2array2(B,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0))),
                                   trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)),
                                        (d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0) ==
                                        (-1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0)),
                                        rewrite((-1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0) ==
                                        (d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0)),
                                        (d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0) ==
                                        (d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:12:44
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2 + 1) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2)),
                                        (d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                       Or(Not(_x3!243 >= 0),
                                        Not(_x2!242 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                        d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Or(Not(_x3!243 >= 0),
                                       Not(_x2!242 >= 0),
                                       Not(_k2 >= 0),
                                       d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                       d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Not(_x3!243 >= 0),
                                    Not(_x2!242 >= 0),
                                    Not(_k2 >= 0),
                                    d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                    d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                            Not(_x3!243 >= 0),
                            Not(_x2!242 >= 0),
                            Not(_k2 >= 0),
                            d2array5(B,
                                     _x2!242,
                                     _x3!243,
                                     1 + _k2) ==
                            d2array2(B,
                                     _x2!242,
                                     _x3!243,
                                     _N1(_k2),
                                     _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _n2 + 1) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        (d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:12:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array10(A, _x2, _x3, 0) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array10(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array10(A, _x2!4, _x3!5, 0) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array10(A, _x2!4, _x3!5, 0) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array10(A, _x2!4, _x3!5, 0) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                        d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2)))),
                         rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                       d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2))) ==
                                 Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                    d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2))),
                         Or(Not(ForAll([_x3, _x2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            d2array10(A, _x2!4, _x3!5, 0) ==
                            d2array5(A, _x2!4, _x3!5, _N2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                   ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:12:52
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                -1*
                                d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                -1*
                                d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                0),
                            d2array5(A, _n2!4, _n1!5, _N2) +
                            -1*
                            d2array5(B, _n2!4, _n1!5, _N2) +
                            -1*
                            d2array5(C, _n2!4, _n1!5, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0,
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) <=
                                        0),
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_n1, _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                            d2array10(C, _n2!4, _n1!5, 0) +
                            -1*
                            d2array5(C, _n2!4, _n1!5, _N2) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))),
                                   Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                      Not(_n1!5 >= 0),
                                      Not(_n2!4 >= 0),
                                      d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                      d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:12:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array10(B, _x2, _x3, 0) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array10(B, _x2, _x3, 0) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array10(B, _x2!4, _x3!5, 0) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array10(B, _x2!4, _x3!5, 0) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array10(B, _x2!4, _x3!5, 0) ==
                d2array(B, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                        d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2)))),
                         rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                       d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2))) ==
                                 Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                    d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2))),
                         Or(Not(ForAll([_x3, _x2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            d2array10(B, _x2!4, _x3!5, 0) ==
                            d2array5(B, _x2!4, _x3!5, _N2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                   ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:13:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array7(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array7(A, _x2!4, _x3!5, 0, _k4) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array7(A, _x2!4, _x3!5, 0, _k4) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array7(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array10(A, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:13:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array7(A,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:13:05
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4)),
                            d2array10(C, _n2!4, _n1!5, _k4) +
                            -1*
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     0,
                                     _k4) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
..., unit-resolution(unit-resolution(th-lemma(Or(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0,
                                        Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) <=
                                        0),
                                        Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                -1*
                                d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                0),
                            d2array10(C, _n2!4, _n1!5, _k4) +
                            -1*
                            d2array5(A, _n2!4, _n1!5, _N2) +
                            d2array5(B, _n2!4, _n1!5, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        0))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        (-1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        rewrite((-1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        (d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:13:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4) ==
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4)),
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     1 + _k3,
                                     _k4) +
                            -1*
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     2 + _k3,
                                     _k4) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)))),
                                      trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        0,
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) <=
                                        0),
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
..., unit-resolution(th-lemma(Or(Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                -1*
                                d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                -1*
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4) ==
                                0),
                            d2array5(A, _n2!4, _n1!5, _N2) +
                            -1*
                            d2array5(B, _n2!4, _n1!5, _N2) +
                            -1*
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     1 + _k3,
                                     _k4) <=
                            0)),
                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                      monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:13:19
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array7(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array7(B, _x2!4, _x3!5, 0, _k4) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array7(B, _x2!4, _x3!5, 0, _k4) ==
                d2array(B, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array7(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array10(B, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:13:21
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array7(B,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B, _x2, _x3),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:13:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array10(A,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _k4 + 1) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!265 >= 0),
                                        Not(_x2!264 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                        d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!265 >= 0),
                                       Not(_x2!264 >= 0),
                                       Not(_k4 >= 0),
                                       d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                       d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!265 >= 0),
                                    Not(_x2!264 >= 0),
                                    Not(_k4 >= 0),
                                    d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                    d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!265 >= 0),
                            Not(_x2!264 >= 0),
                            Not(_k4 >= 0),
                            d2array10(A,
                                      _x2!264,
                                      _x3!265,
                                      1 + _k4) ==
                            d2array7(A,
                                     _x2!264,
                                     _x3!265,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:13:28
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4)),
                            d2array10(C,
                                      _n2!268,
                                      _n1!269,
                                      1 + _k4) +
                            -1*
                            d2array7(C,
                                     _n2!268,
                                     _n1!269,
                                     _N3(_k4),
                                     _k4) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                      Not(_n1!269 >= 0),
                                      Not(_n2!268 >= 0),
                                      Not(_k4 >= 0),
                                      d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                      d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
..., unit-resolution(unit-resolution(th-lemma(Or(d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) ==
                                        0,
                                        Not(d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) <=
                                        0),
                                        Not(d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array10(C,
                                        _n2,
                                        _n1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _k4 + 1) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
..., unit-resolution(th-lemma(Or(Not(d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                -1*
                                d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                -1*
                                d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                0),
                            d2array5(A,
                                     _n2!268,
                                     _n1!269,
                                     _N2) +
                            -1*
                            d2array5(B,
                                     _n2!268,
                                     _n1!269,
                                     _N2) +
                            -1*
                            d2array7(C,
                                     _n2!268,
                                     _n1!269,
                                     _N3(_k4),
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0)),
                                   Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                      Not(_k4 >= 0),
                                      Not(_n1!269 >= 0),
                                      Not(_n2!268 >= 0),
                                      d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                      -1*
                                      d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                      -1*
                                      d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                      0)),
                                mp(mp(mp~(mp(mp(asserted(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Implies(And(_n4 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:13:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array10(B,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        d2array(B, _x2, _x3),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _k4 + 1) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!273 >= 0),
                                        Not(_x2!272 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                        d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!273 >= 0),
                                       Not(_x2!272 >= 0),
                                       Not(_k4 >= 0),
                                       d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                       d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!273 >= 0),
                                    Not(_x2!272 >= 0),
                                    Not(_k4 >= 0),
                                    d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                    d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!273 >= 0),
                            Not(_x2!272 >= 0),
                            Not(_k4 >= 0),
                            d2array10(B,
                                      _x2!272,
                                      _x3!273,
                                      1 + _k4) ==
                            d2array7(B,
                                     _x2!272,
                                     _x3!273,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _N4) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:13:42
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))

System try to prove 
ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= n)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < n)))
_s.add(Or(_N2==0,_N2 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _N4) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_n2],_N1(_n2)>=0))
_s.add(_N2>=0)
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(Not(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-u/diff-2-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-u/diff-2-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array(B, _n4!5, _n3!4) ==
                                d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4)),
                            d2array(B, _n4!5, _n3!4) +
                            -1*
                            d2array10(B, _n4!5, _n3!4, _N4) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                -1*
                                d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                0),
                            d2array10(C, _n4!5, _n3!4, _N4) +
                            d2array5(B, _n4!5, _n3!4, _N2) +
                            -1*
                            d2array5(A, _n4!5, _n3!4, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                                        (d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0) ==
                                        (d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0) ==
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
..., unit-resolution(th-lemma(Or(Not(d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                            d2array10(A, _n4!5, _n3!4, _N4) +
                            -1*
                            d2array5(A, _n4!5, _n3!4, _N2) >=
                            0)),
                trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))),
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))),
                                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
..., unit-resolution(unit-resolution(th-lemma(Or(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        0,
                                        Not(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) <=
                                        0),
                                        Not(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array10(C,
                                        _n4,
                                        _n3,
                                        _N4) ==
                                        d2array10(A,
                                        _n4,
                                        _n3,
                                        _N4) -
                                        d2array10(B,
                                        _n4,
                                        _n3,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)),
                                        (d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        (d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array10(C,
                                        _n4,
                                        _n3,
..., unit-resolution(th-lemma(Or(Not(d2array(B, _n4!5, _n3!4) ==
                                d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                            d2array(B, _n4!5, _n3!4) +
                            -1*
                            d2array5(B, _n4!5, _n3!4, _N2) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4)))),
                                      rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                      Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                   mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved
