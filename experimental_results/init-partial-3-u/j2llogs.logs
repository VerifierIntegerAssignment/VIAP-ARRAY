
***********************
2017-05-20 12:32:00
***********************

Command--Translate 

Parameters--
 File Name--multi/init-partial-3-u/init-partial-3-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k2(_n1 + 1)=k2(_n1) + 1,k2(0)=k
 Closed Form Solution
_n1 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j5(_n2 + 1)=j5(_n2) + 1,j5(0)=j
 Closed Form Solution
_n2 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i9(_n3 + 1)=i9(_n3) + 1,i9(0)=i
 Closed Form Solution
_n3 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k11(_n4 + 1)=k11(_n4) + 1,k11(0)=k
 Closed Form Solution
_n4 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j14(_n5 + 1)=j14(_n5) + 1,j14(0)=j
 Closed Form Solution
_n5 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i18(_n6 + 1)=i18(_n6) + 1,i18(0)=i
 Closed Form Solution
_n6 + i

***********************
2017-05-20 12:32:05
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0, _x4 >= 0)),
                           d3array9(A, _x2, _x3, _x4, 0) ==
                           d3array(A, _x2, _x3, _x4)))),
   quant-intro(trans(monotonicity(rewrite(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     rewrite(Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                             Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     Implies(And(Var(2) >= 0,
                                 And(Var(1) >= 0,
                                     Var(0) >= 0)),
                             d3array9(A,
                                      Var(1),
                                      Var(2),
                                      Var(0),
                                      0) ==
                             d3array(A,
                                     Var(1),
                                     Var(2),
                                     Var(0))) ==
                     Or(Not(And(Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d3array9(A,
                                 Var(1),
                                 Var(2),
                                 Var(0),
                                 0) ==
                        d3array(A, Var(1), Var(2), Var(0)))),
               (ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(A, _x2, _x3, _x4, 0) ==
                               d3array(A, _x2, _x3, _x4)))) ==
               (ForAll([_x3, _x2, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x4 >= 0)),
                          d3array9(A, _x2, _x3, _x4, 0) ==
                          d3array(A, _x2, _x3, _x4))))),
   ForAll([_x3, _x2, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
             d3array9(A, _x2, _x3, _x4, 0) ==
             d3array(A, _x2, _x3, _x4)))), mp(asserted(Not(ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(A, _x2, _x3, _x4, 0) ==
                               d3array(A, _x2, _x3, _x4))))),
   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                            (ForAll([_x3, _x2, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                            (ForAll([_x3, _x2, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                       d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                       d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                Not(ForAll([_x3, _x2, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        _x4 >= 0)),
                                   d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                   d3array(A, _x2, _x3, _x4)))) ==
                Not(ForAll([_x3, _x2, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x4 >= 0)),
                              d3array9(A, _x2, _x3, _x4, 0) ==
                              d3array(A, _x2, _x3, _x4))))),
   Not(ForAll([_x3, _x2, _x4],
              Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
                 d3array9(A, _x2, _x3, _x4, 0) ==
                 d3array(A, _x2, _x3, _x4))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:32:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(_k3>=0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                 d3array(A, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                   d3array(A, _x2, _x3, _x4)))),
                     Not(Or(Not(And(_x3!8 >= 0,
                                    _x2!7 >= 0,
                                    _x4!6 >= 0)),
                            d3array5(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array(A, _x2!7, _x3!8, _x4!6))))),
                Not(Or(Not(And(_x3!8 >= 0,
                               _x2!7 >= 0,
                               _x4!6 >= 0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                        d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                       d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                    d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))),
                         Or(Not(ForAll([_x3, _x2, _n3, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k3 >= 0),
                            Not(_x4!6 >= 0),
                            d3array5(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array9(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        _x4 >= 0))),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:32:14
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == C']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == C

System try to prove 
d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == C

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == C))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               C))),
                 Or(Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d3array2(A,
                             _k3,
                             _k2,
                             0,
                             1 + 0,
                             _k2,
                             _k3) ==
                    C))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        Or(False,
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                        C)),
                            rewrite(Or(False,
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                       C) ==
                                    Or(Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                       C)),
                            Or(Not(0 >= 0),
                               Not(_k3 >= 0),
                               Not(_k2 >= 0),
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                               C) ==
                            Or(Not(_k3 >= 0),
                               Not(_k2 >= 0),
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                               C)),
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       C))),
                         Or(Not(0 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     0,
                                     1 + 0,
                                     _k2,
                                     _k3) ==
                            C)) ==
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       C))),
                         Or(Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     0,
                                     1,
                                     _k2,
                                     _k3) ==
                            C))),
         rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                               Or(Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                  C))),
                    Or(Not(_k3 >= 0),
                       Not(_k2 >= 0),
                       d3array2(A, _k3, _k2, 0, 1, _k2, _k3) ==
                       C)) ==
                 Or(Not(ForAll([_n1, _n3, _n2],
                               Or(Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
..., mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     C))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       C) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  C)),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        C))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                    C)))),
             ForAll([_n1, _n3, _n2],
                    Or(Not(And(_n1 >= 0, _n3 >= 0, _n2 >= 0)),
                       d3array2(A,
                                _n3,
                                _n2,
                                _n1,
                                1 + _n1,
                                _n2,
                                _n3) ==
                       C))),
          nnf-pos(refl(~(Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C),
                         Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C))),
                  ~(ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
                                       _n3) ==
                              C)),
                    ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(Not(d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == C)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:32:15
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==C),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==C),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==C))

System try to prove 
Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==C),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==C),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               C))),
                 Or(Not(1 + _k1 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d3array2(A,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2,
                             _k3) ==
                    C))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                   Or(Not(1 + _k1 >= 0),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                      C) ==
                                   Or(Not(_k1 >= -1),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                      C)),
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       C))),
                         Or(Not(1 + _k1 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + 1 + _k1,
                                     _k2,
                                     _k3) ==
                            C)) ==
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       C))),
                         Or(Not(_k1 >= -1),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     2 + _k1,
                                     _k2,
                                     _k3) ==
                            C))),
         rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                               Or(Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                  C))),
                    Or(Not(_k1 >= -1),
                       Not(_k3 >= 0),
                       Not(_k2 >= 0),
                       d3array2(A,
                                _k3,
                                _k2,
                                1 + _k1,
                                2 + _k1,
                                _k2,
                                _k3) ==
                       C)) ==
                 Or(Not(ForAll([_n1, _n3, _n2],
                               Or(Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                  C))),
                    Not(_k1 >= -1),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d3array2(A,
                             _k3,
                             _k2,
                             1 + _k1,
                             2 + _k1,
                             _k2,
                             _k3) ==
                    C)),
         Or(Not(ForAll([_n1, _n3, _n2],
                       Or(Not(_n1 >= 0),
                          Not(_n3 >= 0),
                          Not(_n2 >= 0),
                          d3array2(A,
                                   _n3,
                                   _n2,
                                   _n1,
                                   1 + _n1,
                                   _n2,
                                   _n3) ==
                          C))),
            Or(Not(1 + _k1 >= 0),
               Not(_k3 >= 0),
               Not(_k2 >= 0),
               d3array2(A,
                        _k3,
                        _k2,
                        1 + _k1,
                        1 + 1 + _k1,
                        _k2,
                        _k3) ==
               C)) ==
..., mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     C))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       C) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  C)),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        C))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                    C)))),
             ForAll([_n1, _n3, _n2],
                    Or(Not(And(_n1 >= 0, _n3 >= 0, _n2 >= 0)),
                       d3array2(A,
                                _n3,
                                _n2,
                                _n1,
                                1 + _n1,
                                _n2,
                                _n3) ==
                       C))),
          nnf-pos(refl(~(Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C),
                         Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C))),
                  ~(ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
                                       _n3) ==
                              C)),
                    ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), not-or-elim(mp(asserted(Not(Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                    C,
                                    d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                    C))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                  rewrite(Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        Or(Not(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                  Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        C) ==
                                  Or(Not(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        C),
                                     d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                     C)),
                            Not(Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        C)) ==
                            Not(Or(Not(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:32:18
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==C),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==C))

System try to prove 
Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == C)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               C))),
                 Or(Not(_n1!8 >= 0),
                    Not(_k3!7 >= 0),
                    Not(_k2!6 >= 0),
                    d3array2(A,
                             _k3!7,
                             _k2!6,
                             _n1!8,
                             1 + _n1!8,
                             _k2!6,
                             _k3!7) ==
                    C))),
   rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3) ==
                            C))),
              Or(Not(_n1!8 >= 0),
                 Not(_k3!7 >= 0),
                 Not(_k2!6 >= 0),
                 d3array2(A,
                          _k3!7,
                          _k2!6,
                          _n1!8,
                          1 + _n1!8,
                          _k2!6,
                          _k3!7) ==
                 C)) ==
           Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3) ==
                            C))),
              Not(_n1!8 >= 0),
              Not(_k3!7 >= 0),
              Not(_k2!6 >= 0),
              d3array2(A,
                       _k3!7,
                       _k2!6,
                       _n1!8,
                       1 + _n1!8,
                       _k2!6,
                       _k3!7) ==
              C)),
   Or(Not(ForAll([_n1, _n3, _n2],
                 Or(Not(_n1 >= 0),
                    Not(_n3 >= 0),
                    Not(_n2 >= 0),
                    d3array2(A,
                             _n3,
                             _n2,
                             _n1,
                             1 + _n1,
                             _n2,
                             _n3) ==
                    C))),
      Not(_n1!8 >= 0),
      Not(_k3!7 >= 0),
      Not(_k2!6 >= 0),
      d3array2(A,
               _k3!7,
               _k2!6,
               _n1!8,
               1 + _n1!8,
               _k2!6,
               _k3!7) ==
      C)), mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     C))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       C) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  C)),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        C))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                    C)))),
             ForAll([_n1, _n3, _n2],
                    Or(Not(And(_n1 >= 0, _n3 >= 0, _n2 >= 0)),
                       d3array2(A,
                                _n3,
                                _n2,
                                _n1,
                                1 + _n1,
                                _n2,
                                _n3) ==
                       C))),
          nnf-pos(refl(~(Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C),
                         Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array2(A,
                                     Var(1),
                                     Var(0),
                                     Var(2),
                                     1 + Var(2),
                                     Var(0),
                                     Var(1)) ==
                            C))),
                  ~(ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
                                       _n3) ==
                              C)),
                    ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array2(A,
                                       _n3,
                                       _n2,
                                       _n1,
                                       1 + _n1,
                                       _n2,
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C)),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        C))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        C)),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C))

***********************
2017-05-20 12:32:23
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 12:34:34
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == C))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        C)))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        C) ==
                                        Or(Not(Var(0) >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        C)),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        C))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        C)))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        C))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        C)))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                 C)))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                   C))),
                     Not(Or(Not(_n1!460 >= 0),
                            d3array5(A,
                                     _k3,
                                     0,
                                     _n1!460,
                                     1,
                                     _k3) ==
                            C)))),
                Not(Or(Not(_n1!460 >= 0),
                       d3array5(A, _k3, 0, _n1!460, 1, _k3) ==
                       C))),
            Not(d3array5(A, _k3, 0, _n1!460, 1, _k3) == C)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                       Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1 + 0,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(False,
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        rewrite(Or(False,
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_n1!460 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!460,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:34:39
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==C),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==C))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==C),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==C))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==C),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==C))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==C),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==C))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k2 + 1,
                                        _k3) ==
                                        C))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C) ==
                                        (d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C)),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        C) ==
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C)),
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        C) ==
                                        Implies(d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C)),
                                        rewrite(Implies(d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C) ==
                                        Or(Not(d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C)),
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        C) ==
                                        Or(Not(d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C)),
                                        Implies(Var(0) >= 0,
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C,
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        C)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        C),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        C))),
                                        rewrite(Implies(Var(0) >=
                                        0,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                       Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)))),
                         trans(monotonicity(rewrite(Or(Not(_k2 >=
                                        0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!462 >= 0),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!462,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C))

***********************
2017-05-20 12:34:44
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 12:37:11
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == C))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        C)))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        C) ==
                                        Or(Not(Var(0) >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        C)),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        C))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        C)))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        C))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        C)))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d3array9(A, 0, _k2, _n1, 1) ==
                                 C)))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                   C))),
                     Not(Or(Not(_n1!230 >= 0),
                            d3array9(A, 0, _k2, _n1!230, 1) ==
                            C)))),
                Not(Or(Not(_n1!230 >= 0),
                       d3array9(A, 0, _k2, _n1!230, 1) == C))),
            Not(d3array9(A, 0, _k2, _n1!230, 1) == C)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1)),
                                        (d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0)) ==
                                        (d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        False,
                                        False,
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0))),
                                        rewrite(Or(Not(_k2 >=
                                        0),
                                        False,
                                        False,
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        _N2(0),
                                        0))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!230 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!230,
                                        1 + 0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:37:15
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==C),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==C))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==C),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==C))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==C),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==C))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==C),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==C))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k3 + 1) ==
                                        C))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3)),
                                        (d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C) ==
                                        (d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C)),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3)),
                                        (d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        C) ==
                                        (d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)),
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        C) ==
                                        Implies(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)),
                                        rewrite(Implies(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C) ==
                                        Or(Not(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)),
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        C) ==
                                        Or(Not(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)),
                                        Implies(Var(0) >= 0,
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C,
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        C)) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        C),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        C)),
                                        Implies(Var(0) >= 0,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3)))),
                         trans(monotonicity(rewrite(Or(Not(_k2 >=
                                        0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!353 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!353,
                                        _N2(_k3),
                                        _k3))),
                               Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C))

***********************
2017-05-20 12:37:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == C))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C)))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C)),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C)))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C)))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                 C)))),
                sk(~(Not(ForAll([_n1, _n3, _n2],
                                Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                   d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                   C))),
                     Not(Or(Not(And(_n1!8 >= 0,
                                    _n3!7 >= 0,
                                    _n2!6 >= 0)),
                            d3array18(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0) ==
                            C)))),
                Not(Or(Not(And(_n1!8 >= 0,
                               _n3!7 >= 0,
                               _n2!6 >= 0)),
                       d3array18(A, _n3!7, _n2!6, _n1!8, 0) ==
                       C))),
            Not(d3array18(A, _n3!7, _n2!6, _n1!8, 0) == C)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0) ==
                                        d3array9(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _N3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                    Or(Not(_n2!6 >= 0),
                                       Not(_n3!7 >= 0),
                                       Not(_n1!8 >= 0),
                                       d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0) ==
                                       d3array9(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _N3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                    Not(_n2!6 >= 0),
                                    Not(_n3!7 >= 0),
                                    Not(_n1!8 >= 0),
                                    d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0) ==
                                    d3array9(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _N3))),
                         Or(Not(ForAll([_x3, _x2, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                            Not(_n2!6 >= 0),
                            Not(_n3!7 >= 0),
                            Not(_n1!8 >= 0),
                            d3array18(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0) ==
                            d3array9(A,
                                     _n3!7,
                                     _n2!6,
                                     _n1!8,
                                     _N3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:37:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == C))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, _k6) == C)))
_s.add(_k6>=0)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        C)))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        C)),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        C))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        C)))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        C))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        C)))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                 C)))),
                sk(~(Not(ForAll([_n1, _n3, _n2],
                                Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                   d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                   C))),
                     Not(Or(Not(And(_n1!8 >= 0,
                                    _n3!7 >= 0,
                                    _n2!6 >= 0)),
                            d3array14(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k6) ==
                            C)))),
                Not(Or(Not(And(_n1!8 >= 0,
                               _n3!7 >= 0,
                               _n2!6 >= 0)),
                       d3array14(A,
                                 _n3!7,
                                 _n2!6,
                                 _n1!8,
                                 0,
                                 _k6) ==
                       C))),
            Not(d3array14(A, _n3!7, _n2!6, _n1!8, 0, _k6) ==
                C)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!8 >= 0),
                                        d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                        d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Or(Not(_n2!6 >= 0),
                                       Not(_n3!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_n1!8 >= 0),
                                       d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                       d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Not(_n2!6 >= 0),
                                    Not(_n3!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_n1!8 >= 0),
                                    d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                    d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                            Not(_n2!6 >= 0),
                            Not(_n3!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_n1!8 >= 0),
                            d3array14(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k6) ==
                            d3array18(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:37:29
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == C))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == C))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == C))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(A, _x2, _x3, _x4, _k5, _k6) == C)))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, _k6) == C)))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == C))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        C))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        C))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        C)))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                 C)))),
                sk(~(Not(ForAll([_n1, _n3, _n2],
                                Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                   d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                   C))),
                     Not(Or(Not(And(_n1!8 >= 0,
                                    _n3!7 >= 0,
                                    _n2!6 >= 0)),
                            d3array11(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k5,
                                      _k6) ==
                            C)))),
                Not(Or(Not(And(_n1!8 >= 0,
                               _n3!7 >= 0,
                               _n2!6 >= 0)),
                       d3array11(A,
                                 _n3!7,
                                 _n2!6,
                                 _n1!8,
                                 0,
                                 _k5,
                                 _k6) ==
                       C))),
            Not(d3array11(A,
                          _n3!7,
                          _n2!6,
                          _n1!8,
                          0,
                          _k5,
                          _k6) ==
                C)), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_n1!8 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Or(Not(_n2!6 >= 0),
                                       Not(_n3!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_n1!8 >= 0),
                                       d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                       d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Not(_n2!6 >= 0),
                                    Not(_n3!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_n1!8 >= 0),
                                    d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                    d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                            Not(_n2!6 >= 0),
                            Not(_n3!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_n1!8 >= 0),
                            d3array11(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k5,
                                      _k6) ==
                            d3array14(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 12:37:31
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==C),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==C))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==C),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==C))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==C),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==C))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(A, _x2, _x3, _x4, _k5, _k6) == C)))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, _k6) == C)))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==C),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==C))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        C))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        2 ==
                                        2 + _k4),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        rewrite(Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Or(Not(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        C) ==
                                        Or(Not(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k4 >=
                                        0) ==
                                        (_k4 >= -1)),
                                        Not(1 + _k4 >= 0) ==
                                        Not(_k4 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k4 ==
                                        2 + _k4),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        (d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k4 >= -1),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == C))

***********************
2017-05-20 12:37:34
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==C),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==C))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==C),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==C))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==C),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==C))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(A, _x2, _x3, _x4, _k5, _k6) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==C),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==C))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6) ==
                                        C))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6)),
                                        (d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        C) ==
                                        (d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C)),
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        C) ==
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C)),
                                        rewrite(Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C) ==
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C)),
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        C) ==
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C,
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        C)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        C),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        C)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!254 >= 0),
                                        Not(_n3!255 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_n1!256 >= 0),
                                        d3array14(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        1 + _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Or(Not(_n2!254 >= 0),
                                       Not(_n3!255 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_n1!256 >= 0),
                                       d3array14(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        1 + _k5,
                                        _k6) ==
                                       d3array11(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Not(_n2!254 >= 0),
                                    Not(_n3!255 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_n1!256 >= 0),
                                    d3array14(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        1 + _k5,
                                        _k6) ==
                                    d3array11(A,
                                        _n3!255,
                                        _n2!254,
                                        _n1!256,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                            Not(_n2!254 >= 0),
                            Not(_n3!255 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_n1!256 >= 0),
                            d3array14(A,
                                      _n3!255,
                                      _n2!254,
                                      _n1!256,
                                      1 + _k5,
                                      _k6) ==
                            d3array11(A,
                                      _n3!255,
                                      _n2!254,
                                      _n1!256,
                                      _N4(_k5, _k6),
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5 + 1,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == C))

***********************
2017-05-20 12:37:41
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==C),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==C))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==C),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==C))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==C),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==C))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == C)))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, _k6) == C)))
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==C),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==C))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6 + 1) ==
                                        C))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6)),
                                        (d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        C) ==
                                        (d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        C) ==
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)),
                                        rewrite(Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C) ==
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        C) ==
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        C)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        C,
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        C)) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                       Or(Not(_n2!264 >= 0),
                                        Not(_n3!265 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!266 >= 0),
                                        d3array18(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        1 + _k6) ==
                                        d3array14(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        _N5(_k6),
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Or(Not(_n2!264 >= 0),
                                       Not(_n3!265 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_n1!266 >= 0),
                                       d3array18(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        1 + _k6) ==
                                       d3array14(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        _N5(_k6),
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Not(_n2!264 >= 0),
                                    Not(_n3!265 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_n1!266 >= 0),
                                    d3array18(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        1 + _k6) ==
                                    d3array14(A,
                                        _n3!265,
                                        _n2!264,
                                        _n1!266,
                                        _N5(_k6),
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                            Not(_n2!264 >= 0),
                            Not(_n3!265 >= 0),
                            Not(_k6 >= 0),
                            Not(_n1!266 >= 0),
                            d3array18(A,
                                      _n3!265,
                                      _n2!264,
                                      _n1!266,
                                      1 + _k6) ==
                            d3array14(A,
                                      _n3!265,
                                      _n2!264,
                                      _n1!266,
                                      _N5(_k6),
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6 + 1) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1) + 1) ==
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        1 + Var(1))),
                                        (d3array18(A,
                                        Var(2),
                                        Var(3),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, _N6) == C))

***********************
2017-05-20 12:37:47
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==C)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==C)))

System try to prove 
ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==C)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
C=Int('C')
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == C)))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == C)))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == C)))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == C)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, _N6) == C)))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_n2 ,_n3],_N1(_n2, _n3)>=0))
_s.add(ForAll([_n3],_N2(_n3)>=0))
_s.add(_N3>=0)
_s.add(ForAll([_n5 ,_n6],_N4(_n5, _n6)>=0))
_s.add(ForAll([_n6],_N5(_n6)>=0))
_s.add(_N6>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==C)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-partial-3-u/init-partial-3-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-partial-3-u/init-partial-3-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                               C))),
                 Or(Not(_n4!7 >= 0),
                    Not(_n6!6 >= 0),
                    Not(_n5!8 >= 0),
                    d3array18(A, _n6!6, _n5!8, _n4!7, _N6) ==
                    C))),
   rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array18(A, _n3, _n2, _n1, _N6) ==
                            C))),
              Or(Not(_n4!7 >= 0),
                 Not(_n6!6 >= 0),
                 Not(_n5!8 >= 0),
                 d3array18(A, _n6!6, _n5!8, _n4!7, _N6) == C)) ==
           Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array18(A, _n3, _n2, _n1, _N6) ==
                            C))),
              Not(_n4!7 >= 0),
              Not(_n6!6 >= 0),
              Not(_n5!8 >= 0),
              d3array18(A, _n6!6, _n5!8, _n4!7, _N6) == C)),
   Or(Not(ForAll([_n1, _n3, _n2],
                 Or(Not(_n1 >= 0),
                    Not(_n3 >= 0),
                    Not(_n2 >= 0),
                    d3array18(A, _n3, _n2, _n1, _N6) == C))),
      Not(_n4!7 >= 0),
      Not(_n6!6 >= 0),
      Not(_n5!8 >= 0),
      d3array18(A, _n6!6, _n5!8, _n4!7, _N6) == C)), mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                                     C))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C)),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C)),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                       C) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                  C)),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                                        C))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                                    C)))),
             ForAll([_n1, _n3, _n2],
                    Or(Not(And(_n1 >= 0, _n3 >= 0, _n2 >= 0)),
                       d3array18(A, _n3, _n2, _n1, _N6) == C))),
          nnf-pos(refl(~(Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array18(A,
                                      Var(1),
                                      Var(0),
                                      Var(2),
                                      _N6) ==
                            C),
                         Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array18(A,
                                      Var(1),
                                      Var(0),
                                      Var(2),
                                      _N6) ==
                            C))),
                  ~(ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                              C)),
                    ForAll([_n1, _n3, _n2],
                           Or(Not(And(_n1 >= 0,
                                      _n3 >= 0,
                                      _n2 >= 0)),
                              d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6) ==
                              C)))),
          ForAll([_n1, _n3, _n2],
                 Or(Not(And(_n1 >= 0, _n3 >= 0, _n2 >= 0)),
                    d3array18(A, _n3, _n2, _n1, _N6) == C))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(2) >=
                                        0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(2) >=
                                        0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(2) >=
                                        0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(2) >= 0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(2) >= 0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                     Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C) ==
                                     Or(Or(Not(Var(2) >= 0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                        C)),
                        rewrite(Or(Or(Not(Var(2) >= 0),
                                      Not(Var(1) >= 0),
                                      Not(Var(0) >= 0)),
                                   d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N6) ==
                                   C) ==
                                Or(Not(Var(2) >= 0),
                                   Not(Var(1) >= 0),
                                   Not(Var(0) >= 0),
                                   d3array18(A,
                                        Var(1),
                                        Var(0),
..., and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            Not(ForAll([_n5, _n4, _n6],
                                       Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                         sk(~(Not(ForAll([_n5, _n4, _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))),
                              Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                     d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                     C)))),
                         Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                C))),
                     And(_n5!8 >= 0, _n4!7 >= 0, _n6!6 >= 0)),
         _n5!8 >= 0), and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            Not(ForAll([_n5, _n4, _n6],
                                       Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                         sk(~(Not(ForAll([_n5, _n4, _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))),
                              Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                     d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                     C)))),
                         Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                C))),
                     And(_n5!8 >= 0, _n4!7 >= 0, _n6!6 >= 0)),
         _n4!7 >= 0), and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        Not(ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                            Not(ForAll([_n5, _n4, _n6],
                                       Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                         sk(~(Not(ForAll([_n5, _n4, _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))),
                              Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                     d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                     C)))),
                         Not(Or(Not(And(_n5!8 >= 0,
                                        _n4!7 >= 0,
                                        _n6!6 >= 0)),
                                d3array18(A,
                                        _n6!6,
                                        _n5!8,
                                        _n4!7,
                                        _N6) ==
                                C))),
                     And(_n5!8 >= 0, _n4!7 >= 0, _n6!6 >= 0)),
         _n6!6 >= 0), not-or-elim(mp~(mp(asserted(Not(ForAll([_n5, _n4, _n6],
                                       Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        C)),
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                        (ForAll([_n5,
                                        _n4,
                                        _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                                Not(ForAll([_n5, _n4, _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C))) ==
                                Not(ForAll([_n5, _n4, _n6],
                                        Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        C)))),
                   Not(ForAll([_n5, _n4, _n6],
                              Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                 d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                 C)))),
                sk(~(Not(ForAll([_n5, _n4, _n6],
                                Or(Not(And(_n5 >= 0,
                                        _n4 >= 0,
                                        _n6 >= 0)),
                                   d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                   C))),
                     Not(Or(Not(And(_n5!8 >= 0,
                                    _n4!7 >= 0,
                                    _n6!6 >= 0)),
                            d3array18(A,
                                      _n6!6,
                                      _n5!8,
                                      _n4!7,
                                      _N6) ==
                            C)))),
                Not(Or(Not(And(_n5!8 >= 0,
                               _n4!7 >= 0,
                               _n6!6 >= 0)),
                       d3array18(A,
                                 _n6!6,
                                 _n5!8,
                                 _n4!7,
                                 _N6) ==
                       C))),
            Not(d3array18(A, _n6!6, _n5!8, _n4!7, _N6) == C)), False]

Result 
Successfully Proved


Result --Successfully Proved
